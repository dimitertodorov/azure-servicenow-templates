{
  "$schema": "https://schema.management.azure.com/schemas/2021-09-09/uiFormDefinition.schema.json",
  "view": {
    "kind": "Form",
    "dataSources": [
      {
        "kind": "graph",
        "name": "graph",
        "path": "v1.0/me?$select=displayName,id,mail"
      }
    ],
    "properties": {
      "title": "ServiceNow - Azure MID Server Container Environment",
      "steps": [
        {
          "name": "basics",
          "label": "Basics",
          "elements": [
            {
              "name": "resourceScope",
              "type": "Microsoft.Common.ResourceScope",
              "subscription": {
                "constraints": {
                  "validations": [
                    {
                      "isValid": "[or(equals(steps('basics').devopsEnvironmentDropdown.resourceGroupId, steps('basics').resourceScope.resourceGroup.id), steps('basics').deployNewEnvironment)]",
                      "message": "The selected environment is not in the same resource group as the new environment."
                    }
                  ]
                }
              }
            },
            {
              "name": "storageAccountsApi",
              "type": "Microsoft.Solutions.ArmApiControl",
              "request": {
                "method": "POST",
                "path": "/providers/Microsoft.ResourceGraph/resources?api-version=2021-03-01",
                "body": {
                  "query": "resources | where type =~ \"microsoft.storage/storageaccounts\" and tags.SnowEnvironment != \"\" | project label = strcat(tags.SnowEnvironment,\"-\",tags.SnowHost), description = location, value = pack(\"url\", properties.primaryEndpoints.blob, \"resourceId\", id, \"subscriptionId\", subscriptionId, \"resourceGroup\", resourceGroup, \"location\", location, \"subscriptionId\", subscriptionId, \"tags\", tags, \"resourceGroupId\", strcat(\"/subscriptions/\",subscriptionId,\"/resourceGroups/\",resourceGroup)) | order by label asc"
                }
              }
            },
            {
              "name": "acrNameAvailability",
              "type": "Microsoft.Solutions.ArmApiControl",
              "request": {
                "method": "POST",
                "path": "[concat(steps('basics').resourceScope.subscription.id, '/providers/Microsoft.ContainerRegistry/checkNameAvailability?api-version=2024-11-01-preview')]",
                "body": {
                  "name": "[steps('basics').containerRegistrySection.containerRegistryName]",
                  "type": "Microsoft.ContainerRegistry/registries"
                }
              }
            },
            {
              "name": "devopsEnvironmentDropdown",
              "type": "Microsoft.Common.DropDown",
              "label": "Environment Name",
              "toolTip": "The environment name is used to identify the ServiceNow instance and Azure resources.",
              "constraints": {
                "allowedValues": "[steps('basics').storageAccountsApi.data]",
                "required": false
              },
              "visible": "[not(steps('basics').deployNewEnvironment)]"
            },
            {
              "name": "deployNewEnvironment",
              "type": "Microsoft.Common.CheckBox",
              "toolTip": "Check this box to deploy a new ServiceNow MID Server environment.",
              "label": "Deploy a new ServiceNow MID Server Environment"
            },
            {
              "name": "devopsEnvironmentName",
              "type": "Microsoft.Common.TextBox",
              "label": "DevOps Environment Name",
              "toolTip": "Provide a unique name for the DevOps environment.",
              "visible": "[steps('basics').deployNewEnvironment]",
              "constraints": {
                "validations": [
                  {
                    "message": "Environment name must be unique across Azure.",
                    "isValid": "[empty(filter(steps('basics').storageAccountsApi.data, (item) =>  equals(item.value.tags.SnowEnvironment,steps('basics').devopsEnvironmentName)))]"
                  }
                ],
                "required": "[empty(steps('basics').devopsEnvironmentDropdown)]"
              }
            },
            {
              "name": "scopeDifferent",
              "type": "Microsoft.Common.InfoBox",
              "visible": "[and(not(equals(steps('basics').devopsEnvironmentDropdown.resourceGroupId, steps('basics').resourceScope.resourceGroup.id)), not(steps('basics').deployNewEnvironment))]",
              "options": {
                "icon": "Warning",
                "text": "[concat('Please choose the matching subscription and resource group above: ', steps('basics').devopsEnvironmentDropdown.resourceGroupId)]"
              }
            },
            {
              "name": "resourceScopeInfo",
              "type": "Microsoft.Common.InfoBox",
              "label": "Resource Scope",
              "options": {
                "icon": "Info",
                "text": "[steps('basics').resourceScope.resourceGroup.id]"
              }
            },
            {
              "name": "containerRegistrySection",
              "type": "Microsoft.Common.Section",
              "label": "Container Registry Configuration",
              "elements": [
                {
                  "name": "newRegistry",
                  "type": "Microsoft.Common.CheckBox",
                  "label": "Create a New Container Registry"
                },
                {
                  "name": "updateContainerRegistry",
                  "type": "Microsoft.Common.CheckBox",
                  "label": "Update Existing Container Registry",
                  "visible": "[not(empty(steps('basics').devopsEnvironmentDropdown.tags.SnowContainerRegistryId))]"
                },
                {
                  "name": "containerRegistrySelectorOne",
                  "type": "Microsoft.Solutions.ResourceSelector",
                  "label": "Select an existing container registry. ",
                  "resourceType": "Microsoft.ContainerRegistry/registries",
                  "visible": "[and(not(steps('basics').containerRegistrySection.newRegistry),or(steps('basics').containerRegistrySection.updateContainerRegistry, empty(steps('basics').devopsEnvironmentDropdown.tags.SnowContainerRegistryId)))]",
                  "constraints": {
                    "required": false
                  }
                },
                {
                  "name": "containerRegistryExisting",
                  "type": "Microsoft.Common.InfoBox",
                  "visible": "[or(not(empty(steps('basics').containerRegistrySection.containerRegistrySelectorOne.id)), not(empty(steps('basics').devopsEnvironmentDropdown.tags.SnowContainerRegistryId)))]",
                  "options": {
                    "style": "Warning",
                    "text": "[if(empty(steps('basics').containerRegistrySection.containerRegistrySelectorOne.id), steps('basics').devopsEnvironmentDropdown.tags.SnowContainerRegistryId, steps('basics').containerRegistrySection.containerRegistrySelectorOne.id)]"
                  }
                },
                {
                  "name": "containerRegistryNewInfo",
                  "type": "Microsoft.Common.InfoBox",
                  "visible": "[not(empty(steps('basics').containerRegistrySection.containerRegistryName))]",
                  "options": {
                    "style": "Info",
                    "text": "[concat(steps('basics').resourceScope.resourceGroup.id, '/providers/Microsoft.ContainerRegistry/registries/', steps('basics').containerRegistrySection.containerRegistryName)]"
                  }
                },
                {
                  "name": "containerRegistryOutput",
                  "type": "Microsoft.Common.InfoBox",
                  "visible": true,
                  "options": {
                    "style": "Info",
                    "text": "[if(or(empty(steps('basics').containerRegistrySection.containerRegistryExisting), steps('basics').containerRegistrySection.newRegistry), steps('basics').containerRegistrySection.containerRegistryNewInfo, steps('basics').containerRegistrySection.containerRegistryExisting)]"
                  }
                },
                {
                  "name": "containerRegistryName",
                  "type": "Microsoft.Common.TextBox",
                  "label": "Container Registry Name",
                  "toolTip": "Provide a unique name for the DevOps environment.",
                  "visible": "[steps('basics').containerRegistrySection.newRegistry]",
                  "constraints": {
                    "required": "[or(empty(steps('basics').devopsEnvironmentDropdown.tags.SnowContainerRegistryId), empty(steps('basics').containerRegistrySection.containerRegistrySelectorOne.id))]",
                    "validations": [
                      {
                        "message": "[concat('Container registry name must be unique across Azure. ', steps('basics').acrNameAvailability.reason)]",
                        "isValid": "[equals(string(steps('basics').acrNameAvailability.nameAvailable), 'true')]"
                      }
                    ]
                  }
                }
              ]
            }
          ]
        },

        {
          "name": "servicenowConfig",
          "label": "ServiceNow Configuration",
          "elements": [
            {
              "type": "Microsoft.Common.Grid",
              "name": "aadGrid",
              "label": {
                "addition": "Add AAD-Based User",
                "delete": "Delete",
                "summary": "AAD-Based User(s)"
              },
              "visible": "[or(not(empty(steps('basics').devopsEnvironmentDropdown.tags)), steps('basics').deployNewEnvironment)]",
              "defaultValue": "[if(empty(steps('basics').devopsEnvironmentDropdown.tags.SnowAdminEntities), parse('[]'), map(map(split(steps('basics').devopsEnvironmentDropdown.tags.SnowAdminEntities, ','), (item) => split(item, ':')), (item) => parse(concat('{\"id\": \"', first(item), '\", \"@odata.type\": \"#microsoft.graph.', last(item), '\",\"displayName\": \"', first(item), '\"}'))))]",
              "addBlade": {
                "extension": "Microsoft_AAD_IAM",
                "name": "ObjectPickerBlade",
                "parameters": {
                  "title": "addAadLabel",
                  "disabledObjectIds": "[map(steps('servicenowConfig').aadGrid,(element)=>element.id)]",
                  "queries": 7,
                  "disablers": 4
                },
                "outputItem": "selectedObjects",
                "inContextPane": true
              },
              "constraints": {
                "width": "Full",
                "canEditRows": false,
                "columns": [
                  {
                    "id": "id",
                    "header": "Id",
                    "cellType": "readonly",
                    "text": "[$item.id]"
                  },
                  {
                    "id": "displayName",
                    "header": "Display Name",
                    "cellType": "readonly",
                    "text": "[$item.displayName]"
                  },
                  {
                    "id": "type",
                    "header": "Type",
                    "cellType": "readonly",
                    "text": "[parse(replace(string($item), '\"@odata.type\":\"#microsoft.graph.','\"principalType\":\"')).principalType]"
                  }
                ],
                "rows": {
                  "count": {
                    "min": 1,
                    "max": 4
                  }
                }
              }
            },
            {
              "name": "gridDebug",
              "type": "Microsoft.Common.TextBlock",
              "visible": true,
              "options": {
                "text": "[string(map(map(steps('servicenowConfig').aadGrid.data, (item) => parse(replace(string(item),'\"@odata.type\":\"#microsoft.graph.','\"principalType\":\"'))), (g) => parse(concat('{\"principalId\": \"', g.id, '\", \"principalType\": \"', toUpper(first(last(split(g.principalType,'.')))), substring(last(split(g.principalType,'.')), 1, length(last(split(g.principalType,'.')))), '\"}'))))]"
              }
            },
            {
              "name": "existingNetwork",
              "type": "Microsoft.Common.Section",
              "label": "Network Configuration",
              "visible": "[not(steps('basics').deployNewEnvironment)]",
              "elements": [
                {
                  "name": "updateExistingNetwork",
                  "type": "Microsoft.Common.CheckBox",
                  "visible": true,
                  "label": "Update/Create New"
                },
                {
                  "name": "subnetId",
                  "type": "Microsoft.Common.InfoBox",
                  "visible": true,
                  "options": {
                    "style": "Info",
                    "text": "[if(not(empty(steps('basics').devopsEnvironmentDropdown.tags.SnowContainerSubnetId)), steps('basics').devopsEnvironmentDropdown.tags.SnowContainerSubnetId ,concat(steps('basics').resourceScope.subscription.id, '/resourceGroups/', steps('servicenowConfig').newNetwork.vnetCombo.resourceGroup, '/providers/Microsoft.Network/virtualNetworks/', steps('servicenowConfig').newNetwork.vnetCombo.name, '/subnets/', steps('servicenowConfig').newNetwork.vnetCombo.subnets.subnet1.name))]"
                  }
                }
              ]
            },
            {
              "name": "newNetwork",
              "type": "Microsoft.Common.Section",
              "label": "New Network Configuration",
              "visible": "[or(empty(steps('basics').devopsEnvironmentDropdown.tags.SnowContainerSubnetId), steps('servicenowConfig').existingNetwork.updateExistingNetwork)]",
              "elements": [
                {
                  "name": "vnetCombo",
                  "type": "Microsoft.Network.VirtualNetworkCombo",
                  "label": {
                    "virtualNetwork": "Virtual network",
                    "subnets": "Subnets"
                  },
                  "toolTip": {
                    "virtualNetwork": "Select an existing virtual network or create a new one.",
                    "subnets": ""
                  },
                  "defaultValue": {
                    "name": "aci-vnet-default",
                    "addressPrefixSize": "/18"
                  },
                  "constraints": {
                    "minAddressPrefixSize": "/28"
                  },
                  "options": {
                    "hideExisting": false
                  },
                  "subnets": {
                    "subnet1": {
                      "label": "MID Server Container Subnet",
                      "defaultValue": {
                        "name": "aci-subnet-default",
                        "addressPrefixSize": "/27"
                      },
                      "constraints": {
                        "minAddressPrefixSize": "/27",
                        "minAddressCount": 12,
                        "requireContiguousAddresses": false
                      }
                    }
                  },
                  "visible": true
                },
                {
                  "name": "newVnetName",
                  "type": "Microsoft.Common.InfoBox",
                  "options": {
                    "text": "[steps('servicenowConfig').newNetwork.vnetCombo.name]"
                  }
                },
                {
                  "name": "newVnetAddressPrefixes",
                  "type": "Microsoft.Common.InfoBox",
                  "options": {
                    "text": "[string(steps('servicenowConfig').newNetwork.vnetCombo.addressPrefixes)]"
                  }
                },
                {
                  "name": "newVnetSubnetName",
                  "type": "Microsoft.Common.InfoBox",
                  "options": {
                    "text": "[string(steps('servicenowConfig').newNetwork.vnetCombo.subnets.subnet1.name)]"
                  }
                },
                {
                  "name": "newVnetSubnetAddressPrefix",
                  "type": "Microsoft.Common.InfoBox",
                  "options": {
                    "text": "[steps('servicenowConfig').newNetwork.vnetCombo.subnets.subnet1.addressPrefix]"
                  }
                },
                {
                  "name": "newSubnetId",
                  "type": "Microsoft.Common.InfoBox",
                  "visible": true,
                  "options": {
                    "style": "Info",
                    "text": "[concat(steps('basics').resourceScope.subscription.id, '/resourceGroups/', steps('servicenowConfig').newNetwork.vnetCombo.resourceGroup, '/providers/Microsoft.Network/virtualNetworks/', steps('servicenowConfig').newNetwork.vnetCombo.name, '/subnets/', steps('servicenowConfig').newNetwork.vnetCombo.subnets.subnet1.name)]"
                  }
                }
              ]
            },

            {
              "name": "subnetIdOutput",
              "type": "Microsoft.Common.TextBlock",
              "visible": true,
              "label": "Subnet ID",
              "options": {
                "text": "[if(or(empty(steps('basics').devopsEnvironmentDropdown.tags.SnowContainerSubnetId), steps('servicenowConfig').existingNetwork.updateExistingNetwork), steps('servicenowConfig').newNetwork.newSubnetId, steps('servicenowConfig').existingNetwork.subnetId)]"
              }
            },
            {
              "name": "vnetIdOutput",
              "type": "Microsoft.Common.TextBlock",
              "visible": true,
              "label": "Subnet ID",
              "options": {
                "text": "[substring(steps('servicenowConfig').subnetIdOutput, 0, lastIndexOf(steps('servicenowConfig').subnetIdOutput, '/subnets/'))]"
              }
            },

            {
              "name": "vnetArmApi",
              "type": "Microsoft.Solutions.ArmApiControl",
              "request": {
                "method": "GET",
                "path": "[concat(substring(steps('servicenowConfig').subnetIdOutput, 0, lastIndexOf(steps('servicenowConfig').subnetIdOutput, '/subnets/')), '?api-version=2021-02-01')]"
              }
            },
            {
              "name": "networkResourceGroup",
              "type": "Microsoft.Common.TextBlock",
              "visible": true,
              "label": "Network Resource Group",
              "options": {
                "text": "[last(take(split(string(if(or(empty(steps('basics').devopsEnvironmentDropdown.tags.SnowContainerSubnetId), steps('servicenowConfig').existingNetwork.updateExistingNetwork), steps('servicenowConfig').newNetwork.newSubnetId, steps('servicenowConfig').existingNetwork.subnetId)),'/'), 5))]"
              }
            },
            {
              "name": "newOrExistingOutput",
              "type": "Microsoft.Common.TextBlock",
              "visible": true,
              "label": "Network Type",
              "options": {
                "text": "[string(if(or(empty(steps('basics').devopsEnvironmentDropdown.tags.SnowContainerSubnetId), steps('servicenowConfig').existingNetwork.updateExistingNetwork), equals(steps('servicenowConfig').newNetwork.vnetCombo.newOrExisting, 'new'), false))]"
              }
            },
            {
              "name": "networkDebug",
              "type": "Microsoft.Common.Section",
              "label": "Network Debug",
              "visible": true,
              "elements": [
                {
                  "name": "vnetName",
                  "type": "Microsoft.Common.InfoBox",
                  "visible": true,
                  "options": {
                    "style": "Info",
                    "text": "[if(equals(steps('servicenowConfig').newOrExistingOutput, 'true'), steps('servicenowConfig').newNetwork.newVnetName, steps('servicenowConfig').vnetArmApi.name)]"
                  }
                },
                {
                  "name": "vnetAddressPrefixes",
                  "type": "Microsoft.Common.InfoBox",
                  "visible": true,
                  "options": {
                    "style": "Info",
                    "text": "[string(if(equals(steps('servicenowConfig').newOrExistingOutput, 'true'), parse(steps('servicenowConfig').newNetwork.newVnetAddressPrefixes), steps('servicenowConfig').vnetArmApi.properties.addressSpace.addressPrefixes))]"
                  }
                },
                {
                  "name": "subnetName",
                  "type": "Microsoft.Common.InfoBox",
                  "visible": true,
                  "options": {
                    "style": "Info",
                    "text": "[coalesce(steps('servicenowConfig').newNetwork.vnetCombo.subnets.subnet1.name, first(map(filter(steps('servicenowConfig').vnetArmApi.properties.subnets, (item) => equals(item.id, steps('servicenowConfig').subnetIdOutput)), (sbet) => sbet.name)))]"
                  }
                },
                {
                  "name": "subnetAddressPrefix",
                  "type": "Microsoft.Common.InfoBox",
                  "visible": true,
                  "options": {
                    "style": "Info",
                    "text": "[coalesce(steps('servicenowConfig').newNetwork.vnetCombo.subnets.subnet1.addressPrefix, first(map(filter(steps('servicenowConfig').vnetArmApi.properties.subnets, (item) => equals(item.id, steps('servicenowConfig').subnetIdOutput)), (sbet) => sbet.properties.addressPrefix)))]"
                  }
                }
              ]
            },
            {
              "name": "snowHost",
              "type": "Microsoft.Common.TextBox",
              "label": "ServiceNow Host",
              "toolTip": "Enter your ServiceNow instance URL",
              "visible": true,
              "defaultValue": "[steps('basics').devopsEnvironmentDropdown.tags.SnowHost]",
              "constraints": {
                "required": true,
                "regex": "^https?:\\/\\/.*$",
                "validationMessage": "Please enter a valid URL."
              }
            },
            {
              "name": "snowInfo",
              "type": "Microsoft.Common.InfoBox",
              "visible": true,
              "options": {
                "style": "Info",
                "text": "[concat('The current ServiceNow host is: ', string(steps('servicenowConfig').snowHost))]"
              }
            },
            {
              "name": "auth",
              "type": "Microsoft.Common.Section",
              "label": "Authentication",
              "visible": true,
              "elements": [
                {
                  "name": "authenticationMethod",
                  "type": "Microsoft.Common.DropDown",
                  "label": "Authentication Method",
                  "toolTip": "Select the authentication method for ServiceNow.",
                  "defaultValue": "Basic",
                  "constraints": {
                    "allowedValues": [
                      {
                        "value": "Basic",
                        "label": "Basic Authentication"
                      },
                      {
                        "value": "OAuthToken",
                        "label": "OAuth Token"
                      },
                      {
                        "value": "OAuth",
                        "label": "OAuth"
                      }
                    ],
                    "required": true
                  }
                },
                {
                  "name": "snowClientId",
                  "type": "Microsoft.Common.TextBox",
                  "label": "ServiceNow Client ID",
                  "toolTip": "Client ID for ServiceNow OAuth authentication.",
                  "visible": "[or(equals(steps('servicenowConfig').auth.authenticationMethod, 'OAuth'), equals(steps('servicenowConfig').auth.authenticationMethod, 'OAuthToken'))]",
                  "constraints": {
                    "required": "[or(equals(steps('servicenowConfig').auth.authenticationMethod, 'OAuth'), equals(steps('servicenowConfig').auth.authenticationMethod, 'OAuthToken'))]",
                    "validationMessage": "Client ID is required for OAuth authentication."
                  }
                },
                {
                  "name": "snowClientSecret",
                  "type": "Microsoft.Common.PasswordBox",
                  "label": {
                    "password": "ServiceNow Client Secret"
                  },
                  "toolTip": "Client Secret for ServiceNow OAuth authentication.",
                  "visible": "[equals(steps('servicenowConfig').auth.authenticationMethod, 'OAuth')]",
                  "constraints": {
                    "required": "[equals(steps('servicenowConfig').auth.authenticationMethod, 'OAuth')]",
                    "validationMessage": "The Client Secret must be between 12 and 123 characters long, and contain characters from at least 3 of the following groups: uppercase characters, lowercase characters, numbers, and special characters."
                  },
                  "options": {
                    "hideConfirmation": true
                  }
                },
                {
                  "name": "snowAccessToken",
                  "type": "Microsoft.Common.PasswordBox",
                  "label": {
                    "password": "ServiceNow Access Token"
                  },
                  "toolTip": "Access Token for ServiceNow OAuth authentication.",
                  "visible": "[equals(steps('servicenowConfig').auth.authenticationMethod, 'OAuthToken')]",
                  "constraints": {
                    "required": "[equals(steps('servicenowConfig').auth.authenticationMethod, 'OAuthToken')]",
                    "validationMessage": "The Access Token must be provided for OAuth Token authentication."
                  },
                  "options": {
                    "hideConfirmation": true
                  }
                },
                {
                  "name": "snowRefreshToken",
                  "type": "Microsoft.Common.PasswordBox",
                  "label": {
                    "password": "ServiceNow Refresh Token"
                  },
                  "toolTip": "Refresh Token for ServiceNow OAuth authentication.",
                  "visible": "[equals(steps('servicenowConfig').auth.authenticationMethod, 'OAuthToken')]",
                  "constraints": {
                    "required": "[equals(steps('servicenowConfig').auth.authenticationMethod, 'OAuthToken')]",
                    "validationMessage": "The Refresh Token must be provided for OAuth Token authentication."
                  },
                  "options": {
                    "hideConfirmation": true
                  }
                },
                {
                  "name": "snowUsername",
                  "type": "Microsoft.Common.TextBox",
                  "label": "ServiceNow Admin Username, must have access to sys_user, sysauto_script, and ecc_* tables",
                  "toolTip": "Admin username for ServiceNow.",
                  "defaultValue": "admin",
                  "visible": "[or(equals(steps('servicenowConfig').auth.authenticationMethod, 'Basic'), equals(steps('servicenowConfig').auth.authenticationMethod, 'OAuth'))]",
                  "constraints": {
                    "required": "[equals(steps('servicenowConfig').auth.authenticationMethod, 'Basic')]",
                    "validationMessage": "Username must be between 3 and 64 characters long. Required for Basic authentication."
                  }
                },
                {
                  "name": "snowPassword",
                  "type": "Microsoft.Common.PasswordBox",
                  "label": {
                    "password": "ServiceNow Administrator Password",
                    "confirmPassword": "Confirm Password"
                  },
                  "toolTip": "Administrative account password for ServiceNow",
                  "visible": "[or(equals(steps('servicenowConfig').auth.authenticationMethod, 'Basic'), equals(steps('servicenowConfig').auth.authenticationMethod, 'OAuth'))]",
                  "constraints": {
                    "required": "[equals(steps('servicenowConfig').auth.authenticationMethod, 'Basic')]",
                    "validationMessage": "The password must be between 12 and 123 characters long, and contain characters from at least 3 of the following groups: uppercase characters, lowercase characters, numbers, and special characters."
                  },
                  "options": {
                    "hideConfirmation": false
                  }
                }
              ]
            },

            {
              "name": "runValidationScript",
              "type": "Microsoft.Common.CheckBox",
              "label": "Run Validation DeploymentScript",
              "toolTip": "Creates a DeploymentScript and runs it to validate the deployment."
            }
          ]
        }
      ]
    },
    "outputs": {
      "kind": "ResourceGroup",
      "location": "[steps('basics').resourceScope.location.name]",
      "resourceGroupId": "[steps('basics').resourceScope.resourceGroup.id]",
      "parameters": {
        "networkResourceGroupName": "[steps('servicenowConfig').networkResourceGroup]",
        "devopsEnvironmentName": "[if(not(empty(steps('basics').devopsEnvironmentDropdown)), steps('basics').devopsEnvironmentDropdown.tags.SnowEnvironment, steps('basics').devopsEnvironmentName)]",
        "deployNetwork": "[equals(steps('servicenowConfig').newOrExistingOutput, 'true')]",
        "deployPermissions": true,
        "vnetName": "[steps('servicenowConfig').networkDebug.vnetName]",
        "subnetName": "[steps('servicenowConfig').networkDebug.subnetName]",
        "vnetAddressPrefixes": "[parse(steps('servicenowConfig').networkDebug.vnetAddressPrefixes)]",
        "subnetAddressPrefix": "[steps('servicenowConfig').networkDebug.subnetAddressPrefix]",
        "location": "[steps('basics').resourceScope.location.name]",
        "snowHost": "[steps('servicenowConfig').snowHost]",
        "snowCredentials": {
          "Instance": "[steps('servicenowConfig').snowHost]",
          "Credential": "[if(and(not(empty(steps('servicenowConfig').auth.snowUsername)), not(empty(steps('servicenowConfig').auth.snowPassword))), parse(concat('{\"UserName\": \"', steps('servicenowConfig').auth.snowUsername, '\", \"Password\": \"', steps('servicenowConfig').auth.snowPassword, '\"}')), parse('{}'))]",
          "ClientID": "[if(not(empty(steps('servicenowConfig').auth.snowClientId)), steps('servicenowConfig').auth.snowClientId, '')]",
          "ClientSecret": "[if(not(empty(steps('servicenowConfig').auth.snowClientSecret)), steps('servicenowConfig').auth.snowClientSecret, '')]",
          "AccessToken": "[if(not(empty(steps('servicenowConfig').auth.snowAccessToken)), steps('servicenowConfig').auth.snowAccessToken, '')]",
          "RefreshToken": "[if(not(empty(steps('servicenowConfig').auth.snowRefreshToken)), steps('servicenowConfig').auth.snowRefreshToken, '')]"
        },
        "containerSubnetId": "[steps('servicenowConfig').subnetIdOutput]",
        "virtualNetworkRoleId": "9980e02c-c2be-4d73-94e8-173b1dc7cf3c",
        "containerRegistrySubscription": "[last(take(split(steps('basics').containerRegistrySection.containerRegistryOutput,'/'),3))]",
        "containerRegistryResourceGroup": "[last(take(split(steps('basics').containerRegistrySection.containerRegistryOutput,'/'),5))]",
        "containerRegistryName": "[last(split(steps('basics').containerRegistrySection.containerRegistryOutput,'/'))]",
        "adminEntraEntities": "[map(map(steps('servicenowConfig').aadGrid.data, (item) => parse(replace(string(item),'\"@odata.type\":\"#microsoft.graph.','\"principalType\":\"'))), (g) => parse(concat('{\"principalId\": \"', g.id, '\", \"principalType\": \"', toUpper(first(last(split(g.principalType,'.')))), substring(last(split(g.principalType,'.')), 1, length(last(split(g.principalType,'.')))), '\"}')))]",
        "runValidationScript": "[steps('servicenowConfig').runValidationScript]"
      }
    }
  }
}
