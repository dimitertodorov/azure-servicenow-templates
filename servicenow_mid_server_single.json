{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.177.2456",
      "templateHash": "3490502584198497032"
    }
  },
  "parameters": {
    "devopsEnvironmentName": {
      "type": "string"
    },
    "midServerName": {
      "type": "string"
    },
    "midServerCluster": {
      "type": "string"
    },
    "numCpu": {
      "type": "int",
      "defaultValue": 1,
      "allowedValues": [
        1,
        2,
        4,
        8
      ],
      "metadata": {
        "description": "The number of CPU cores to allocate to the MID Server container"
      }
    },
    "memoryInGB": {
      "type": "int",
      "defaultValue": 4,
      "allowedValues": [
        1,
        2,
        4,
        8,
        16
      ],
      "metadata": {
        "description": "The amount of memory in GB to allocate to the MID Server container"
      }
    },
    "customImageName": {
      "type": "string",
      "defaultValue": "snow_mid_custom"
    },
    "customDockerfileContent": {
      "type": "string",
      "defaultValue": "FROM localhost/snow_mid_server:yokohama-12-18-2024__patch1-02-21-2025_03-05-2025_2133\r\nARG AZ_PWSH_VERSION=\"14.1.0\"\r\nARG ANSIBLE_VERSION=\"9.13.0\"\r\nARG AZ_CLI_VERSION=\"2.74.0\"\r\nARG MID_USERNAME=mid\r\n\r\nUSER root\r\n\r\nRUN dnf update -y && \\\r\n    dnf install -y  ca-certificates curl gnupg && \\\r\n    curl -sL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | tee /etc/pki/rpm-gpg/microsoft.asc.gpg > /dev/null && \\\r\n    curl -sL https://packages.microsoft.com/config/rhel/9/prod.repo | tee /etc/yum.repos.d/microsoft-prod.repo && \\\r\n    dnf check-update -y && \\\r\n    dnf install -y azure-cli-${AZ_CLI_VERSION}-1.el9 && \\\r\n    dnf install -y https://github.com/PowerShell/PowerShell/releases/download/v7.5.1/powershell-7.5.1-1.rh.x86_64.rpm && \\\r\n    dnf clean all -y\r\n\r\nUSER $MID_USERNAME\r\n\r\nRUN pwsh -C \"Set-PSRepository -Name 'PSGallery' -InstallationPolicy Trusted\" && \\\r\n    pwsh -C \"Install-Module -Name Az -MinimumVersion ${AZ_PWSH_VERSION} -MaximumVersion ${AZ_PWSH_VERSION} -Force -AllowClobber -Scope CurrentUser -Repository PSGallery -AcceptLicense\" && \\\r\n    pwsh -C \"Install-Module -Name PSDepend -Force -AllowClobber -Scope CurrentUser -Repository PSGallery -AcceptLicense\" && \\\r\n    pwsh -C \"Install-Module -Name InvokeBuild -Force -AllowClobber -Scope CurrentUser -Repository PSGallery -AcceptLicense\"\r\n\r\nENTRYPOINT [\"/opt/snc_mid_server/init\", \"start\"]\r\n"
    },
    "forceBuildCustomImage": {
      "type": "bool",
      "defaultValue": false
    }
  },
  "variables": {
    "storageAccountName": "[format('snst{0}{1}', parameters('devopsEnvironmentName'), uniqueString(resourceGroup().id))]",
    "keyVaultName": "[format('snkv-{0}-{1}', parameters('devopsEnvironmentName'), uniqueString(resourceGroup().id))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('GetBuildContext-{0}', parameters('midServerName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "deploymentScriptName": {
            "value": "[format('SnowMidTools-{0}', parameters('midServerName'))]"
          },
          "userAssignedIdentityName": {
            "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2023-01-01', 'full').tags.SnowDevopsIdentity]"
          },
          "inlineScript": {
            "value": "      Resolve-SNOWMIDPrereqs\r\n      $connectResults = Connect-SNOWMIDAzureFromEnvironment\r\n      $buildContext = Resolve-SNOWMIDBuildContext\r\n      $SnowConn = Resolve-SNOWMIDEnvironmentAuth\r\n      $BuildResults = Build-SNOWMIDSnowMidImage\r\n      $DeploymentScriptOutputs['BuildContext'] = $buildContext\r\n      $DeploymentScriptOutputs['BuildResults'] = $BuildResults\r\n      $UserResult = Set-SNOWMIDServerUser -MidServerName \"$env:MID_SERVER_NAME\" -MidServerCluster \"$env:MID_SERVER_CLUSTER\"\r\n      foreach($key in $UserResult.Keys) {\r\n        $DeploymentScriptOutputs[$key] = $UserResult[$key]\r\n      }\r\n      $DeploymentScriptOutputs['sysauto_script'] = try {\r\n        Start-SNOWMIDValidationScript -MidServerName \"$env:MID_SERVER_NAME\" -ErrorAction Stop\r\n      } catch {\r\n        Write-PSFMessage -Level Warning \"Failed to start validation script. Ensure the MID Server has the necessary permissions.\"\r\n        $null\r\n      }\r\n"
          },
          "devopsEnvironmentName": {
            "value": "[parameters('devopsEnvironmentName')]"
          },
          "tags": {
            "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2023-01-01', 'full').tags]"
          },
          "scriptEnvironmentVariables": {
            "value": [
              {
                "name": "SN_MID_CUSTOM_DOCKERFILE_BASE64",
                "value": "[base64(parameters('customDockerfileContent'))]"
              },
              {
                "name": "MID_SERVER_NAME",
                "value": "[parameters('midServerName')]"
              },
              {
                "name": "MID_SERVER_CLUSTER",
                "value": "[parameters('midServerCluster')]"
              },
              {
                "name": "SN_MID_CUSTOM_IMAGE_NAME",
                "value": "[parameters('customImageName')]"
              },
              {
                "name": "SN_MID_FORCE_BUILD_CUSTOM",
                "value": "[if(parameters('forceBuildCustomImage'), 'true', 'false')]"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "7427849215496489507"
            }
          },
          "parameters": {
            "devopsEnvironmentName": {
              "type": "string",
              "defaultValue": "unts",
              "maxLength": 5,
              "metadata": {
                "description": "The name of the environment. This will be used to tag, and identify resources."
              }
            },
            "deploymentScriptName": {
              "type": "string",
              "defaultValue": "[format('SnowMidTools-{0}', parameters('devopsEnvironmentName'))]"
            },
            "userAssignedIdentityName": {
              "type": "string"
            },
            "inlineScript": {
              "type": "string",
              "defaultValue": "Resolve-SNOWMIDPrereqs\r\n$ctx = Resolve-SNOWMIDBuildContext\r\nforeach($key in $Ctx.Keys) {\r\n  $DeploymentScriptOutputs[$key] = $Ctx[$key]\r\n}\r\n$DeploymentScriptOutputs['ctxJson'] = ($ctx | ConvertTo-Json -Depth 10)\r\n"
            },
            "utcValue": {
              "type": "string",
              "defaultValue": "[utcNow()]"
            },
            "scriptEnvironmentVariables": {
              "type": "array",
              "defaultValue": []
            },
            "tags": {
              "type": "object",
              "defaultValue": "[resourceGroup().tags]"
            }
          },
          "variables": {
            "storageAccountName": "[format('snst{0}{1}', parameters('devopsEnvironmentName'), uniqueString(resourceGroup().id))]",
            "commonScriptContent": "IyMjIEJFR0lOIFBTU25vdy5NaWRUb29scy5wc20xICMjIw0KIyBQU1Nub3cuTWlkVG9vbHMucHNtMQ0KIyBTZWN0aW9uIDA6IE1vZHVsZSBNZXRhZGF0YSAtIFJlc29sdmUgRW52aXJvbm1lbnQgVmFyaWFibGVzIHRvIHNjcmlwdCB2YXJpYWJsZXMuDQoNCmlmICghKEdldC1Db21tYW5kIC1OYW1lICdXcml0ZS1QU0ZNZXNzYWdlJyAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSkpIHsNCiAgICBJbnN0YWxsLU1vZHVsZSAtTmFtZSBQU0ZyYW1ld29yayAtRm9yY2UgLUFsbG93Q2xvYmJlciAtU2NvcGUgQ3VycmVudFVzZXINCiAgICBXcml0ZS1Ib3N0ICdQU0ZyYW1ld29yayBtb2R1bGUgd2FzIG5vdCBmb3VuZC4gSW5zdGFsbGluZyBpbnRvIEN1cnJlbnRVc2VyIHNjb3BlLicNCiAgICBJbXBvcnQtTW9kdWxlIC1OYW1lIFBTRnJhbWV3b3JrIC1Gb3JjZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSAtU2NvcGUgR2xvYmFsDQp9DQojIFdoZW4gdXNpbmcgdGhpcyBhcyBhIE1vZHVsZSwgeW91IG11c3QgdXNlIEltcG9ydC1Nb2R1bGUgd2l0aCB0aGUgLUZvcmNlIHBhcmFtZXRlciwNCiMgdG8gZW5zdXJlIHRoZSBtb2R1bGUgaXMgcmVsb2FkZWQgaWYgY2hhbmdpbmcgYW55IG9mIHRoZSBTTl9NSURfKiBlbnZpcm9ubWVudCB2YXJpYWJsZXMuDQokRGVmYXVsdEVudiA9IEB7DQogICAgU05fTUlEX0VOVklST05NRU5UX05BTUUgID0gJ2xvY2FsJw0KICAgIFNOX01JRF9DT05URVhUICAgICAgICAgICA9ICdsb2NhbCcNCiAgICBTTl9NSURfQlVJTERfU1RSQVRFR1kgICAgPSAncG9kbWFuJw0KICAgIFNOX01JRF9JTUFHRV9OQU1FICAgICAgICA9ICdzbm93X21pZF9iYXNlJw0KICAgIFNOX01JRF9DVVNUT01fSU1BR0VfTkFNRSA9ICdzbm93X21pZF9jdXN0b20nDQp9DQpmb3JlYWNoICgka2V5IGluICREZWZhdWx0RW52LktleXMpIHsNCiAgICAkZW52VmFsdWUgPSBbRW52aXJvbm1lbnRdOjpHZXRFbnZpcm9ubWVudFZhcmlhYmxlKCRrZXksIFtTeXN0ZW0uRW52aXJvbm1lbnRWYXJpYWJsZVRhcmdldF06OlByb2Nlc3MpDQogICAgaWYgKFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRlbnZWYWx1ZSkpIHsNCiAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgVmVyYm9zZSAiJGtleSBpcyBub3Qgc2V0LiBEZWZhdWx0aW5nIHRvICckKCREZWZhdWx0RW52WyRrZXldKScuIg0KICAgICAgICBTZXQtVmFyaWFibGUgLU5hbWUgJGtleSAtU2NvcGUgU2NyaXB0IC1WYWx1ZSAkRGVmYXVsdEVudlska2V5XQ0KICAgIH0NCiAgICBlbHNlIHsNCiAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgVmVyYm9zZSAiJGtleSBpcyBzZXQgdG8gJyRlbnZWYWx1ZScuIg0KICAgICAgICBTZXQtVmFyaWFibGUgLU5hbWUgJGtleSAtU2NvcGUgU2NyaXB0IC1WYWx1ZSAkZW52VmFsdWUNCiAgICB9DQp9DQoNCiRTY3JpcHQ6U05fTUlEX1ZBVUxUX05BTUUgPSAic25taWR2YXVsdC0ke1NOX01JRF9FTlZJUk9OTUVOVF9OQU1FfS0ke1NOX01JRF9DT05URVhUfSINCg0KJFNjcmlwdDpTTl9DT05ORUNUSU9OX1NFQ1JFVF9OQU1FID0gInNub3ctY29ubmVjdGlvbi0ke1NOX01JRF9FTlZJUk9OTUVOVF9OQU1FfS1qc29uIg0KDQokU2NyaXB0OkFaX0NPTk5FQ1RJT05fU0VDUkVUX05BTUUgPSAiYXotY29ubmVjdGlvbi0ke1NOX01JRF9FTlZJUk9OTUVOVF9OQU1FfS1qc29uIg0KDQokU2NyaXB0OlBTRGVwZW5kZW5jaWVzID0gQHsNCiAgICAnY2hlcmljaGl0YS9QU1Nub3cnICAgICAgICAgICAgICAgICAgICAgPSBAew0KICAgICAgICBTb3VyY2UgICAgID0gJ0dpdEh1YlJlcG8nDQogICAgICAgIFJlcG9zaXRvcnkgPSAnY2hlcmljaGl0YS9QU1Nub3cnDQogICAgICAgIFZlcnNpb24gICAgPSAnMS40LjAnDQogICAgICAgIFRhcmdldCAgICAgPSAnQ3VycmVudFVzZXInDQogICAgICAgIFBhcmFtZXRlcnMgPSBAew0KICAgICAgICAgICAgRXh0cmFjdFBhdGggPSAnc3JjLycNCiAgICAgICAgICAgIFRhcmdldFR5cGUgID0gJ1BhcmFsbGVsJw0KICAgICAgICB9DQogICAgfQ0KICAgICdNaWNyb3NvZnQuUG93ZXJTaGVsbC5TZWNyZXRNYW5hZ2VtZW50JyA9IEB7DQogICAgICAgIFRhcmdldCA9ICdDdXJyZW50VXNlcicNCiAgICB9DQogICAgJ01pY3Jvc29mdC5Qb3dlclNoZWxsLlNlY3JldFN0b3JlJyAgICAgID0gQHsNCiAgICAgICAgVGFyZ2V0ID0gJ0N1cnJlbnRVc2VyJw0KICAgIH0NCn0NCg0KZnVuY3Rpb24gR2V0LVNOT1dNaWRUb29sc1N0YXR1cyB7DQogICAgJFN0YXR1cyA9IEB7DQogICAgICAgIFNOX01JRF9FTlZJUk9OTUVOVF9OQU1FICA9ICRTY3JpcHQ6U05fTUlEX0VOVklST05NRU5UX05BTUUNCiAgICAgICAgU05fTUlEX0NPTlRFWFQgICAgICAgICAgID0gJFNjcmlwdDpTTl9NSURfQ09OVEVYVA0KICAgICAgICBTTl9NSURfQlVJTERfU1RSQVRFR1kgICAgPSAkU2NyaXB0OlNOX01JRF9CVUlMRF9TVFJBVEVHWQ0KICAgICAgICBTTl9NSURfSU1BR0VfTkFNRSAgICAgICAgPSAkU2NyaXB0OlNOX01JRF9JTUFHRV9OQU1FDQogICAgICAgIFNOX01JRF9DVVNUT01fSU1BR0VfTkFNRSA9ICRTY3JpcHQ6U05fTUlEX0NVU1RPTV9JTUFHRV9OQU1FDQogICAgICAgIFNOX01JRF9WQVVMVF9OQU1FICAgICAgICA9ICRTY3JpcHQ6U05fTUlEX1ZBVUxUX05BTUUNCiAgICB9DQogICAgcmV0dXJuICRTdGF0dXMNCn0NCg0KIyBTZWN0aW9uIDE6IEF6dXJlL0J1aWxkIEZ1bmN0aW9ucw0KZnVuY3Rpb24gQXNzZXJ0LVNOT1dNSURBekNsaSB7DQogICAgaWYgKCEoR2V0LUNvbW1hbmQgLU5hbWUgJ2F6JyAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSkpIHsNCiAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgV2FybmluZyAtTWVzc2FnZSAnQXp1cmUgQ0xJIG5vdCBmb3VuZC4gSW5zdGFsbGluZyBBenVyZSBDTEknDQogICAgICAgIFJlc29sdmUtU05PV01JREF6dXJlQ2xpIHwgT3V0LU51bGwNCiAgICAgICAgQ29ubmVjdC1TTk9XTUlEQXp1cmVGcm9tRW52aXJvbm1lbnQgfCBPdXQtTnVsbA0KICAgIH0NCn0NCg0KDQpmdW5jdGlvbiBSZXNvbHZlLVNOT1dNSURWYXVsdCB7DQogICAgc3dpdGNoICgkU2NyaXB0OlNOX01JRF9DT05URVhUKSB7DQogICAgICAgICdsb2NhbCcgew0KICAgICAgICAgICAgJFZhdWx0UGFyYW1ldGVycyA9IEB7DQogICAgICAgICAgICAgICAgVmF1bHROYW1lID0gJFNOX01JRF9WQVVMVF9OQU1FDQogICAgICAgICAgICB9DQogICAgICAgICAgICBSZXNvbHZlLVNOT1dNaWRTZWNyZXRNYW5hZ2VtZW50VmF1bHQgQFZhdWx0UGFyYW1ldGVycyAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQ0KICAgICAgICB9DQogICAgICAgICdhenVyZScgew0KICAgICAgICAgICAgaWYgKCEkU2NyaXB0OlNOTUlEQnVpbGRDb250ZXh0LktleVZhdWx0Lm5hbWUpIHsNCiAgICAgICAgICAgICAgICBXcml0ZS1FcnJvciAiS2V5IFZhdWx0IG5vdCBmb3VuZCBmb3IgZW52aXJvbm1lbnQgJCgkZW52OlNOX01JRF9FTlZJUk9OTUVOVF9OQU1FKSINCiAgICAgICAgICAgICAgICByZXR1cm4gJG51bGwNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICRWYXVsdFBhcmFtZXRlcnMgPSBAew0KICAgICAgICAgICAgICAgIFZhdWx0TmFtZSAgICAgICAgICAgPSAkU05fTUlEX1ZBVUxUX05BTUUNCiAgICAgICAgICAgICAgICBBenVyZUtleVZhdWx0TmFtZSAgID0gJFNjcmlwdDpTTk1JREJ1aWxkQ29udGV4dC5LZXlWYXVsdC5OYW1lDQogICAgICAgICAgICAgICAgQXp1cmVTdWJzY3JpcHRpb25JZCA9ICRTY3JpcHQ6U05NSURCdWlsZENvbnRleHQuU3Vic2NyaXB0aW9uSWQNCiAgICAgICAgICAgICAgICBVc2VBenVyZUtleVZhdWx0ICAgID0gJHRydWUNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIFJlc29sdmUtU05PV01pZFNlY3JldE1hbmFnZW1lbnRWYXVsdCBAVmF1bHRQYXJhbWV0ZXJzIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQogICAgICAgIH0NCiAgICAgICAgZGVmYXVsdCB7DQogICAgICAgICAgICBXcml0ZS1FcnJvciAiVW5rbm93biBjb250ZXh0IHR5cGU6ICRTY3JpcHQ6U05fTUlEX0NPTlRFWFQuIFVzZSAnbG9jYWwnIG9yICdhenVyZScuIg0KICAgICAgICAgICAgcmV0dXJuICRudWxsDQogICAgICAgIH0NCiAgICB9DQp9DQoNCmZ1bmN0aW9uIFJlc29sdmUtU05PV01JRFByZXJlcXMgew0KICAgIGlmICgtbm90IChHZXQtQ29tbWFuZCAnSW5zdGFsbC1EZXBlbmRlbmN5JyAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSkpIHsNCiAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgSW1wb3J0YW50ICdJbnN0YWxsaW5nIFBTRGVwZW5kIG1vZHVsZScNCiAgICAgICAgSW5zdGFsbC1Nb2R1bGUgLU5hbWUgUFNEZXBlbmQgLUZvcmNlIC1BbGxvd0Nsb2JiZXIgLVNjb3BlIEN1cnJlbnRVc2VyDQogICAgfQ0KICAgIEltcG9ydC1Nb2R1bGUgLU5hbWUgUFNEZXBlbmQgLUZvcmNlIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlIC1TY29wZSBHbG9iYWwNCiAgICBHZXQtRGVwZW5kZW5jeSAtSW5wdXRPYmplY3QgJFNjcmlwdDpQU0RlcGVuZGVuY2llcyB8IEluc3RhbGwtRGVwZW5kZW5jeQ0KfQ0KDQpmdW5jdGlvbiBSZXNvbHZlLVNOT1dNSURBenVyZUNsaSB7DQogICAgaWYgKC1ub3QgKEdldC1Db21tYW5kICdheicgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUpKSB7DQogICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgLUxldmVsIEltcG9ydGFudCAnQXp1cmUgQ0xJIG5vdCBmb3VuZC4gSW5zdGFsbGluZyBBenVyZSBDTEknDQogICAgICAgIGlmICgoR2V0LUNvbW1hbmQgLU5hbWUgYXB0IC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlKSkgew0KICAgICAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgSW1wb3J0YW50ICdJbnN0YWxsaW5nIEF6dXJlIENMSSB1c2luZyBhcHQnDQogICAgICAgICAgICAkSW5zdGFsbFJlc3VsdHMgPSAoY3VybCAtc0wgaHR0cHM6Ly9ha2EubXMvSW5zdGFsbEF6dXJlQ0xJRGViIHwgYmFzaCkNCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gQ29ubmVjdC1TTk9XTUlEQXp1cmVGcm9tRW52aXJvbm1lbnQgew0KICAgIHBhcmFtIChbc3RyaW5nXSRTY29wZSA9ICdQcm9jZXNzJykNCiAgICAkQXpDbGlFeGlzdHMgPSAoR2V0LUNvbW1hbmQgJ2F6JyAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSkNCiAgICAkT3V0ID0gW29yZGVyZWRdQHsgDQogICAgICAgIFRlbmFudElkID0gJGVudjpBWlVSRV9URU5BTlRfSUQ7IEVudmlyb25tZW50ID0gJGVudjpTTl9NSURfRU5WSVJPTk1FTlRfTkFNRQ0KICAgICAgICBBekNvbnRleHQgPSAoR2V0LUF6Q29udGV4dCAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSkNCiAgICAgICAgQ2xpQ29udGV4dCA9IGlmICgkQXpDbGlFeGlzdHMpIHsgKGF6IGFjY291bnQgc2hvdyAtbyBqc29uIDI+MSB8IENvbnZlcnRGcm9tLUpzb24pIH0gZWxzZSB7ICRudWxsIH0NCiAgICB9DQogICAgaWYgKCRlbnY6SURFTlRJVFlfSEVBREVSKSB7DQogICAgICAgIGlmICgkZW52OkFaVVJFX0NMSUVOVF9JRCAtYW5kICRlbnY6QVpVUkVfQ0xJRU5UX1NFQ1JFVCAtYW5kICRlbnY6QVpVUkVfVEVOQU5UX0lEKSB7IA0KICAgICAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgSW1wb3J0YW50ICdJZ25vcmluZyBNU0kuIFVzaW5nIGVudmlyb25tZW50IHZhcmlhYmxlcyBpbnN0ZWFkJyANCiAgICAgICAgfQ0KICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgIGlmICgoJEF6Q2xpRXhpc3RzKSAtYW5kICEoJE91dC5DbGlDb250ZXh0KSkgew0KICAgICAgICAgICAgICAgICRPdXQuQ2xpQ29udGV4dCA9IGF6IGxvZ2luIC0taWRlbnRpdHkgfCBDb252ZXJ0RnJvbS1Kc29uIHwgU2VsZWN0LU9iamVjdCAtRmlyc3QgMQ0KICAgICAgICAgICAgICAgICRPdXQuQ2xpVmVyc2lvbiA9IGF6IHZlcnNpb24gfCBDb252ZXJ0RnJvbS1Kc29uDQogICAgICAgICAgICB9DQogICAgICAgICAgICAkT3V0LkF6Q29udGV4dCA9IENvbm5lY3QtQXpBY2NvdW50IC1JZGVudGl0eSAtU2NvcGUgJFNjb3BlIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQogICAgICAgICAgICAkU2NyaXB0OlNub3dBekNvbnRleHQgPSAkT3V0DQogICAgICAgICAgICByZXR1cm4gJE91dA0KICAgICAgICB9DQogICAgfQ0KICAgIGlmICgtbm90ICgkZW52OkFaVVJFX0NMSUVOVF9JRCAtYW5kICRlbnY6QVpVUkVfQ0xJRU5UX1NFQ1JFVCAtYW5kICRlbnY6QVpVUkVfVEVOQU5UX0lEKSkgew0KICAgICAgICBpZiAoISRPdXQuQXpDb250ZXh0IC1hbmQgKCRBekNsaUV4aXN0cyAtYW5kICEoJE91dC5DbGlDb250ZXh0KSkpIHsNCiAgICAgICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgLUxldmVsIFdhcm5pbmcgJ05vIEF6dXJlIGNvbnRleHQgZm91bmQuIEFaVVJFX0NMSUVOVF9JRCwgQVpVUkVfQ0xJRU5UX1NFQ1JFVCwgYW5kIEFaVVJFX1RFTkFOVF9JRCBtdXN0IGJlIHNldCcNCiAgICAgICAgICAgIHJldHVybiAkbnVsbA0KICAgICAgICB9DQogICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgSW1wb3J0YW50ICJVc2luZyBFeGlzdGluZyBBenVyZSBjb250ZXh0OiAkKCRPdXQuQXpDb250ZXh0Lk5hbWUpYG4gQ0xJIENvbnRleHQ6ICQoJE91dC5DbGlDb250ZXh0IHwgQ29udmVydFRvLUpzb24gLURlcHRoIDUpIg0KICAgICAgICAgICAgcmV0dXJuICRPdXQNCiAgICAgICAgfQ0KICAgIH0NCiAgICBpZiAoJEF6Q2xpRXhpc3RzIC1hbmQgISgkT3V0LkNsaUNvbnRleHQpKSB7DQogICAgICAgICRPdXQuQ2xpQ29udGV4dCA9IGF6IGxvZ2luIC0tc2VydmljZS1wcmluY2lwYWwgLS11c2VybmFtZSAkZW52OkFaVVJFX0NMSUVOVF9JRCAtLXBhc3N3b3JkICRlbnY6QVpVUkVfQ0xJRU5UX1NFQ1JFVCAtLXRlbmFudCAkZW52OkFaVVJFX1RFTkFOVF9JRCB8IENvbnZlcnRGcm9tLUpzb24gfCBTZWxlY3QtT2JqZWN0IC1GaXJzdCAxDQogICAgICAgICRPdXQuQ2xpVmVyc2lvbiA9IGF6IHZlcnNpb24gfCBDb252ZXJ0RnJvbS1Kc29uDQogICAgfQ0KICAgICRMb2dpblBhcmFtcyA9IEB7DQogICAgICAgIFRlbmFudElkID0gJGVudjpBWlVSRV9URU5BTlRfSUQ7IFNlcnZpY2VQcmluY2lwYWwgPSAkdHJ1ZQ0KICAgICAgICBDcmVkZW50aWFsID0gKE5ldy1PYmplY3QgUFNDcmVkZW50aWFsICRlbnY6QVpVUkVfQ0xJRU5UX0lELCAoJGVudjpBWlVSRV9DTElFTlRfU0VDUkVUIHwgQ29udmVydFRvLVNlY3VyZVN0cmluZyAtQXNQbGFpblRleHQgLUZvcmNlKSkNCiAgICAgICAgU2NvcGUgPSAkU2NvcGUNCiAgICB9DQogICAgaWYgKCRlbnY6QVpVUkVfU1VCU0NSSVBUSU9OX0lEKSB7ICRMb2dpblBhcmFtcy5TdWJzY3JpcHRpb24gPSAkZW52OkFaVVJFX1NVQlNDUklQVElPTl9JRCB9DQogICAgDQogICAgJE91dC5BekNvbnRleHQgPSBDb25uZWN0LUF6QWNjb3VudCBATG9naW5QYXJhbXMNCiAgICAkU2NyaXB0OlNub3dBekNvbnRleHQgPSAkT3V0DQogICAgcmV0dXJuICRPdXQNCn0NCmZ1bmN0aW9uIFJlc29sdmUtU05PV01JREN1c3RvbVJlc291cmNlcyB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSRTdWJzY3JpcHRpb25JZCwNCiAgICAgICAgW3N0cmluZ10kUmVzb3VyY2VHcm91cE5hbWUgPSAkZW52OkFaVVJFX1JFU09VUkNFX0dST1VQX05BTUUNCiAgICApDQogICAgJGN0eCA9IEdldC1BekNvbnRleHQgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUNCiAgICBpZiAoLW5vdCAkY3R4KSB7DQogICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgLUxldmVsIFdhcm5pbmcgJ05vIEF6dXJlIGNvbnRleHQgZm91bmQuIFBsZWFzZSBsb2dpbiB0byBBenVyZScNCiAgICAgICAgcmV0dXJuICRudWxsDQogICAgfQ0KICAgICRTdWJzY3JpcHRpb25JZCA9IGlmICgkU3Vic2NyaXB0aW9uSWQpIHsgJFN1YnNjcmlwdGlvbklkIH0gZWxzZSB7ICRjdHguU3Vic2NyaXB0aW9uLklkIH0NCiAgICBpZiAoLW5vdCAkU3Vic2NyaXB0aW9uSWQpIHsNCiAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgV2FybmluZyAnTm8gU3Vic2NyaXB0aW9uIElEIGZvdW5kLiBQbGVhc2UgbG9naW4gdG8gQXp1cmUnDQogICAgICAgIHJldHVybiAkbnVsbA0KICAgIH0NCg0KICAgICRSZXNvdXJjZVF1ZXJ5ID0gQCINCiAgICAgICAgcmVzb3VyY2VzIHwgd2hlcmUgdGFnc1snU25vd0Vudmlyb25tZW50J10gPT0gJyR7U2NyaXB0OlNOX01JRF9FTlZJUk9OTUVOVF9OQU1FfScNCiAgICAgICAgfCBwcm9qZWN0IHJlc291cmNlSWQ9aWQsIG5hbWUsIHR5cGUsIHJlc291cmNlR3JvdXAsIHRhZ3MsIHByb3BlcnRpZXMsIHN1YnNjcmlwdGlvbklkLCBsb2NhdGlvbg0KICAgICAgICB8IG9yZGVyIGJ5IHR5cGUgYXNjLCBuYW1lIGFzYw0KIkANCg0KICAgIFdyaXRlLVBTRk1lc3NhZ2UgIlF1ZXJ5aW5nIEF6dXJlIFJlc291cmNlIEdyYXBoIHdpdGggcXVlcnk6IGBuJFJlc291cmNlUXVlcnkiDQogICAgJHJlc291cmNlcyA9IFNlYXJjaC1BekdyYXBoIC1RdWVyeSAkUmVzb3VyY2VRdWVyeQ0KDQogICAgaWYgKCRyZXNvdXJjZXMuQ291bnQgLWVxIDApIHsNCiAgICAgICAgV3JpdGUtRXJyb3IgIk5vIHJlc291cmNlcyBmb3VuZCBmb3IgZW52aXJvbm1lbnQgJHtTY3JpcHQ6U05fTUlEX0VOVklST05NRU5UX05BTUV9Ig0KICAgICAgICByZXR1cm4gJG51bGwNCiAgICB9DQoNCiAgICAkT3V0cHV0cyA9IFtvcmRlcmVkXUB7DQogICAgICAgIFN1YnNjcmlwdGlvbklkICA9ICRTdWJzY3JpcHRpb25JZA0KICAgICAgICBSZXNvdXJjZUdyb3VwICAgPSAkUmVzb3VyY2VHcm91cE5hbWUNCiAgICAgICAgRW52aXJvbm1lbnROYW1lID0gJFNjcmlwdDpTTl9NSURfRU5WSVJPTk1FTlRfTkFNRQ0KICAgICAgICBTdG9yYWdlQWNjb3VudCAgPSAkcmVzb3VyY2VzIHwgV2hlcmUtT2JqZWN0IHsgJF8udHlwZSAtZXEgJ21pY3Jvc29mdC5zdG9yYWdlL3N0b3JhZ2VhY2NvdW50cycgfSB8IFNlbGVjdC1PYmplY3QgLUZpcnN0IDEgICANCiAgICAgICAgDQogICAgfQ0KDQogICAgaWYgKC1ub3QgJE91dHB1dHMuU3RvcmFnZUFjY291bnQpIHsNCiAgICAgICAgV3JpdGUtRXJyb3IgIk5vIFN0b3JhZ2UgQWNjb3VudCBmb3VuZCBmb3IgZW52aXJvbm1lbnQgJHtTY3JpcHQ6U05fTUlEX0VOVklST05NRU5UX05BTUV9LiBIYXMgdGhpcyBlbnZpcm9ubWVudCBiZWVuIHByb3Zpc2lvbmVkPyIgLUVycm9yQWN0aW9uIFN0b3ANCiAgICB9DQogICAgZWxzZSB7DQogICAgICAgICRPdXRwdXRzLlN1YnNjcmlwdGlvbklkID0gJE91dHB1dHMuU3RvcmFnZUFjY291bnQuc3Vic2NyaXB0aW9uSWQNCiAgICAgICAgJE91dHB1dHMuUmVzb3VyY2VHcm91cCA9ICRPdXRwdXRzLlN0b3JhZ2VBY2NvdW50LnJlc291cmNlR3JvdXANCiAgICAgICAgJENvbnRhaW5lclJlZ2lzdHJ5SWQgPSAkT3V0cHV0cy5TdG9yYWdlQWNjb3VudC50YWdzLlNub3dDb250YWluZXJSZWdpc3RyeUlkDQogICAgICAgICRPdXRwdXRzICs9IEB7DQogICAgICAgICAgICBLZXlWYXVsdCAgICAgICAgICA9ICRyZXNvdXJjZXMgfCBXaGVyZS1PYmplY3QgeyAkXy50eXBlIC1lcSAnbWljcm9zb2Z0LmtleXZhdWx0L3ZhdWx0cycgLWFuZCAkXy5zdWJzY3JpcHRpb25JZCAtZXEgJE91dHB1dHMuU3Vic2NyaXB0aW9uSWQgfSB8IFNlbGVjdC1PYmplY3QgLUZpcnN0IDENCiAgICAgICAgICAgIE1hbmFnZWRJZGVudGl0aWVzID0gJHJlc291cmNlcyB8IFdoZXJlLU9iamVjdCB7ICRfLnR5cGUgLWVxICdtaWNyb3NvZnQubWFuYWdlZGlkZW50aXR5L3VzZXJhc3NpZ25lZGlkZW50aXRpZXMnIC1hbmQgJF8uc3Vic2NyaXB0aW9uSWQgLWVxICRPdXRwdXRzLlN1YnNjcmlwdGlvbklkIH0NCiAgICAgICAgICAgIERldm9wc0lkZW50aXR5ICAgID0gJHJlc291cmNlcyB8IFdoZXJlLU9iamVjdCB7ICRfLnR5cGUgLWVxICdtaWNyb3NvZnQubWFuYWdlZGlkZW50aXR5L3VzZXJhc3NpZ25lZGlkZW50aXRpZXMnIC1hbmQgJF8ubmFtZSAtbGlrZSAiKmRldm9wcy0ke1NjcmlwdDpTTl9NSURfRU5WSVJPTk1FTlRfTkFNRX0qIiAtYW5kICRfLnN1YnNjcmlwdGlvbklkIC1lcSAkT3V0cHV0cy5TdWJzY3JpcHRpb25JZCB9IHwgU2VsZWN0LU9iamVjdCAtRmlyc3QgMQ0KICAgICAgICAgICAgTWlkSWRlbnRpdHkgICAgICAgPSAkcmVzb3VyY2VzIHwgV2hlcmUtT2JqZWN0IHsgJF8udHlwZSAtZXEgJ21pY3Jvc29mdC5tYW5hZ2VkaWRlbnRpdHkvdXNlcmFzc2lnbmVkaWRlbnRpdGllcycgLWFuZCAkXy5uYW1lIC1saWtlICIqbWlkc2VydmVyLSR7U2NyaXB0OlNOX01JRF9FTlZJUk9OTUVOVF9OQU1FfSoiIC1hbmQgJF8uc3Vic2NyaXB0aW9uSWQgLWVxICRPdXRwdXRzLlN1YnNjcmlwdGlvbklkIH0gfCBTZWxlY3QtT2JqZWN0IC1GaXJzdCAxDQogICAgICAgIH0NCiAgICAgICAgJE91dHB1dHMuQ29udGFpbmVyUmVnaXN0cnkgPSBpZiAoJENvbnRhaW5lclJlZ2lzdHJ5SWQpIHsNCiAgICAgICAgICAgIEdldC1BelJlc291cmNlIC1SZXNvdXJjZUlkICRDb250YWluZXJSZWdpc3RyeUlkIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlIHwgU2VsZWN0LU9iamVjdCAtRmlyc3QgMQ0KICAgICAgICB9DQogICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgV2FybmluZyAiTm8gQ29udGFpbmVyIFJlZ2lzdHJ5IGZvdW5kIGZvciAkKCRPdXRwdXRzLlN0b3JhZ2VBY2NvdW50Lm5hbWUpIg0KICAgICAgICB9DQogICAgICAgICRPdXRwdXRzLkNvbnRhaW5lclN1Ym5ldCA9IGlmICgkT3V0cHV0cy5TdG9yYWdlQWNjb3VudC50YWdzLlNub3dDb250YWluZXJTdWJuZXRJZCkgew0KICAgICAgICAgICAgR2V0LUF6UmVzb3VyY2UgLVJlc291cmNlSWQgJE91dHB1dHMuU3RvcmFnZUFjY291bnQudGFncy5Tbm93Q29udGFpbmVyU3VibmV0SWQgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUgfCBTZWxlY3QtT2JqZWN0IC1GaXJzdCAxDQogICAgICAgIH0NCiAgICAgICAgZWxzZSB7DQogICAgICAgICAgICBXcml0ZS1QU0ZNZXNzYWdlIC1MZXZlbCBXYXJuaW5nICJObyBDb250YWluZXIgU3VibmV0IGZvdW5kIGZvciAkKCRPdXRwdXRzLlN0b3JhZ2VBY2NvdW50Lm5hbWUpIg0KICAgICAgICB9DQogICAgfQ0KICAgIGlmICgtbm90ICRPdXRwdXRzLktleVZhdWx0KSB7DQogICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgLUxldmVsIEVycm9yICJObyBLZXkgVmF1bHQgZm91bmQgZm9yIGVudmlyb25tZW50ICR7U2NyaXB0OlNOX01JRF9FTlZJUk9OTUVOVF9OQU1FfSIgLUVycm9yQWN0aW9uIFN0b3ANCiAgICB9DQogICAgaWYgKC1ub3QgJE91dHB1dHMuQ29udGFpbmVyUmVnaXN0cnkpIHsNCiAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgV2FybmluZyAiTm8gQ29udGFpbmVyIFJlZ2lzdHJ5IGZvdW5kIGZvciBlbnZpcm9ubWVudCAke1NjcmlwdDpTTl9NSURfRU5WSVJPTk1FTlRfTkFNRX0iIC1FcnJvckFjdGlvbiBTdG9wDQogICAgfQ0KICAgICRPdXRwdXRzLlJhdyA9ICRyZXNvdXJjZXMNCiAgICAkT3V0cHV0cw0KfQ0KDQpmdW5jdGlvbiBSZXNvbHZlLVNOT1dNSURCdWlsZENvbnRleHQgew0KICAgIHBhcmFtICgNCiAgICAgICAgW3N0cmluZ10kU3Vic2NyaXB0aW9uSWQsDQogICAgICAgIFtzdHJpbmddJFJlc291cmNlR3JvdXBOYW1lID0gJGVudjpBWlVSRV9SRVNPVVJDRV9HUk9VUF9OQU1FLA0KICAgICAgICBbc3dpdGNoXSRSZWxvYWRDb250ZXh0DQogICAgKQ0KICAgIGlmICgtbm90IChHZXQtQ29tbWFuZCBHZXQtQXpDb250ZXh0IC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlKSkgew0KICAgICAgICBJbnN0YWxsLU1vZHVsZSAtTmFtZSBBeiAtRm9yY2UgLUFsbG93Q2xvYmJlciAtU2NvcGUgQ3VycmVudFVzZXINCiAgICB9DQogICAgaWYgKCRTY3JpcHQ6U05NSURCdWlsZENvbnRleHQgLWFuZCAtbm90ICRSZWxvYWRDb250ZXh0LklzUHJlc2VudCkgew0KICAgICAgICBXcml0ZS1QU0ZNZXNzYWdlICJVc2luZyBjYWNoZWQgYnVpbGQgY29udGV4dCBmb3IgZW52aXJvbm1lbnQgJCgkU2NyaXB0OlNOX01JRF9FTlZJUk9OTUVOVF9OQU1FKSBmcm9tIGAkU2NyaXB0OlNOTUlEQnVpbGRDb250ZXh0IiAtTGV2ZWwgVmVyYm9zZQ0KICAgICAgICByZXR1cm4gJFNjcmlwdDpTTk1JREJ1aWxkQ29udGV4dA0KICAgIH0NCiAgICAkT3V0cHV0cyA9IFtvcmRlcmVkXUB7DQogICAgICAgIEVudmlyb25tZW50TmFtZSA9ICRTY3JpcHQ6U05fTUlEX0VOVklST05NRU5UX05BTUUNCiAgICAgICAgU3Vic2NyaXB0aW9uSWQgID0gJFN1YnNjcmlwdGlvbklkDQogICAgICAgIEJ1aWxkU3RyYXRlZ3kgICA9ICRTY3JpcHQ6U05fTUlEX0JVSUxEX1NUUkFURUdZIA0KICAgICAgICBJbWFnZU5hbWUgICAgICAgPSAkU2NyaXB0OlNOX01JRF9JTUFHRV9OQU1FDQogICAgICAgIEN1c3RvbUltYWdlTmFtZSA9ICRTY3JpcHQ6U05fTUlEX0NVU1RPTV9JTUFHRV9OQU1FDQogICAgICAgIFdvcmtEaXIgICAgICAgICA9ICgkZW52OkFaX1NDUklQVFNfUEFUSF9PVVRQVVRfRElSRUNUT1JZID8/ICcvdG1wJykNCiAgICB9DQogICAgc3dpdGNoICgkU2NyaXB0OlNOX01JRF9DT05URVhUKSB7DQogICAgICAgICdsb2NhbCcgew0KICAgICAgICAgICAgJE91dHB1dHMuQ29udGFpbmVyUmVnaXN0cnkgPSBAew0KICAgICAgICAgICAgICAgIG5hbWUgICAgICAgICAgICAgID0gJ2xvY2FsJw0KICAgICAgICAgICAgICAgIHJlc291cmNlR3JvdXBOYW1lID0gJ2xvY2FsJw0KICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbklkICAgID0gJ2xvY2FsJw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgJE91dHB1dHMuQ29udGFpbmVyU3VibmV0ID0gQHsNCiAgICAgICAgICAgICAgICBuYW1lICAgICAgICAgICAgICA9ICdsb2NhbCcNCiAgICAgICAgICAgICAgICByZXNvdXJjZUdyb3VwTmFtZSA9ICdsb2NhbCcNCiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb25JZCAgICA9ICdsb2NhbCcNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICAnYXp1cmUnIHsNCiAgICAgICAgICAgICRjdHggPSBHZXQtQXpDb250ZXh0IC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQogICAgICAgICAgICBpZiAoLW5vdCAkY3R4KSB7DQogICAgICAgICAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgV2FybmluZyAnTm8gQXp1cmUgY29udGV4dCBmb3VuZC4gUGxlYXNlIGxvZ2luIHRvIEF6dXJlJw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgJFN1YnNjcmlwdGlvbklkID0gaWYgKCRTdWJzY3JpcHRpb25JZCkgeyAkU3Vic2NyaXB0aW9uSWQgfSBlbHNlIHsgJGN0eC5TdWJzY3JpcHRpb24uSWQgfQ0KICAgICAgICAgICAgaWYgKC1ub3QgJFN1YnNjcmlwdGlvbklkKSB7DQogICAgICAgICAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgV2FybmluZyAnTm8gU3Vic2NyaXB0aW9uIElEIGZvdW5kLiBQbGVhc2UgbG9naW4gdG8gQXp1cmUnDQogICAgICAgICAgICAgICAgcmV0dXJuICRudWxsDQogICAgICAgICAgICB9DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgICRDb250ZXh0UmVzb3VyY2VzID0gUmVzb2x2ZS1TTk9XTUlEQ3VzdG9tUmVzb3VyY2VzIC1TdWJzY3JpcHRpb25JZCAkU3Vic2NyaXB0aW9uSWQgLVJlc291cmNlR3JvdXBOYW1lICRSZXNvdXJjZUdyb3VwTmFtZQ0KICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRrIGluICRDb250ZXh0UmVzb3VyY2VzLktleXMpIHsNCiAgICAgICAgICAgICAgICAgICAgJE91dHB1dHNbJGtdID0gJENvbnRleHRSZXNvdXJjZXNbJGtdDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY2F0Y2ggew0KICAgICAgICAgICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgLUxldmVsIFdhcm5pbmcgIkVycm9yIEZldGNoaW5nIEFaIFJlc291cmNlcyR7U2NyaXB0OlNOX01JRF9FTlZJUk9OTUVOVF9OQU1FfS4gRXJyb3I6ICRfIg0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGRlZmF1bHQgew0KICAgICAgICAgICAgV3JpdGUtRXJyb3IgIlVua25vd24gY29udGV4dCB0eXBlOiAkU2NyaXB0OlNOX01JRF9DT05URVhULiBVc2UgJ2xvY2FsJyBvciAnYXp1cmUnLiINCiAgICAgICAgICAgIHJldHVybiAkbnVsbA0KICAgICAgICB9DQogICAgfQ0KICAgICRTY3JpcHQ6U05NSURCdWlsZENvbnRleHQgPSAkT3V0cHV0cw0KICAgICRPdXRwdXRzLlZhdWx0ID0gUmVzb2x2ZS1TTk9XTUlEVmF1bHQgLUNvbnRleHRUeXBlICRTY3JpcHQ6U05fTUlEX0NPTlRFWFQNCiAgICAkT3V0cHV0cw0KfQ0KDQpmdW5jdGlvbiBHZXQtU05PV01JRFBmeENlcnRpZmljYXRlQXNQZW0gew0KICAgIHBhcmFtKA0KICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICR0cnVlKV0NCiAgICAgICAgW3N0cmluZ10kQ2VydGlmaWNhdGVOYW1lDQogICAgKQ0KICAgICRLZXlWYXVsdE5hbWUgPSAkU2NyaXB0OlNOTUlEQnVpbGRDb250ZXh0LktleVZhdWx0Lk5hbWUNCiAgICBpZiAoLW5vdCAkS2V5VmF1bHROYW1lKSB7DQogICAgICAgIFdyaXRlLUVycm9yICdLZXlWYXVsdE5hbWUgaXMgcmVxdWlyZWQnDQogICAgICAgIHJldHVybiAkbnVsbA0KICAgIH0NCiAgICBpZiAoJENlcnQgPSBHZXQtQXpLZXlWYXVsdENlcnRpZmljYXRlIC1WYXVsdE5hbWUgJEtleVZhdWx0TmFtZSAtTmFtZSAkQ2VydGlmaWNhdGVOYW1lIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlKSB7DQogICAgICAgICRMZWFmQ29sbGVjdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeS5YNTA5Q2VydGlmaWNhdGVzLlg1MDlDZXJ0aWZpY2F0ZTJDb2xsZWN0aW9uDQogICAgICAgICRDZXJ0Qnl0ZXMgPSBbQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoKEdldC1BektleVZhdWx0U2VjcmV0IC1TZWNyZXRJZCAkQ2VydC5TZWNyZXRJZCAtQXNQbGFpblRleHQpKQ0KICAgICAgICAjIE11c3QgdXNlIEV4cG9ydGFibGUgZmxhZyB0byBleHBvcnQgdGhlIHByaXZhdGUga2V5IG9uIFdpbmRvd3MvTWFjT1MNCiAgICAgICAgJFBmeCA9IFtTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5Llg1MDlDZXJ0aWZpY2F0ZXMuWDUwOUNlcnRpZmljYXRlMl06Om5ldygkQ2VydEJ5dGVzLCAkbnVsbCwgW1N5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuWDUwOUNlcnRpZmljYXRlcy5YNTA5S2V5U3RvcmFnZUZsYWdzXTo6RXhwb3J0YWJsZSkNCiAgICAgICAgJExlYWZDb2xsZWN0aW9uLkFkZCgkUGZ4KSB8IE91dC1OdWxsDQogICAgICAgIHJldHVybiBAKCRMZWFmQ29sbGVjdGlvbi5FeHBvcnRDZXJ0aWZpY2F0ZVBlbXMoKSwgJExlYWZDb2xsZWN0aW9uWzBdLlByaXZhdGVLZXkuRXhwb3J0UGtjczhQcml2YXRlS2V5UGVtKCkpIC1qb2luICJgbiINCiAgICB9DQogICAgZWxzZSB7DQogICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgLUxldmVsIFdhcm5pbmcgIkNlcnRpZmljYXRlICRDZXJ0aWZpY2F0ZU5hbWUgbm90IGZvdW5kIGluIEtleSBWYXVsdCAkS2V5VmF1bHROYW1lIg0KICAgICAgICAkbnVsbA0KICAgIH0NCn0NCg0KZnVuY3Rpb24gUmVzb2x2ZS1TTk9XTUlEQWNySW1hZ2VTdGF0ZSB7DQogICAgJEJ1aWxkQ29udGV4dCA9IFJlc29sdmUtU05PV01JREJ1aWxkQ29udGV4dA0KICAgIGlmICgtbm90ICRCdWlsZENvbnRleHQuQ29udGFpbmVyUmVnaXN0cnkuUmVzb3VyY2VHcm91cE5hbWUpIHsNCiAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgV2FybmluZyAiTm8gQ29udGFpbmVyIFJlZ2lzdHJ5IGZvdW5kIGZvciAke1NjcmlwdDpTTl9NSURfRU5WSVJPTk1FTlRfTkFNRX0iDQogICAgICAgIHJldHVybiAkbnVsbA0KICAgIH0NCiAgICAkQ29udGFpbmVyUmVnaXN0cnkgPSAkQnVpbGRDb250ZXh0LkNvbnRhaW5lclJlZ2lzdHJ5DQogICAgJEFjciA9IEdldC1BekNvbnRhaW5lclJlZ2lzdHJ5IC1SZXNvdXJjZUdyb3VwTmFtZSAkQ29udGFpbmVyUmVnaXN0cnkuUmVzb3VyY2VHcm91cE5hbWUgLU5hbWUgJENvbnRhaW5lclJlZ2lzdHJ5Lm5hbWUgLVN1YnNjcmlwdGlvbklkICRDb250YWluZXJSZWdpc3RyeS5zdWJzY3JpcHRpb25JZCAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQ0KICAgIGlmICgtbm90ICRBY3IpIHsNCiAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgV2FybmluZyAiTm8gQ29udGFpbmVyIFJlZ2lzdHJ5IGZvdW5kIGZvciAke1NjcmlwdDpTTl9NSURfRU5WSVJPTk1FTlRfTkFNRX0iDQogICAgICAgIHJldHVybiAkbnVsbA0KICAgIH0NCiAgICAkSW1hZ2VzID0gR2V0LUF6Q29udGFpbmVyUmVnaXN0cnlSZXBvc2l0b3J5IC1SZWdpc3RyeU5hbWUgJENvbnRhaW5lclJlZ2lzdHJ5Lm5hbWUNCiAgICAkSW1hZ2VzIHwgRm9yRWFjaC1PYmplY3QgeyBHZXQtQXpDb250YWluZXJSZWdpc3RyeVRhZyAtUmVnaXN0cnlOYW1lICRDb250YWluZXJSZWdpc3RyeS5uYW1lIC1SZXBvc2l0b3J5TmFtZSAkXyB9IGANCiAgICB8IEZvckVhY2gtT2JqZWN0IHsgDQogICAgICAgICRpdHMgPSBAew0KICAgICAgICAgICAgTmFtZSAgICAgPSAkXy5JbWFnZU5hbWUNCiAgICAgICAgICAgIFRhZ3MgICAgID0gW1N5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkxpc3RbaGFzaHRhYmxlXV06Om5ldygpDQogICAgICAgICAgICBSZWdpc3RyeSA9ICRfLlJlZ2lzdHJ5DQogICAgICAgIH0NCiAgICAgICAgZm9yZWFjaCAoJHQgaW4gJF8uVGFncykgew0KICAgICAgICAgICAgJGl0cy5UYWdzLkFkZChAe05hbWUgPSAkdC5OYW1lOyBEaWdlc3QgPSAkdC5EaWdlc3QgfSkNCiAgICAgICAgfQ0KICAgICAgICAkaXRzDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBSZXNvbHZlLVNOT1dNSURJbWFnZVN0YXRlIHsNCiAgICAkQnVpbGRDb250ZXh0ID0gUmVzb2x2ZS1TTk9XTUlEQnVpbGRDb250ZXh0DQogICAgJEJ1aWxkU3RyYXRlZ3kgPSAkQnVpbGRDb250ZXh0LkJ1aWxkU3RyYXRlZ3kNCiAgICAkaW1hZ2VzID0gc3dpdGNoICgkQnVpbGRTdHJhdGVneSkgew0KICAgICAgICAnYWNyJyB7DQogICAgICAgICAgICAkSW1hZ2VSZXBvID0gJEJ1aWxkQ29udGV4dC5Db250YWluZXJSZWdpc3RyeS5wcm9wZXJ0aWVzLmxvZ2luU2VydmVyDQogICAgICAgICAgICBSZXNvbHZlLVNOT1dNSURBY3JJbWFnZVN0YXRlIC1CdWlsZENvbnRleHQgJEJ1aWxkQ29udGV4dA0KICAgICAgICB9DQogICAgICAgICdwb2RtYW4nIHsNCiAgICAgICAgICAgICRJbWFnZVJlcG8gPSAnbG9jYWxob3N0Jw0KICAgICAgICAgICAgR2V0LURvY2tlclBvZG1hbkltYWdlU3RhdGUgLUJ1aWxkQ29udGV4dCAkQnVpbGRDb250ZXh0DQogICAgICAgIH0NCiAgICB9DQogICAgJG1pZFZlcnNpb24gPSBHZXQtU05PV01pZFZlcnNpb24NCiAgICAkQnVpbGRDb250ZXh0LkltYWdlU3RhdGUgPSBAew0KICAgICAgICBJbWFnZXMgICAgICAgICAgICAgICAgICAgID0gJGltYWdlcw0KICAgICAgICBNaWRWZXJzaW9uICAgICAgICAgICAgICAgID0gJG1pZFZlcnNpb24NCiAgICAgICAgTWlkSW1hZ2VGYWN0cyAgICAgICAgICAgICA9IChHZXQtU05PV01JRERvd25sb2FkRmFjdHMgLUJ1aWxkVGFnICRtaWRWZXJzaW9uKQ0KICAgICAgICBEb2NrZXJDb250ZXh0ICAgICAgICAgICAgID0gKEpvaW4tUGF0aCAkQnVpbGRDb250ZXh0LldvcmtEaXIgJG1pZFZlcnNpb24pDQogICAgICAgIEJhc2VJbWFnZVVyaSAgICAgICAgICAgICAgPSAiJHtJbWFnZVJlcG99LyQoJEJ1aWxkQ29udGV4dC5JbWFnZU5hbWUpOiQoJG1pZFZlcnNpb24pIg0KICAgICAgICBDdXN0b21JbWFnZVVyaSAgICAgICAgICAgID0gIiR7SW1hZ2VSZXBvfS8kKCRCdWlsZENvbnRleHQuQ3VzdG9tSW1hZ2VOYW1lKTokKCRtaWRWZXJzaW9uKSINCiAgICAgICAgQmFzZUltYWdlRW52aXJvbm1lbnRVcmkgICA9ICIke0ltYWdlUmVwb30vJCgkQnVpbGRDb250ZXh0LkltYWdlTmFtZSk6JCgkQnVpbGRDb250ZXh0LkVudmlyb25tZW50TmFtZSkiDQogICAgICAgIEN1c3RvbUltYWdlRW52aXJvbm1lbnRVcmkgPSAiJHtJbWFnZVJlcG99LyQoJEJ1aWxkQ29udGV4dC5DdXN0b21JbWFnZU5hbWUpOiQoJEJ1aWxkQ29udGV4dC5FbnZpcm9ubWVudE5hbWUpIg0KICAgICAgICBCYXNlSW1hZ2UgICAgICAgICAgICAgICAgID0gKCRpbWFnZXMgfCBXaGVyZS1PYmplY3QgeyAkXy5OYW1lIC1lcSAkQnVpbGRDb250ZXh0LkltYWdlTmFtZSB9KQ0KICAgICAgICBDdXN0b21JbWFnZSAgICAgICAgICAgICAgID0gKCRpbWFnZXMgfCBXaGVyZS1PYmplY3QgeyAkXy5OYW1lIC1lcSAkQnVpbGRDb250ZXh0LkN1c3RvbUltYWdlTmFtZSB9KQ0KICAgIH0NCiAgICAkQnVpbGRDb250ZXh0LkltYWdlU3RhdGUNCn0NCg0KZnVuY3Rpb24gR2V0LVNOT1dNaWRWZXJzaW9uIHsNCiAgICAoR2V0LVNOT1dPYmplY3QgLVRhYmxlICdzeXNfcHJvcGVydGllcycgLVF1ZXJ5ICduYW1lPW1pZC52ZXJzaW9uJyAtRmllbGRzICd2YWx1ZScpIHwgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgdmFsdWUNCn0NCg0KZnVuY3Rpb24gQnVpbGQtU05PV01JREltYWdlQ29tbW9uIHsNCiAgICBwYXJhbSgNCiAgICAgICAgW3N0cmluZ10kU3RyYXRlZ3ksDQogICAgICAgIFtzdHJpbmddJEltYWdlTmFtZSwNCiAgICAgICAgW3N0cmluZ10kSW1hZ2VUYWcsDQogICAgICAgIFtzdHJpbmdbXV0kSW1hZ2VBZGRpdGlvbmFsVGFncyA9IEAoKSwNCiAgICAgICAgW2hhc2h0YWJsZV0kQnVpbGRDb250ZXh0LA0KICAgICAgICBbc3RyaW5nXSREb2NrZXJDb250ZXh0LA0KICAgICAgICBbc3RyaW5nXSREb2NrZXJGaWxlLA0KICAgICAgICBbc3RyaW5nXSRQb2RtYW5Jc29sYXRpb24gPSAnY2hyb290Jw0KICAgICkNCiAgICBzd2l0Y2ggKCRTdHJhdGVneSkgew0KICAgICAgICAnYWNyJyB7DQogICAgICAgICAgICBBc3NlcnQtU05PV01JREF6Q2xpDQogICAgICAgICAgICAkZG9ja2VyRmlsZSA9IChKb2luLVBhdGggJERvY2tlckNvbnRleHQgJERvY2tlckZpbGUpDQogICAgICAgICAgICAkYnVpbGRDb21tYW5kID0gJ2F6Jw0KICAgICAgICAgICAgJGJ1aWxkUGFyYW1zID0gQCgNCiAgICAgICAgICAgICAgICAnYWNyJywgJ2J1aWxkJywgJy0tcmVnaXN0cnknLCAkQnVpbGRDb250ZXh0LkNvbnRhaW5lclJlZ2lzdHJ5Lm5hbWUsDQogICAgICAgICAgICAgICAgJy0taW1hZ2UnLCAiJCgkSW1hZ2VOYW1lKTokSW1hZ2VUYWciLCAnLS1zdWJzY3JpcHRpb24nLCAkQnVpbGRDb250ZXh0LkNvbnRhaW5lclJlZ2lzdHJ5LnN1YnNjcmlwdGlvbklkLA0KICAgICAgICAgICAgICAgICctLWZpbGUnLCAkZG9ja2VyRmlsZSwgJERvY2tlckNvbnRleHQNCiAgICAgICAgICAgICkNCiAgICAgICAgfQ0KICAgICAgICAncG9kbWFuJyB7DQogICAgICAgICAgICAkYnVpbGRDb21tYW5kID0gJ3BvZG1hbicNCiAgICAgICAgICAgICRidWlsZFBhcmFtcyA9IEAoDQogICAgICAgICAgICAgICAgJ2J1aWxkJywgJy0tZm9ybWF0JywgJ2RvY2tlcicsICItLWlzb2xhdGlvbj0ke1BvZG1hbklzb2xhdGlvbn0iLCAnLS10YWcnLCAiJHtJbWFnZU5hbWV9OiR7SW1hZ2VUYWd9IiwNCiAgICAgICAgICAgICAgICAnLWYnLCAkRG9ja2VyRmlsZSwgJERvY2tlckNvbnRleHQNCiAgICAgICAgICAgICkNCiAgICAgICAgfQ0KICAgICAgICBkZWZhdWx0IHsNCiAgICAgICAgICAgIHRocm93ICJVbmtub3duIGJ1aWxkIHN0cmF0ZWd5OiAkU3RyYXRlZ3kiDQogICAgICAgIH0NCiAgICB9DQogICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgSW1wb3J0YW50ICJFeGVjdXRpbmcgJGJ1aWxkQ29tbWFuZCAkKCRidWlsZFBhcmFtcyAtam9pbiAnICcpIg0KICAgICgmICRidWlsZENvbW1hbmQgQGJ1aWxkUGFyYW1zIHwgVGVlLU9iamVjdCAtVmFyaWFibGUgUmVzdWx0IHwgV3JpdGUtVmVyYm9zZSApIA0KICAgIGlmICgkUmVzdWx0KSB7DQogICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgLUxldmVsIEltcG9ydGFudCAiSW1hZ2UgJCgkSW1hZ2VOYW1lKTokSW1hZ2VUYWcgYnVpbHQgc3VjY2Vzc2Z1bGx5Ig0KICAgIH0NCiAgICBlbHNlIHsNCiAgICAgICAgV3JpdGUtRXJyb3IgIkZhaWxlZCB0byBidWlsZCBpbWFnZSAkKCRJbWFnZU5hbWUpOiRJbWFnZVRhZyINCiAgICB9DQogICAgJFJlc3VsdA0KfQ0KDQpmdW5jdGlvbiBFeHBhbmQtU05PV01JREFyY2hpdmUgew0KICAgIHBhcmFtKA0KICAgICAgICBbc3RyaW5nXSRQYXRoLA0KICAgICAgICBbc3RyaW5nXSRPdXRwdXRQYXRoDQogICAgKQ0KICAgICRFeHBhbmRDbWQgPSBHZXQtQ29tbWFuZCAtTmFtZSAnRXhwYW5kLUFyY2hpdmUnIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQogICAgaWYgKCEkRXhwYW5kQ21kKSB7DQogICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgLUxldmVsIFdhcm5pbmcgIkV4cGFuZC1BcmNoaXZlIG5vdCBmb3VuZC4gVXNpbmcgdW56aXAgaW5zdGVhZC4iDQogICAgICAgIGFwdCB1cGRhdGUgLXkgJiYgYXB0IGluc3RhbGwgdW56aXAgLXkgfCBXcml0ZS1WZXJib3NlDQogICAgfQ0KICAgIGVsc2Ugew0KICAgICAgICBpZiAoJEV4cGFuZENtZC5QYXJhbWV0ZXJzLk91dHB1dFBhdGgpIHsNCiAgICAgICAgICAgICMgUFNDWCBtb2R1bGUNCiAgICAgICAgICAgIEV4cGFuZC1BcmNoaXZlIC1QYXRoICRQYXRoIC1PdXRwdXRQYXRoICRPdXRwdXRQYXRoIC1Gb3JjZQ0KICAgICAgICB9DQogICAgICAgIGVsc2VpZiAoJEV4cGFuZENtZC5QYXJhbWV0ZXJzLkRlc3RpbmF0aW9uUGF0aCkgew0KICAgICAgICAgICAgIyBQb3dlclNoZWxsIDUuMQ0KICAgICAgICAgICAgRXhwYW5kLUFyY2hpdmUgLVBhdGggJFBhdGggLURlc3RpbmF0aW9uUGF0aCAkT3V0cHV0UGF0aCAtRm9yY2UNCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gQnVpbGQtU05PV01JRFNOT1dNaWRJbWFnZSB7DQogICAgcGFyYW0oDQogICAgICAgIFtzd2l0Y2hdJEZvcmNlQnVpbGRCYXNlLA0KICAgICAgICBbc3dpdGNoXSRGb3JjZUJ1aWxkQ3VzdG9tDQogICAgKQ0KICAgICRCdWlsZENvbnRleHQgPSBSZXNvbHZlLVNOT1dNSURCdWlsZENvbnRleHQNCiAgICAkSW1hZ2VTdGF0ZSA9IFJlc29sdmUtU05PV01JREltYWdlU3RhdGUgLUJ1aWxkQ29udGV4dCAkQnVpbGRDb250ZXh0DQogICAgaWYgKCRlbnY6U05fTUlEX0ZPUkNFX0JVSUxEX0JBU0UgLWVxICd0cnVlJykgew0KICAgICAgICAkRm9yY2VCdWlsZEJhc2UgPSAkdHJ1ZQ0KICAgIH0NCiAgICBpZiAoJGVudjpTTl9NSURfRk9SQ0VfQlVJTERfQ1VTVE9NIC1lcSAndHJ1ZScpIHsNCiAgICAgICAgJEZvcmNlQnVpbGRDdXN0b20gPSAkdHJ1ZQ0KICAgIH0NCiAgICBpZiAoJEZvcmNlQnVpbGRCYXNlIC1vciAoLW5vdCAkSW1hZ2VTdGF0ZS5CYXNlSW1hZ2UgLW9yICgtbm90ICgkSW1hZ2VTdGF0ZS5CYXNlSW1hZ2UuVGFncy5OYW1lLkNvbnRhaW5zKCRJbWFnZVN0YXRlLk1pZFZlcnNpb24pKSkpKSB7DQogICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgLUxldmVsIEltcG9ydGFudCAiQnVpbGRpbmcgJCgkQnVpbGRDb250ZXh0LkltYWdlTmFtZSkgaW1hZ2Ugd2l0aCB0YWcgJCgkSW1hZ2VTdGF0ZS5NaWRWZXJzaW9uKSINCiAgICAgICAgaWYgKC1ub3QgKFRlc3QtUGF0aCAkSW1hZ2VTdGF0ZS5Eb2NrZXJDb250ZXh0KSkgew0KICAgICAgICAgICAgTmV3LUl0ZW0gLVBhdGggJEltYWdlU3RhdGUuRG9ja2VyQ29udGV4dCAtSXRlbVR5cGUgRGlyZWN0b3J5IC1Gb3JjZSB8IE91dC1OdWxsDQogICAgICAgIH0NCiAgICAgICAgJEJhc2VEb2NrZXJGaWxlID0gJ0RvY2tlcmZpbGUnDQogICAgICAgIGlmICgtbm90IChUZXN0LVBhdGggKCIkKCRJbWFnZVN0YXRlLkRvY2tlckNvbnRleHQpLyRCYXNlRG9ja2VyRmlsZSIpKSkgew0KICAgICAgICAgICAgIyBEb3dubG9hZCBmaWxlIGZyb20gSW1hZ2VTdGF0ZSBmYWN0cw0KICAgICAgICAgICAgJEFyY2hpdmVQYXRoID0gIiQoJEJ1aWxkQ29udGV4dC5Xb3JrRGlyKS8kKCRJbWFnZVN0YXRlLk1pZEltYWdlRmFjdHMuUGFja2FnZUZpbGVOYW1lKSINCiAgICAgICAgICAgIEludm9rZS1XZWJSZXF1ZXN0IC1VcmkgJEltYWdlU3RhdGUuTWlkSW1hZ2VGYWN0cy5QYWNrYWdlVXJpIC1PdXRGaWxlICRBcmNoaXZlUGF0aA0KICAgICAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgSW1wb3J0YW50ICJFeHRyYWN0aW5nICQoJEltYWdlU3RhdGUuTWlkSW1hZ2VGYWN0cy5QYWNrYWdlRmlsZU5hbWUpIHRvICQoJEltYWdlU3RhdGUuRG9ja2VyQ29udGV4dCkiDQogICAgICAgICAgICBFeHBhbmQtU05PV01JREFyY2hpdmUgLVBhdGggJEFyY2hpdmVQYXRoIC1PdXRwdXRQYXRoICRJbWFnZVN0YXRlLkRvY2tlckNvbnRleHQgLUZvcmNlDQogICAgICAgIH0NCiAgICAgICAgJEJ1aWxkQ29udGV4dC5CYXNlSW1hZ2VCdWlsZCA9IEJ1aWxkLVNOT1dNSURJbWFnZUNvbW1vbiAtU3RyYXRlZ3kgJEJ1aWxkQ29udGV4dC5CdWlsZFN0cmF0ZWd5IC1JbWFnZU5hbWUgJEJ1aWxkQ29udGV4dC5JbWFnZU5hbWUgLUltYWdlVGFnICRJbWFnZVN0YXRlLk1pZFZlcnNpb24gLUJ1aWxkQ29udGV4dCAkQnVpbGRDb250ZXh0IC1Eb2NrZXJDb250ZXh0ICRJbWFnZVN0YXRlLkRvY2tlckNvbnRleHQgLURvY2tlckZpbGUgJEJhc2VEb2NrZXJGaWxlDQogICAgfQ0KICAgIGlmICgkRm9yY2VCdWlsZEN1c3RvbSAtb3IgKC1ub3QgJEltYWdlU3RhdGUuQ3VzdG9tSW1hZ2UgLW9yICgtbm90ICgkSW1hZ2VTdGF0ZS5DdXN0b21JbWFnZS5UYWdzLk5hbWUuQ29udGFpbnMoJEltYWdlU3RhdGUuTWlkVmVyc2lvbikpKSkpIHsNCiAgICAgICAgJGN1c3RvbURvY2tlckNvbnRlbnQgPSBHZXQtRG9ja2VyUG9kbWFuRG9ja2VyRmlsZUNvbnRlbnQNCiAgICAgICAgaWYgKCRjdXN0b21Eb2NrZXJDb250ZW50KSB7DQogICAgICAgICAgICAkbGluZXMgPSAkY3VzdG9tRG9ja2VyQ29udGVudC5TcGxpdCgiYG4iKQ0KICAgICAgICAgICAgJGZyb21MaW5lSW5kZXggPSAkbGluZXMuSW5kZXhPZigoJGxpbmVzIHwgV2hlcmUtT2JqZWN0IHsgJF8gLW1hdGNoICdeRlJPTVxzJyB9KSkNCiAgICAgICAgICAgICRiYXNlRmlyc3RMaW5lID0gIkZST00gJCgkSW1hZ2VTdGF0ZS5CYXNlSW1hZ2VVcmkpIg0KICAgICAgICAgICAgaWYgKCRmcm9tTGluZUluZGV4IC1nZSAwIC1hbmQgJGxpbmVzWyRmcm9tTGluZUluZGV4XSAtbmUgJGJhc2VGaXJzdExpbmUpIHsNCiAgICAgICAgICAgICAgICBXcml0ZS1QU0ZNZXNzYWdlIC1MZXZlbCBJbXBvcnRhbnQgIlVwZGF0aW5nIGN1c3RvbSBEb2NrZXJmaWxlIHdpdGggY29ycmVjdCBiYXNlIEltYWdlICQoJEltYWdlU3RhdGUuQmFzZUltYWdlVXJpKSINCiAgICAgICAgICAgICAgICAkbGluZXNbJGZyb21MaW5lSW5kZXhdID0gJGJhc2VGaXJzdExpbmUNCiAgICAgICAgICAgICAgICAkY3VzdG9tRG9ja2VyQ29udGVudCA9ICRsaW5lcyAtam9pbiAiYG4iDQogICAgICAgICAgICB9DQogICAgICAgICAgICBXcml0ZS1Ib3N0ICRjdXN0b21Eb2NrZXJDb250ZW50DQogICAgICAgICAgICBpZiAoLW5vdCAoVGVzdC1QYXRoICRJbWFnZVN0YXRlLkRvY2tlckNvbnRleHQpKSB7DQogICAgICAgICAgICAgICAgTmV3LUl0ZW0gLVBhdGggJEltYWdlU3RhdGUuRG9ja2VyQ29udGV4dCAtSXRlbVR5cGUgRGlyZWN0b3J5IC1Gb3JjZSB8IE91dC1OdWxsDQogICAgICAgICAgICB9DQogICAgICAgICAgICAkY3VzdG9tRG9ja2VyRmlsZVBhdGggPSAoSm9pbi1QYXRoICRJbWFnZVN0YXRlLkRvY2tlckNvbnRleHQgJ0RvY2tlcmZpbGUubWlkY3VzdG9tJykNCiAgICAgICAgICAgICRjdXN0b21Eb2NrZXJDb250ZW50IHwgT3V0LUZpbGUgLUZpbGVQYXRoICRjdXN0b21Eb2NrZXJGaWxlUGF0aCAtRm9yY2UgLUVuY29kaW5nIHV0ZjgNCiAgICAgICAgICAgICRCdWlsZENvbnRleHQuQ3VzdG9tSW1hZ2VCdWlsZCA9IEJ1aWxkLVNOT1dNSURJbWFnZUNvbW1vbiAtU3RyYXRlZ3kgJEJ1aWxkQ29udGV4dC5CdWlsZFN0cmF0ZWd5IC1JbWFnZU5hbWUgJEJ1aWxkQ29udGV4dC5DdXN0b21JbWFnZU5hbWUgLUltYWdlVGFnICRJbWFnZVN0YXRlLk1pZFZlcnNpb24gLUJ1aWxkQ29udGV4dCAkQnVpbGRDb250ZXh0IC1Eb2NrZXJDb250ZXh0ICRJbWFnZVN0YXRlLkRvY2tlckNvbnRleHQgLURvY2tlckZpbGUgJ0RvY2tlcmZpbGUubWlkY3VzdG9tJyAtUG9kbWFuSXNvbGF0aW9uICdvY2knDQogICAgICAgIH0NCiAgICAgICAgZWxzZSB7DQogICAgICAgICAgICBXcml0ZS1QU0ZNZXNzYWdlIC1MZXZlbCBXYXJuaW5nICdObyBjdXN0b20gRG9ja2VyZmlsZSBmb3VuZC4gU2tpcHBpbmcgY3VzdG9tIGltYWdlIGJ1aWxkJw0KICAgICAgICB9DQogICAgfQ0KICAgICRJbWFnZVN0YXRlID0gUmVzb2x2ZS1TTk9XTUlESW1hZ2VTdGF0ZSAtQnVpbGRDb250ZXh0ICRCdWlsZENvbnRleHQNCg0KICAgIGZ1bmN0aW9uIFRhZ0ltYWdlKCRTb3VyY2UsICREZXN0KSB7DQogICAgICAgICRjbWQgPSBzd2l0Y2ggKCRCdWlsZENvbnRleHQuQnVpbGRTdHJhdGVneSkgew0KICAgICAgICAgICAgJ2FjcicgeyANCiAgICAgICAgICAgICAgICBBc3NlcnQtU05PV01JREF6Q2xpDQogICAgICAgICAgICAgICAgJGRlc3QgPSBpZiAoJGRlc3QgLW1hdGNoICcuKi8nKSB7ICRkZXN0IC1yZXBsYWNlICcuKi8nLCAnJyB9IGVsc2UgeyAkZGVzdCB9DQogICAgICAgICAgICAgICAgImF6IGFjciBpbXBvcnQgLS1uYW1lICQoJEJ1aWxkQ29udGV4dC5Db250YWluZXJSZWdpc3RyeS5uYW1lKSAtLXNvdXJjZSAkU291cmNlIC0taW1hZ2UgJERlc3QgLS1mb3JjZSAtLXN1YnNjcmlwdGlvbiAkKCRCdWlsZENvbnRleHQuQ29udGFpbmVyUmVnaXN0cnkuc3Vic2NyaXB0aW9uSWQpIg0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgJ3BvZG1hbicgew0KICAgICAgICAgICAgICAgICJwb2RtYW4gdGFnICRTb3VyY2UgJERlc3QiDQogICAgICAgICAgICB9DQogICAgICAgICAgICBkZWZhdWx0IHsNCiAgICAgICAgICAgICAgICB0aHJvdyAiVW5rbm93biBidWlsZCBzdHJhdGVneTogJCgkQnVpbGRDb250ZXh0LkJ1aWxkU3RyYXRlZ3kpIg0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgLUxldmVsIEltcG9ydGFudCAiVGFnZ2luZyBpbWFnZSAkU291cmNlIHdpdGggdGFnICREZXN0IC0gQ29tbWFuZDogJGNtZCINCiAgICAgICAgKEludm9rZS1FeHByZXNzaW9uICRjbWQpIHwgVGVlLU9iamVjdCAtVmFyaWFibGUgUmVzdWx0IHwgV3JpdGUtVmVyYm9zZQ0KICAgICAgICAkUmVzdWx0DQogICAgfQ0KICAgICRCYXNlSW1hZ2VUYWcgPSAkSW1hZ2VTdGF0ZS5CYXNlSW1hZ2UuVGFncyB8IFdoZXJlLU9iamVjdCB7ICRfLk5hbWUgLWVxICRpbWFnZVN0YXRlLk1pZFZlcnNpb24gfQ0KICAgICRCYXNlSW1hZ2VFbnZpcm9ubWVudFRhZyA9ICRJbWFnZVN0YXRlLkJhc2VJbWFnZS5UYWdzIHwgV2hlcmUtT2JqZWN0IHsgJF8uTmFtZSAtZXEgJEJ1aWxkQ29udGV4dC5FbnZpcm9ubWVudE5hbWUgfQ0KICAgIGlmICgkQmFzZUltYWdlVGFnIC1hbmQgJEJhc2VJbWFnZUVudmlyb25tZW50VGFnIC1hbmQgKCRCYXNlSW1hZ2VUYWcuRGlnZXN0IC1lcSAkQmFzZUltYWdlRW52aXJvbm1lbnRUYWcuRGlnZXN0KSkgew0KICAgICAgICBXcml0ZS1QU0ZNZXNzYWdlIC1MZXZlbCBJbXBvcnRhbnQgIkltYWdlICQoJEJ1aWxkQ29udGV4dC5JbWFnZU5hbWUpOiQoJEJ1aWxkQ29udGV4dC5FbnZpcm9ubWVudE5hbWUpIGFscmVhZHkgZXhpc3RzLiBTa2lwcGluZyB0YWdnaW5nLiINCiAgICB9DQogICAgZWxzZSB7DQogICAgICAgICRCdWlsZENvbnRleHQuQmFzZVRhZ1Jlc3VsdCA9IFRhZ0ltYWdlIC1Tb3VyY2UgJEltYWdlU3RhdGUuQmFzZUltYWdlVXJpIC1EZXN0ICRJbWFnZVN0YXRlLkJhc2VJbWFnZUVudmlyb25tZW50VXJpDQogICAgfQ0KICAgIA0KICAgICRDdXN0b21JbWFnZVRhZyA9ICRJbWFnZVN0YXRlLkN1c3RvbUltYWdlLlRhZ3MgfCBXaGVyZS1PYmplY3QgeyAkXy5OYW1lIC1lcSAkaW1hZ2VTdGF0ZS5NaWRWZXJzaW9uIH0NCiAgICAkQ3VzdG9tSW1hZ2VFbnZpcm9ubWVudFRhZyA9ICRJbWFnZVN0YXRlLkN1c3RvbUltYWdlLlRhZ3MgfCBXaGVyZS1PYmplY3QgeyAkXy5OYW1lIC1lcSAkQnVpbGRDb250ZXh0LkVudmlyb25tZW50TmFtZSB9DQogICAgaWYgKCRDdXN0b21JbWFnZVRhZyAtYW5kICRDdXN0b21JbWFnZUVudmlyb25tZW50VGFnIC1hbmQgKCRDdXN0b21JbWFnZVRhZy5EaWdlc3QgLWVxICRDdXN0b21JbWFnZUVudmlyb25tZW50VGFnLkRpZ2VzdCkpIHsNCiAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgSW1wb3J0YW50ICJJbWFnZSAkKCRCdWlsZENvbnRleHQuQ3VzdG9tSW1hZ2VOYW1lKTokKCRCdWlsZENvbnRleHQuRW52aXJvbm1lbnROYW1lKSBhbHJlYWR5IGV4aXN0cy4gU2tpcHBpbmcgdGFnZ2luZy4iDQogICAgfQ0KICAgIGVsc2VpZiAoJEN1c3RvbUltYWdlVGFnKSB7DQogICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgLUxldmVsIEltcG9ydGFudCAiVGFnZ2luZyBpbWFnZSAkKCRCdWlsZENvbnRleHQuQ3VzdG9tSW1hZ2VOYW1lKTokKCRCdWlsZENvbnRleHQuRW52aXJvbm1lbnROYW1lKSINCiAgICAgICAgJEJ1aWxkQ29udGV4dC5DdXN0b21UYWdSZXN1bHQgPSBUYWdJbWFnZSAtU291cmNlICRJbWFnZVN0YXRlLkN1c3RvbUltYWdlVXJpIC1EZXN0ICRJbWFnZVN0YXRlLkN1c3RvbUltYWdlRW52aXJvbm1lbnRVcmkNCiAgICB9DQoNCiAgICBbb3JkZXJlZF1Aew0KICAgICAgICBCYXNlSW1hZ2VFbnZpcm9ubWVudFVyaSAgID0gJEltYWdlU3RhdGUuQmFzZUltYWdlRW52aXJvbm1lbnRVcmkNCiAgICAgICAgQ3VzdG9tSW1hZ2VFbnZpcm9ubWVudFVyaSA9ICRJbWFnZVN0YXRlLkN1c3RvbUltYWdlRW52aXJvbm1lbnRVcmkNCiAgICAgICAgQmFzZUltYWdlVGFnUmVzdWx0ICAgICAgICA9ICRCdWlsZENvbnRleHQuQmFzZVRhZ1Jlc3VsdA0KICAgICAgICBDdXN0b21JbWFnZVRhZ1Jlc3VsdCAgICAgID0gJEJ1aWxkQ29udGV4dC5DdXN0b21UYWdSZXN1bHQNCiAgICB9DQp9DQoNCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KIyBTZWN0aW9uIDI6IFNlcnZpY2VOb3cgRnVuY3Rpb25zDQojID09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCg0KZnVuY3Rpb24gR2V0LVNOT1dDdXJyZW50VXNlciB7DQogICAgJEN1cnJlbnRVc2VyID0gR2V0LVNOT1dPYmplY3QgLVRhYmxlICdzeXNfdXNlcicgLVF1ZXJ5ICJ1c2VyX25hbWU9amF2YXNjcmlwdDpncy5nZXRVc2VyTmFtZSgpIiAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQ0KICAgIGlmICgkQ3VycmVudFVzZXIuQ291bnQgLWVxIDApIHsNCiAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgSW1wb3J0YW50IC1NZXNzYWdlICJObyBjdXJyZW50IHVzZXIgZm91bmQgaW4gU2VydmljZU5vdy4gUGxlYXNlIGNoZWNrIHlvdXIgYXV0aGVudGljYXRpb24uIg0KICAgICAgICByZXR1cm4gJG51bGwNCiAgICB9DQogICAgcmV0dXJuICRDdXJyZW50VXNlclswXQ0KfQ0KZnVuY3Rpb24gR2V0LVNOT1dNSURSZWNvcmRXaXRoQ3JlZHMgew0KICAgIHBhcmFtICgNCiAgICAgICAgW3BzY3JlZGVudGlhbF0kQ3JlZGVudGlhbCwNCiAgICAgICAgW3N0cmluZ10kVGFibGUgPSAnc3lzX3VzZXInLA0KICAgICAgICBbc3RyaW5nXSRRdWVyeSA9ICJ1c2VyX25hbWU9JCgkQ3JlZGVudGlhbC5Vc2VyTmFtZSkiDQogICAgKQ0KICAgICRDdXJyZW50U25vd0F1dGggPSBHZXQtU05PV0F1dGggLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUNCiAgICAkSW5zdGFuY2UgPSAkU2NyaXB0OlNub3dFbnZpcm9ubWVudEF1dGguSW5zdGFuY2UgPz8gJEN1cnJlbnRTbm93QXV0aC5JbnN0YW5jZQ0KICAgIGlmICggLW5vdCAkSW5zdGFuY2UpIHsNCiAgICAgICAgV3JpdGUtRXJyb3IgIk5vIFNlcnZpY2VOb3cgaW5zdGFuY2UgZm91bmQuIFBsZWFzZSBzZXQgdGhlIFNOX0hPU1QgZW52aXJvbm1lbnQgdmFyaWFibGUuIg0KICAgICAgICByZXR1cm4gJG51bGwNCiAgICB9DQogICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgSW1wb3J0YW50ICJVc2luZyBTZXJ2aWNlTm93IGluc3RhbmNlICRJbnN0YW5jZSB3aXRoIHVzZXIgJCgkQ3JlZGVudGlhbC5Vc2VyTmFtZSkiDQogICAgU2V0LVNOT1dBdXRoIC1JbnN0YW5jZSAkSW5zdGFuY2UgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwNCiAgICAkcmVzdWx0ID0gR2V0LVNOT1dPYmplY3QgLVRhYmxlICRUYWJsZSAtUXVlcnkgJFF1ZXJ5IC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQogICAgaWYgKC1ub3QgJHJlc3VsdCkgew0KICAgICAgICBXcml0ZS1QU0ZNZXNzYWdlIC1MZXZlbCBXYXJuaW5nICJGYWlsZWQgdG8gYXV0aGVudGljYXRlIHRvIFNlcnZpY2VOb3cgd2l0aCB1c2VyICQoJENyZWRlbnRpYWwuVXNlck5hbWUpIg0KICAgIH0NCiAgICBpZiAoJEN1cnJlbnRTbm93QXV0aCkgew0KICAgICAgICBXcml0ZS1QU0ZNZXNzYWdlIC1NZXNzYWdlICJSZXN0b3JpbmcgcHJldmlvdXMgU2VydmljZU5vdyBhdXRoZW50aWNhdGlvbiAkKCRDdXJyZW50U25vd0F1dGguQ3JlZGVudGlhbC5Vc2VyTmFtZSlAJCgkQ3VycmVudFNub3dBdXRoLkluc3RhbmNlKSINCiAgICAgICAgU2V0LVNOT1dBdXRoIC1BdXRoT2JqZWN0ICRDdXJyZW50U25vd0F1dGgNCiAgICB9DQogICAgcmV0dXJuICRyZXN1bHQNCn0NCg0KZnVuY3Rpb24gR2V0LVNOT1dNSURTZXJ2ZXJSZWNvcmQgew0KICAgIHBhcmFtKA0KICAgICAgICBbc3RyaW5nXSRNaWRTZXJ2ZXJOYW1lDQogICAgKQ0KICAgIEdldC1TTk9XT2JqZWN0IC1UYWJsZSAnZWNjX2FnZW50JyAtUXVlcnkgIm5hbWU9JE1pZFNlcnZlck5hbWUiDQp9DQoNCmZ1bmN0aW9uIEdlbmVyYXRlUmFuZG9tUGFzc3dvcmQgew0KICAgIHBhcmFtKA0KICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICRmYWxzZSldDQogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEyLCA0MildDQogICAgICAgIFtpbnRdIA0KICAgICAgICAkTGVuZ3RoID0gMjQsDQogICAgICAgIFtzd2l0Y2hdJEFzUGxhaW5UZXh0DQogICAgKQ0KICAgICRzeW1ib2xzID0gJyFAIyQqJy5Ub0NoYXJBcnJheSgpDQogICAgJGNoYXJhY3Rlckxpc3QgPSAnYScuLid6JyArICdBJy4uJ1onICsgJzAnLi4nOScgKyAkc3ltYm9scw0KICAgIGRvIHsNCiAgICAgICAgJHBhc3N3b3JkID0gJycNCiAgICAgICAgZm9yICgkaSA9IDA7ICRpIC1sdCAkTGVuZ3RoOyAkaSsrKSB7DQogICAgICAgICAgICAkcmFuZG9tSW5kZXggPSBbU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeS5SYW5kb21OdW1iZXJHZW5lcmF0b3JdOjpHZXRJbnQzMigwLCAkY2hhcmFjdGVyTGlzdC5MZW5ndGgpDQogICAgICAgICAgICAkcGFzc3dvcmQgKz0gJGNoYXJhY3Rlckxpc3RbJHJhbmRvbUluZGV4XQ0KICAgICAgICB9DQoNCiAgICAgICAgW2ludF0kaGFzTG93ZXJDaGFyID0gJHBhc3N3b3JkIC1jbWF0Y2ggJ1thLXpdJw0KICAgICAgICBbaW50XSRoYXNVcHBlckNoYXIgPSAkcGFzc3dvcmQgLWNtYXRjaCAnW0EtWl0nDQogICAgICAgIFtpbnRdJGhhc0RpZ2l0ID0gJHBhc3N3b3JkIC1tYXRjaCAnWzAtOV0nDQogICAgICAgIFtpbnRdJGhhc1N5bWJvbCA9ICRwYXNzd29yZC5JbmRleE9mQW55KCRzeW1ib2xzKSAtbmUgLTENCg0KICAgIH0NCiAgICB1bnRpbCAoKCRoYXNMb3dlckNoYXIgKyAkaGFzVXBwZXJDaGFyICsgJGhhc0RpZ2l0ICsgJGhhc1N5bWJvbCkgLWdlIDMpDQogICAgDQogICAgaWYgKCRBc1BsYWluVGV4dCkgeyANCiAgICAgICAgcmV0dXJuICRwYXNzd29yZA0KICAgIH0NCiAgICBlbHNlIHsNCiAgICAgICAgcmV0dXJuICRwYXNzd29yZCB8IENvbnZlcnRUby1TZWN1cmVTdHJpbmcgLUFzUGxhaW5UZXh0DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBHZXQtU05PV01JRFVzZXJSb2xlcyB7DQogICAgcGFyYW0oDQogICAgICAgIFtzdHJpbmddJFVzZXJuYW1lLA0KICAgICAgICBbc3dpdGNoXSRJbmNsdWRlSW5oZXJpdGVkDQogICAgKQ0KICAgICRVc2VyID0gR2V0LVNOT1dPYmplY3QgLVRhYmxlICdzeXNfdXNlcicgLVF1ZXJ5ICJ1c2VyX25hbWU9JFVzZXJuYW1lIg0KICAgICRSb2xlUXVlcnkgPSAidXNlcj0kKCRVc2VyLnN5c19pZCleIg0KICAgIGlmICgtbm90ICRJbmNsdWRlSW5oZXJpdGVkKSB7DQogICAgICAgICRSb2xlUXVlcnkgKz0gJ2luaGVyaXRlZD1mYWxzZScNCiAgICB9DQogICAgJFVzZXJSb2xlcyA9IEdldC1TTk9XT2JqZWN0IC1UYWJsZSAnc3lzX3VzZXJfaGFzX3JvbGUnIC1RdWVyeSAkUm9sZVF1ZXJ5IC1EaXNwbGF5VmFsdWUgJ3RydWUnIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQogICAgcmV0dXJuICRVc2VyUm9sZXMNCn0NCg0KZnVuY3Rpb24gQWRkLVNOT1dNSURVc2VyUm9sZXMgew0KICAgIHBhcmFtKA0KICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICR0cnVlKV0NCiAgICAgICAgW3N0cmluZ10kVXNlclN5c0lkLA0KICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICR0cnVlKV0NCiAgICAgICAgW3N0cmluZ1tdXSRSb2xlcw0KICAgICkNCiAgICAkUmVxdWVzdGVkUm9sZXMgPSBHZXQtU05PV09iamVjdCAtVGFibGUgJ3N5c191c2VyX3JvbGUnIC1RdWVyeSAibmFtZT0kKCRSb2xlcyAtam9pbiAnLCcpIg0KICAgICRVc2VyUm9sZXMgPSBHZXQtU05PV09iamVjdCAtVGFibGUgJ3N5c191c2VyX2hhc19yb2xlJyAtUXVlcnkgInVzZXI9JFVzZXJTeXNJZCINCiAgICAkUm9sZUxpc3QgPSAkVXNlclJvbGVzLnJvbGUNCiAgICBmb3JlYWNoICgkUm9sZSBpbiAkUmVxdWVzdGVkUm9sZXMpIHsNCiAgICAgICAgaWYgKCRSb2xlTGlzdC52YWx1ZSAtY29udGFpbnMgJFJvbGUuc3lzX2lkKSB7DQogICAgICAgICAgICBXcml0ZS1QU0ZNZXNzYWdlICJVc2VyIFskVXNlclN5c0lkXSBhbHJlYWR5IGhhcyByb2xlICQoJFJvbGUubmFtZSkiDQogICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICB9DQogICAgICAgICRSb2xlUHJvcGVydGllcyA9IEB7DQogICAgICAgICAgICB1c2VyID0gJFVzZXJTeXNJZA0KICAgICAgICAgICAgcm9sZSA9ICRSb2xlLnN5c19pZA0KICAgICAgICB9DQogICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgLUxldmVsIFNpZ25pZmljYW50ICJBZGRpbmcgcm9sZSAkKCRSb2xlLm5hbWUpIHRvIFskVXNlclN5c0lkXSINCiAgICAgICAgJFJvbGVMaXN0ICs9IE5ldy1TTk9XT2JqZWN0IC1UYWJsZSAnc3lzX3VzZXJfaGFzX3JvbGUnIC1Qcm9wZXJ0aWVzICRSb2xlUHJvcGVydGllcyAtUGFzc1RocnUNCiAgICB9DQogICAgJFJvbGVMaXN0DQp9DQoNCmZ1bmN0aW9uIFNldC1TTk9XTUlEU2VydmVyVXNlciB7DQogICAgcGFyYW0oDQogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUpXQ0KICAgICAgICBbc3RyaW5nXSRNaWRTZXJ2ZXJOYW1lLA0KICAgICAgICBbVmFsaWRhdGVQYXR0ZXJuKCdeW2EtekEtWjAtOVwtXSskJyldDQogICAgICAgIFtzdHJpbmddJE1pZFNlcnZlclVzZXJOYW1lID0gImF6bWlkLSRNaWRTZXJ2ZXJOYW1lIiwNCiAgICAgICAgW3NlY3VyZXN0cmluZ10kUGFzc3dvcmQsDQogICAgICAgIFtzdHJpbmdbXV0kUm9sZXMgPSBAKCdtaWRfc2VydmVyJyksDQogICAgICAgIFtzdHJpbmdbXV0kQ2FwYWJpbGl0aWVzID0gQCgnQUxMJyksDQogICAgICAgIFtzdHJpbmddJE1pZFNlcnZlckNsdXN0ZXIgPSAnYXp1cmUnLA0KICAgICAgICBbaGFzaHRhYmxlXSRVc2VyVmFsdWVzID0gQHt9LA0KICAgICAgICBbc3RyaW5nXSREZWZhdWx0RW1haWxTdWZmaXggPSAnZXhhbXBsZS5jb20nLA0KICAgICAgICBbc3RyaW5nXSRPcGVyYXRpb24gPSAnZGVwbG95Jw0KICAgICkNCiAgICAkTWlkU2VjcmV0TmFtZSA9ICIke01pZFNlcnZlclVzZXJOYW1lfS1wYXNzd29yZCINCiAgICAkVmF1bHRTZWNyZXQgPSBHZXQtU2VjcmV0IC1OYW1lICRNaWRTZWNyZXROYW1lIC1WYXVsdCAkU2NyaXB0OlNOX01JRF9WQVVMVF9OQU1FIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQogICAgDQogICAgaWYgKCRWYXVsdFNlY3JldCkgew0KICAgICAgICBXcml0ZS1QU0ZNZXNzYWdlIC1MZXZlbCBJbXBvcnRhbnQgIlVzaW5nIHBhc3N3b3JkIGZyb20gVmF1bHQgJFNjcmlwdDpTTl9NSURfVkFVTFRfTkFNRSINCiAgICAgICAgaWYgKCRWYXVsdFNlY3JldCAtaXMgW1N5c3RlbS5TZWN1cml0eS5TZWN1cmVTdHJpbmddKSB7DQogICAgICAgICAgICBpZiAoLW5vdCAkUGFzc3dvcmQpIHsNCiAgICAgICAgICAgICAgICAkUGFzc3dvcmQgPSAkVmF1bHRTZWNyZXQNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgLUxldmVsIFdhcm5pbmcgIlNlY3JldCAkTWlkU2VjcmV0TmFtZSBpcyBhbHJlYWR5IHNldCwgYnV0IGEgbmV3IHBhc3N3b3JkIHdhcyBwcm92aWRlZC4gVXNpbmcgdGhlIHByb3ZpZGVkIHBhc3N3b3JkIGluc3RlYWQuIg0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgV2FybmluZyAiU2VjcmV0ICRNaWRTZWNyZXROYW1lIGlzIG5vdCBhIHZhbGlkIFNlY3VyZVN0cmluZyINCiAgICAgICAgfQ0KICAgIH0NCiAgICBpZiAoJGVudjpNSURfSU5TVEFOQ0VfVVNFUk5BTUUgLWFuZCAkZW52Ok1JRF9JTlNUQU5DRV9QQVNTV09SRCkgew0KICAgICAgICBXcml0ZS1QU0ZNZXNzYWdlIC1MZXZlbCBJbXBvcnRhbnQgIlVzaW5nIHBhc3N3b3JkIE1JRF9JTlNUQU5DRV9VU0VSTkFNRTogJE1pZFNlcnZlclVzZXJOYW1lIGFuZCBNSURfSU5TVEFOQ0VfUEFTU1dPUkQiDQogICAgICAgICRQYXNzd29yZCA9ICRlbnY6TUlEX0lOU1RBTkNFX1BBU1NXT1JEIHwgQ29udmVydFRvLVNlY3VyZVN0cmluZyAtQXNQbGFpblRleHQgLUZvcmNlDQogICAgICAgICRNaWRTZXJ2ZXJVc2VyTmFtZSA9ICRlbnY6TUlEX0lOU1RBTkNFX1VTRVJOQU1FDQogICAgfQ0KICAgIGlmICgtbm90ICRQYXNzd29yZCkgew0KICAgICAgICAkUGFzc3dvcmQgPSBHZW5lcmF0ZVJhbmRvbVBhc3N3b3JkIC1MZW5ndGggMTkNCiAgICB9DQogICAgJE1pZFVzZXJDcmVkZW50aWFscyA9IFtwc2NyZWRlbnRpYWxdOjpuZXcoJE1pZFNlcnZlclVzZXJOYW1lLCAkUGFzc3dvcmQpDQogICAgJE1pZE1ldGFkYXRhID0gW29yZGVyZWRdQHsNCiAgICAgICAgVGFnICAgICA9ICdTTk1JRCcNCiAgICAgICAgTmFtZSAgICA9ICRNaWRTZXJ2ZXJOYW1lDQogICAgICAgIENsdXN0ZXIgPSAkTWlkU2VydmVyQ2x1c3Rlcg0KICAgICAgICBTdGF0dXMgID0gJE9wZXJhdGlvbg0KICAgIH0NCg0KICAgICRNaWRVc2VyID0gW2hhc2h0YWJsZV1Aew0KICAgICAgICB1c2VyX25hbWUgICAgICAgICAgICAgICAgID0gJE1pZFNlcnZlclVzZXJOYW1lDQogICAgICAgIHVzZXJfcGFzc3dvcmQgICAgICAgICAgICAgPSAoQ29udmVydEZyb20tU2VjdXJlU3RyaW5nIC1TZWN1cmVTdHJpbmcgJFBhc3N3b3JkIC1Bc1BsYWluVGV4dCkNCiAgICAgICAgYWN0aXZlICAgICAgICAgICAgICAgICAgICA9ICR0cnVlDQogICAgICAgIGVtYWlsICAgICAgICAgICAgICAgICAgICAgPSAiJHtNaWRTZXJ2ZXJVc2VyTmFtZX1AJHtEZWZhdWx0RW1haWxTdWZmaXh9Ig0KICAgICAgICBsb2NrZWRfb3V0ICAgICAgICAgICAgICAgID0gJGZhbHNlDQogICAgICAgIHBhc3N3b3JkX25lZWRzX3Jlc2V0ICAgICAgPSAkZmFsc2UNCiAgICAgICAgZmlyc3RfbmFtZSAgICAgICAgICAgICAgICA9ICRNaWRTZXJ2ZXJOYW1lDQogICAgICAgIGxhc3RfbmFtZSAgICAgICAgICAgICAgICAgPSAnTWlkIFNlcnZlcicNCiAgICAgICAgc291cmNlICAgICAgICAgICAgICAgICAgICA9ICdBenVyZSBNSUQnDQogICAgICAgIGludGVybmFsX2ludGVncmF0aW9uX3VzZXIgPSAkdHJ1ZQ0KICAgICAgICBlbXBsb3llZV9udW1iZXIgICAgICAgICAgID0gKCRNaWRNZXRhZGF0YS5WYWx1ZXMgLWpvaW4gJ3wnKQ0KICAgIH0NCiAgICAkQ3VycmVudFNub3dBdXRoID0gR2V0LVNOT1dBdXRoIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQogICAgJFVzZXJJc0FkbWluID0gJGZhbHNlDQogICAgaWYgKCRDdXJyZW50U25vd0F1dGgpIHsNCiAgICAgICAgJFJvbGVSZWNvcmRzID0gR2V0LVNOT1dPYmplY3QgLVRhYmxlICdzeXNfdXNlcl9oYXNfcm9sZScgLVF1ZXJ5ICJ1c2VyX25hbWU9amF2YXNjcmlwdDpncy5nZXRVc2VyTmFtZSgpIiAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSAtRXJyb3JWYXJpYWJsZSBVc2VySXNBZG1pbkVycm9yDQogICAgICAgIGlmICgkVXNlcklzQWRtaW5FcnJvcikgew0KICAgICAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgV2FybmluZyAiQ3VycmVudCB1c2VyIGlzIG5vdCBhbiBhZG1pbi4gQ2Fubm90IGFzc2lnbiByb2xlcyBvciBjcmVhdGUgdXNlci4gUHJvY2VlZGluZyB3aXRoIHBhc3N0aHJvdWdoLiINCiAgICAgICAgfQ0KICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgLUxldmVsIEltcG9ydGFudCAiQ3VycmVudCB1c2VyIGlzIGFuIGFkbWluLiBQcm9jZWVkaW5nIHdpdGggcm9sZSBhc3NpZ25tZW50LiINCiAgICAgICAgICAgICRVc2VySXNBZG1pbiA9ICgkUm9sZVJlY29yZHMuQ291bnQgLWd0IDApIA0KICAgICAgICB9DQogICAgfQ0KICAgIGVsc2Ugew0KICAgICAgICBXcml0ZS1QU0ZNZXNzYWdlIC1MZXZlbCBFcnJvciAtTWVzc2FnZSAiTm8gU2VydmljZU5vdyBhdXRoZW50aWNhdGlvbiBmb3VuZCBpbiBjb250ZXh0Ig0KICAgIH0NCiAgICAkTWlkU2VydmVyVXNlciA9IEdldC1TTk9XT2JqZWN0IC1UYWJsZSAnc3lzX3VzZXInIC1RdWVyeSAidXNlcl9uYW1lPSRNaWRTZXJ2ZXJVc2VyTmFtZSIgLVZlcmJvc2UNCiAgICBpZiAoJE1pZFNlcnZlclVzZXIpIHsNCiAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgSW1wb3J0YW50ICgnezB9IGFscmVhZHkgZXhpc3RzLiBbYWN0aXZlOiB7MX1dIFtsb2NrZWRfb3V0OiB7Mn1dIFtwYXNzd29yZF9uZWVkc19yZXNldDogezN9XScgLWYgJE1pZFNlcnZlclVzZXJOYW1lLCAkTWlkU2VydmVyVXNlci5hY3RpdmUsICRNaWRTZXJ2ZXJVc2VyLmxvY2tlZF9vdXQsICRNaWRTZXJ2ZXJVc2VyLnBhc3N3b3JkX25lZWRzX3Jlc2V0KQ0KICAgICAgICAkTWlkVXNlclZhbGlkID0gR2V0LVNOT1dNSURSZWNvcmRXaXRoQ3JlZHMgLUNyZWRlbnRpYWwgJE1pZFVzZXJDcmVkZW50aWFscw0KICAgICAgICBpZiAoLW5vdCAkTWlkVXNlclZhbGlkKSB7DQogICAgICAgICAgICBXcml0ZS1QU0ZNZXNzYWdlIC1MZXZlbCBXYXJuaW5nICJVc2VyICRNaWRTZXJ2ZXJVc2VyTmFtZSBwYXNzd29yZCBpcyBpbnZhbGlkIg0KICAgICAgICB9DQogICAgICAgIGlmICgkVXNlcklzQWRtaW4pIHsNCiAgICAgICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgIlVwZGF0aW5nIHVzZXIgJE1pZFNlcnZlclVzZXJOYW1lIiANCiAgICAgICAgICAgICRNaWRTZXJ2ZXJVc2VyID0gU2V0LVNOT1dPYmplY3QgLVRhYmxlICdzeXNfdXNlcicgLVN5c0lkICRNaWRTZXJ2ZXJVc2VyLnN5c19pZCAtUHJvcGVydGllcyAkTWlkVXNlciAtSW5wdXREaXNwbGF5VmFsdWUgLVBhc3NUaHJ1DQogICAgICAgIH0NCiAgICB9DQogICAgZWxzZSB7DQogICAgICAgIGlmICgkVXNlcklzQWRtaW4pIHsNCiAgICAgICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgLUxldmVsIEltcG9ydGFudCAiQ3JlYXRpbmcgdXNlciAkTWlkU2VydmVyVXNlck5hbWUiDQogICAgICAgICAgICAkTWlkU2VydmVyVXNlciA9IE5ldy1TTk9XT2JqZWN0IC1UYWJsZSAnc3lzX3VzZXInIC1Qcm9wZXJ0aWVzICRNaWRVc2VyIC1JbnB1dERpc3BsYXlWYWx1ZSAtUGFzc1RocnUNCiAgICAgICAgfQ0KICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgLUxldmVsIFdhcm5pbmcgIkN1cnJlbnQgdXNlciBpcyBub3QgYW4gYWRtaW4uIFVzaW5nIEV4aXN0aW5nIFNOT1dBdXRoIENyZWRlbnRpYWxzIg0KICAgICAgICAgICAgJE1pZFNlcnZlclVzZXJOYW1lID0gJEN1cnJlbnRTbm93QXV0aC5DcmVkZW50aWFsLlVzZXJOYW1lDQogICAgICAgICAgICAkTWlkVXNlckNyZWRlbnRpYWxzID0gJEN1cnJlbnRTbm93QXV0aC5DcmVkZW50aWFsDQogICAgICAgICAgICAkTWlkU2VjcmV0TmFtZSA9ICIke01pZFNlcnZlclVzZXJOYW1lfS1wYXNzd29yZCINCiAgICAgICAgICAgICRNaWRTZXJ2ZXJVc2VyID0gR2V0LVNOT1dDdXJyZW50VXNlciAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQ0KICAgICAgICAgICAgaWYgKC1ub3QgJE1pZFNlcnZlclVzZXIpIHsNCiAgICAgICAgICAgICAgICBXcml0ZS1QU0ZNZXNzYWdlIC1MZXZlbCBXYXJuaW5nICJObyB1c2VyIGZvdW5kIHdpdGggdXNlcm5hbWUgJE1pZFNlcnZlclVzZXJOYW1lLiBDYW5ub3QgYXNzaWduIHJvbGVzIG9yIGNhcGFiaWxpdGllcy4iDQogICAgICAgICAgICAgICAgcmV0dXJuICRudWxsDQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQogICAgaWYgKCRVc2VySXNBZG1pbikgew0KICAgICAgICAkTWlkU2VydmVyVXNlclJvbGVzID0gQWRkLVNOT1dNSURVc2VyUm9sZXMgLVVzZXJTeXNJZCAkTWlkU2VydmVyVXNlci5zeXNfaWQgLVJvbGVzICRSb2xlcw0KICAgIH0NCiAgICBlbHNlIHsNCiAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgV2FybmluZyAiQ3VycmVudCB1c2VyIGlzIG5vdCBhbiBhZG1pbi4gQ2Fubm90IGFzc2lnbiByb2xlcyB0byAkTWlkU2VydmVyVXNlck5hbWUuIFJvbGVzIG11c3QgYmUgYXNzaWduZWQgbWFudWFsbHkuIg0KICAgIH0NCiAgICAkTWlkVXNlclZhbGlkID0gR2V0LVNOT1dNSURSZWNvcmRXaXRoQ3JlZHMgLUNyZWRlbnRpYWwgJE1pZFVzZXJDcmVkZW50aWFscyANCiAgICBpZiAoJE1pZFVzZXJWYWxpZCkgew0KICAgICAgICAkQ3VycmVudFNlY3JldCA9IEdldC1TZWNyZXQgLU5hbWUgJE1pZFNlY3JldE5hbWUgLVZhdWx0ICRTY3JpcHQ6U05fTUlEX1ZBVUxUX05BTUUgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUgLUFzUGxhaW5UZXh0DQogICAgICAgIGlmICgkQ3VycmVudFNlY3JldCAtYW5kICRDdXJyZW50U2VjcmV0IC1lcSAkTWlkVXNlckNyZWRlbnRpYWxzLkdldE5ldHdvcmtDcmVkZW50aWFsKCkuUGFzc3dvcmQpIHsNCiAgICAgICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgIlNlY3JldCAkTWlkU2VjcmV0TmFtZSBhbHJlYWR5IGV4aXN0cyBhbmQgaXMgdGhlIHNhbWUgYXMgdGhlIG5ldyBwYXNzd29yZC4gTm8gbmVlZCB0byB1cGRhdGUuIg0KICAgICAgICB9DQogICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgSW1wb3J0YW50ICJTZXR0aW5nIHBhc3N3b3JkIGZvciAkTWlkU2VydmVyVXNlck5hbWUgaW4gVmF1bHQiDQogICAgICAgICAgICBTZXQtU2VjcmV0IC1OYW1lICRNaWRTZWNyZXROYW1lIC1TZWNyZXQgJE1pZFVzZXJDcmVkZW50aWFscy5QYXNzd29yZCAtVmF1bHQgJFNjcmlwdDpTTl9NSURfVkFVTFRfTkFNRSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQ0KICAgICAgICB9DQogICAgfQ0KICAgICRSZXN1bHRzID0gW29yZGVyZWRdQHsNCiAgICAgICAgTWlkU2VydmVyTmFtZSA9ICRNaWRTZXJ2ZXJOYW1lDQogICAgICAgIFVzZXIgICAgICAgICAgPSAkTWlkU2VydmVyVXNlcg0KICAgICAgICBSb2xlcyAgICAgICAgID0gJE1pZFNlcnZlclVzZXJSb2xlcw0KICAgICAgICBDcmVkZW50aWFscyAgID0gJE1pZFVzZXJDcmVkZW50aWFscw0KICAgICAgICBNaWRWZXJzaW9uICAgID0gJE1pZFVzZXJWYWxpZC52YWx1ZQ0KICAgICAgICBWYXVsdFNlY3JldCAgID0gJE1pZFNlY3JldE5hbWUNCiAgICAgICAgU25vd0F1dGggICAgICA9IEB7DQogICAgICAgICAgICBJbnN0YW5jZSAgID0gJEN1cnJlbnRTbm93QXV0aC5JbnN0YW5jZQ0KICAgICAgICAgICAgQ3JlZGVudGlhbCA9ICRNaWRVc2VyQ3JlZGVudGlhbHMNCiAgICAgICAgfQ0KICAgIH0NCiAgICBpZiAoJFJlc3VsdHMuTWlkVmVyc2lvbikgew0KICAgICAgICBXcml0ZS1QU0ZNZXNzYWdlIC1MZXZlbCBJbXBvcnRhbnQgIlVzZXIgJE1pZFNlcnZlclVzZXJOYW1lIGlzIHZhbGlkIg0KICAgICAgICAkUmVzdWx0cy5NaWRJbWFnZUZhY3RzID0gR2V0LVNOT1dNSUREb3dubG9hZEZhY3RzIC1CdWlsZFRhZyAkUmVzdWx0cy5NaWRWZXJzaW9uDQogICAgfQ0KICAgIFdyaXRlLVBTRk1lc3NhZ2UgKCRSZXN1bHRzIHwgQ29udmVydFRvLUpzb24gLURlcHRoIDMpDQogICAgcmV0dXJuICRSZXN1bHRzICAgDQp9DQoNCmZ1bmN0aW9uIFN0YXJ0LVNOT1dNSURWYWxpZGF0aW9uU2NyaXB0IHsNCiAgICBwYXJhbSgNCiAgICAgICAgW3N0cmluZ10kTWlkU2VydmVyTmFtZSwNCiAgICAgICAgW3N0cmluZ10kT3BlcmF0aW9uLA0KICAgICAgICBbaW50XSRUaW1lb3V0TWludXRlcyA9IDQ1DQogICAgKQ0KICAgICRBZG1pbkNyZWRzID0gKEdldC1TTk9XQXV0aCkuQ3JlZGVudGlhbA0KICAgICRTY3JpcHROYW1lID0gIkFaVVJFX0RFVk9QU19NSURWQUxJREFURV8kKCRNaWRTZXJ2ZXJOYW1lKSINCiAgICAkQWRtaW5Vc2VyID0gR2V0LVNOT1dPYmplY3QgLVRhYmxlICdzeXNfdXNlcicgLVF1ZXJ5ICJ1c2VyX25hbWU9JCgkQWRtaW5DcmVkcy5HZXROZXR3b3JrQ3JlZGVudGlhbCgpLlVzZXJuYW1lKSIgfCBTZWxlY3QtT2JqZWN0IC1GaXJzdCAxDQogICAgJEVjY0FnZW50ID0gR2V0LVNOT1dPYmplY3QgLVRhYmxlICdlY2NfYWdlbnQnIC1RdWVyeSAibmFtZT0kTWlkU2VydmVyTmFtZSIgfCBTZWxlY3QtT2JqZWN0IC1GaXJzdCAxDQogICAgaWYgKCRFY2NBZ2VudCAtYW5kICRFY2NBZ2VudC52YWxpZGF0ZWQgLWVxICd0cnVlJyAtYW5kICRFY2NBZ2VudC5zdGF0dXMgLWVxICdEb3duJykgew0KICAgICAgICBXcml0ZS1QU0ZNZXNzYWdlIC1MZXZlbCBJbXBvcnRhbnQgJ2VjY19hZ2VudCBpcyBET1dOLiBJbnZhbGlkYXRpbmcnDQogICAgICAgICRFY2NBZ2VudCA9ICRFY2NBZ2VudCB8IFNldC1TTk9XT2JqZWN0IC1Qcm9wZXJ0aWVzIEB7IHZhbGlkYXRlZCA9ICdmYWxzZSc7IHZhbGlkYXRlZF9hdCA9ICcnOyB2YWxpZGF0ZWRfYnkgPSAnJyB9IC1UYWJsZSAnZWNjX2FnZW50JyAtUGFzc1RocnUNCiAgICB9DQogICAgJEV4aXN0aW5nU2NyaXB0ID0gR2V0LVNOT1dPYmplY3QgLVRhYmxlICdzeXNhdXRvX3NjcmlwdCcgLVF1ZXJ5ICJuYW1lPSR7U2NyaXB0TmFtZX0iDQogICAgaWYgKCRFeGlzdGluZ1NjcmlwdC5zeXNfaWQpIHsNCiAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgSW1wb3J0YW50ICdTY3JpcHQgYWxyZWFkeSBleGlzdHMsIGRlbGV0aW5nJw0KICAgICAgICBSZW1vdmUtU05PV09iamVjdCAtVGFibGUgJ3N5c2F1dG9fc2NyaXB0JyAtU3lzX0lEICRFeGlzdGluZ1NjcmlwdC5zeXNfaWQgLUNvbmZpcm06JGZhbHNlIHwgT3V0LU51bGwNCiAgICB9DQogICAgaWYgKCRPcGVyYXRpb24gLWVxICdyZW1vdmUnKSB7DQogICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgLUxldmVsIEltcG9ydGFudCAnT3BlcmF0aW9uIGlzIHJlbW92ZS4gTm8gbmVlZCB0byBjcmVhdGUgc3lzYXV0b19zY3JpcHQgZW50cnkuJw0KICAgICAgICByZXR1cm4gJGZhbHNlDQogICAgfQ0KICAgICMgQ2hlY2sgdGhlIGFnZW50LiBJZiBhbHJlYWR5IHZhbGlkYXRlZCwgZG8gbm90aGluZw0KICAgICRzeXNTY3JpcHRCb2R5ID0gQHsNCiAgICAgICAgJ2NvbmRpdGlvbmFsJyAgICAgICA9ICdmYWxzZScNCiAgICAgICAgJ2J1c2luZXNzX2NhbGVuZGFyJyA9ICcnDQogICAgICAgICdlbnRlcmVkX3RpbWUnICAgICAgPSAnMTk3MC0wMS0wMSAwMDowMDowMCcNCiAgICAgICAgJ3J1bl9hc190eicgICAgICAgICA9ICcnDQogICAgICAgICdydW5fYXMnICAgICAgICAgICAgPSAkQWRtaW5Vc2VyLnN5c19pZA0KICAgICAgICAncnVuX3R5cGUnICAgICAgICAgID0gJ3BlcmlvZGljYWxseScNCiAgICAgICAgJ3J1bl9zdGFydCcgICAgICAgICA9IChHZXQtRGF0ZSkuQWRkTWludXRlcygrMSkuVG9TdHJpbmcoJ3l5eXktTU0tZGQgSEg6bW06c3MnKSAgICANCiAgICAgICAgJ3J1bl9kYXlvZm1vbnRoJyAgICA9ICcxJw0KICAgICAgICAnc3lzX3Njb3BlJyAgICAgICAgID0gJ2dsb2JhbCcNCiAgICAgICAgJ3J1bl9kYXlvZndlZWsnICAgICA9ICcxJw0KICAgICAgICAnb2Zmc2V0JyAgICAgICAgICAgID0gJycNCiAgICAgICAgJ3J1bl90aW1lJyAgICAgICAgICA9ICcxOTcwLTAxLTAxIDA1OjAwOjAwJw0KICAgICAgICAnYWN0aXZlJyAgICAgICAgICAgID0gJ3RydWUnDQogICAgICAgICd0aW1lX3pvbmUnICAgICAgICAgPSAnJw0KICAgICAgICAnc3lzX3BhY2thZ2UnICAgICAgID0gJ2dsb2JhbCcNCiAgICAgICAgJ2NvbmRpdGlvbicgICAgICAgICA9ICcnDQogICAgICAgICdvZmZzZXRfdHlwZScgICAgICAgPSAnMCcNCiAgICAgICAgJ25hbWUnICAgICAgICAgICAgICA9ICRTY3JpcHROYW1lDQogICAgICAgICdtYXhfZHJpZnQnICAgICAgICAgPSAnJw0KICAgICAgICAncnVuX3BlcmlvZCcgICAgICAgID0gJzE5NzAtMDEtMDEgMDA6MDA6NDUnICMgZXZlcnkgNDUgc2Vjb25kcyAgIA0KICAgIH0NCiAgICANCiAgICAkc2NyaXB0SGVhZGVyID0gJ3ZhciBTWVNfQVVUT19TQ1JJUFRfTkFNRT0iQVpVUkVfREVWT1BTX01JRFZBTElEQVRFX3swfSI7dmFyIE1JRF9TRVJWRVJfTkFNRT0iezB9Ijt2YXIgU1lTX0FVVE9fU0NSSVBUX0VYUElSWV9NSU5VVEVTPXsxfTsnIC1mICRNaWRTZXJ2ZXJOYW1lLCAkVGltZW91dE1pbnV0ZXMNCiAgICAkc2NyaXB0QmFzZSA9ICdmdW5jdGlvbiBHZXRNaWRVc2VyTWV0YWRhdGEobWlkU2VydmVyTmFtZSl7dmFyIHVzZXI9bmV3IEdsaWRlUmVjb3JkKCJzeXNfdXNlciIpO3VzZXIuYWRkUXVlcnkoImVtcGxveWVlX251bWJlciIsIlNUQVJUU1dJVEgiLCJTTk1JRHwiK21pZFNlcnZlck5hbWUpO3VzZXIucXVlcnkoKTtpZighdXNlci5uZXh0KCkpe2dzLmluZm8oIlVzZXIgbm90IGZvdW5kIGZvciBNSUQgU2VydmVyICIrbWlkU2VydmVyTmFtZSk7cmV0dXJuIG51bGx9dmFyIG1ldGFQYXJ0cz11c2VyLmVtcGxveWVlX251bWJlci5zcGxpdCgifCIpO3ZhciBvdXRwdXRzPXt1c2VyOnVzZXIsbWlkU2VydmVyTmFtZTptaWRTZXJ2ZXJOYW1lfTtpZihtZXRhUGFydHMubGVuZ3RoPj0zKXtvdXRwdXRzLm1pZFNlcnZlckNsdXN0ZXI9bWV0YVBhcnRzWzJdfWlmKG1ldGFQYXJ0cy5sZW5ndGg+PTQpe291dHB1dHMubWlkU2VydmVyQ2x1c3Rlcj1tZXRhUGFydHNbMl07b3V0cHV0cy5taWRTZXJ2ZXJTdGF0dXM9bWV0YVBhcnRzWzNdfXZhciBhZ2VudD1uZXcgR2xpZGVSZWNvcmQoImVjY19hZ2VudCIpO2FnZW50LmFkZFF1ZXJ5KCJuYW1lIixtaWRTZXJ2ZXJOYW1lKTthZ2VudC5xdWVyeSgpO2lmKGFnZW50Lm5leHQoKSl7b3V0cHV0cy5hZ2VudD1hZ2VudH1yZXR1cm4gb3V0cHV0c31mdW5jdGlvbiBDaGVja0NhcGFiaWxpdGllcyhtaWRTZXJ2ZXJOYW1lLGNhcGFiaWxpdGllcyl7aWYoIWNhcGFiaWxpdGllcyl7Y2FwYWJpbGl0aWVzPVsiQUxMIl19dmFyIG91dHB1dHM9e2NhcGFiaWxpdGllczpbXX07dmFyIGFnZW50PW5ldyBHbGlkZVJlY29yZCgiZWNjX2FnZW50Iik7YWdlbnQuYWRkUXVlcnkoIm5hbWUiLG1pZFNlcnZlck5hbWUpO2FnZW50LnF1ZXJ5KCk7aWYoIWFnZW50Lm5leHQoKSl7Z3MuaW5mbygiTUlEIFNlcnZlciAiK21pZFNlcnZlck5hbWUrIiBub3QgZm91bmQiKTtyZXR1cm59dmFyIGFnZW50Q2Fwcz1jYXBhYmlsaXRpZXMubWFwKGZ1bmN0aW9uKGNhcCl7dmFyIGNhcFF1ZXJ5PW5ldyBHbGlkZVJlY29yZCgiZWNjX2FnZW50X2NhcGFiaWxpdHlfbTJtIik7Y2FwUXVlcnkuYWRkRW5jb2RlZFF1ZXJ5KCJhZ2VudD0iK2FnZW50LnN5c19pZCsiXmNhcGFiaWxpdHkubmFtZT0iK2NhcCk7Y2FwUXVlcnkucXVlcnkoKTtpZihjYXBRdWVyeS5uZXh0KCkpe2dzLmRlYnVnKCJDYXBhYmlsaXR5ICIrY2FwKyIgZm91bmQgZm9yIE1JRCBTZXJ2ZXIgIittaWRTZXJ2ZXJOYW1lKTtvdXRwdXRzLmNhcGFiaWxpdGllcy5wdXNoKGNhcFF1ZXJ5LnN5c19pZC50b1N0cmluZygpKX1lbHNle2dzLmluZm8oIkNhcGFiaWxpdHkgIitjYXArIiBub3QgZm91bmQgZm9yIE1JRCBTZXJ2ZXIgIittaWRTZXJ2ZXJOYW1lKTt2YXIgbmV3Q2FwPW5ldyBHbGlkZVJlY29yZCgiZWNjX2FnZW50X2NhcGFiaWxpdHlfbTJtIik7bmV3Q2FwLmluaXRpYWxpemUoKTtuZXdDYXAuY2FwYWJpbGl0eS5zZXREaXNwbGF5VmFsdWUoY2FwKTtuZXdDYXAuYWdlbnQ9YWdlbnQuc3lzX2lkO2lmKG5ld0NhcC5pbnNlcnQoKSl7b3V0cHV0cy5jYXBhYmlsaXRpZXMucHVzaChuZXdDYXAuc3lzX2lkKX1lbHNle2dzLmluZm8oIkZhaWxlZCB0byBhZGQgY2FwYWJpbGl0eSAiK2NhcCsiIHRvIE1JRCBTZXJ2ZXIgIittaWRTZXJ2ZXJOYW1lKX19cmV0dXJuIGNhcFF1ZXJ5fSk7cmV0dXJuIG91dHB1dHN9ZnVuY3Rpb24gQ2hlY2tDbHVzdGVyKG1pZFNlcnZlck5hbWUpe3ZhciB1c2VyTWV0YT1HZXRNaWRVc2VyTWV0YWRhdGEobWlkU2VydmVyTmFtZSk7aWYodXNlck1ldGE9PT1udWxsKXtncy5pbmZvKCJVc2VyIG1ldGFkYXRhIG5vdCBmb3VuZCBmb3IgTUlEIFNlcnZlciAiK21pZFNlcnZlck5hbWUpO3JldHVybn12YXIgY2x1c3Rlcj1uZXcgR2xpZGVSZWNvcmQoImVjY19hZ2VudF9jbHVzdGVyIik7Y2x1c3Rlci5hZGRRdWVyeSgibmFtZSIsdXNlck1ldGEubWlkU2VydmVyQ2x1c3Rlcik7Y2x1c3Rlci5xdWVyeSgpO2lmKCFjbHVzdGVyLm5leHQoKSl7Z3MuaW5mbygiQ2x1c3RlciAiK3VzZXJNZXRhLm1pZFNlcnZlckNsdXN0ZXIrIiBub3QgZm91bmQuIENyZWF0aW5nLi4uIik7Y2x1c3Rlcj1uZXcgR2xpZGVSZWNvcmQoImVjY19hZ2VudF9jbHVzdGVyIik7Y2x1c3Rlci5pbml0aWFsaXplKCk7Y2x1c3Rlci5uYW1lPXVzZXJNZXRhLm1pZFNlcnZlckNsdXN0ZXI7Y2x1c3Rlci5hY3RpdmU9dHJ1ZTtjbHVzdGVyLmluc2VydCgpfXZhciBjbHVzdGVyTWVtYmVyPW5ldyBHbGlkZVJlY29yZCgiZWNjX2FnZW50X2NsdXN0ZXJfbWVtYmVyX20ybSIpO2NsdXN0ZXJNZW1iZXIuYWRkUXVlcnkoImNsdXN0ZXIubmFtZSIsdXNlck1ldGEubWlkU2VydmVyQ2x1c3Rlcik7Y2x1c3Rlck1lbWJlci5hZGRRdWVyeSgiYWdlbnQubmFtZSIsbWlkU2VydmVyTmFtZSk7Y2x1c3Rlck1lbWJlci5xdWVyeSgpO2lmKCFjbHVzdGVyTWVtYmVyLm5leHQoKSl7Z3MuaW5mbygiTUlEIFNlcnZlciAiK21pZFNlcnZlck5hbWUrIiBub3QgZm91bmQgaW4gY2x1c3RlciAiK3VzZXJNZXRhLm1pZFNlcnZlckNsdXN0ZXIpO2NsdXN0ZXJNZW1iZXI9bmV3IEdsaWRlUmVjb3JkKCJlY2NfYWdlbnRfY2x1c3Rlcl9tZW1iZXJfbTJtIik7Y2x1c3Rlck1lbWJlci5pbml0aWFsaXplKCk7Y2x1c3Rlck1lbWJlci5jbHVzdGVyLnNldERpc3BsYXlWYWx1ZSh1c2VyTWV0YS5taWRTZXJ2ZXJDbHVzdGVyKTtjbHVzdGVyTWVtYmVyLmFnZW50LnNldERpc3BsYXlWYWx1ZShtaWRTZXJ2ZXJOYW1lKTtjbHVzdGVyTWVtYmVyLmluc2VydCgpfXJldHVybiBjbHVzdGVyTWVtYmVyLnN5c19pZC50b1N0cmluZygpfWZ1bmN0aW9uIFZhbGlkYXRlTWlkU2VydmVyKG1pZFNlcnZlck5hbWUpe3ZhciBvdXRwdXRzPXtzdWNjZXNzOmZhbHNlLHN0YXR1czoidW5rbm93biIsbWlkU2VydmVyOm1pZFNlcnZlck5hbWV9O3ZhciB1c2VyTWV0YT1HZXRNaWRVc2VyTWV0YWRhdGEobWlkU2VydmVyTmFtZSk7aWYodXNlck1ldGE9PT1udWxsKXtncy5pbmZvKCJVc2VyIG1ldGFkYXRhIG5vdCBmb3VuZCBmb3IgTUlEIFNlcnZlciAiK21pZFNlcnZlck5hbWUpO291dHB1dHMuc3RhdHVzPSJub3QgZm91bmQiO3JldHVybiBvdXRwdXRzfWlmKGdzLm5pbCh1c2VyTWV0YS5hZ2VudCkpe2dzLmluZm8oIkFnZW50IG5vdCBmb3VuZCBmb3IgTUlEIFNlcnZlciAiK21pZFNlcnZlck5hbWUpO291dHB1dHMuc3RhdHVzPSJhZ2VudCBub3QgZm91bmQiO3JldHVybiBvdXRwdXRzfW91dHB1dHMuY2x1c3Rlck1lbWJlcj1DaGVja0NsdXN0ZXIobWlkU2VydmVyTmFtZSk7b3V0cHV0cy5jYXBhYmlsaXRpZXM9Q2hlY2tDYXBhYmlsaXRpZXMobWlkU2VydmVyTmFtZSk7dmFyIGFnZW50PXVzZXJNZXRhLmFnZW50O291dHB1dHMuYWdlbnRfc3RhdHVzPWFnZW50LnN0YXR1cy50b1N0cmluZygpO3ZhciBtbT1uZXcgZ2xvYmFsLk1JRFNlcnZlck1hbmFnZTt2YXIgaW52YWxpZGF0ZVJlcXVpcmVkPWZhbHNlO3ZhciBlcnJvcnM9bmV3IGdsb2JhbC5HbGlkZVF1ZXJ5KCJlY2NfYWdlbnRfaXNzdWUiKS53aGVyZSgibWlkX3NlcnZlci5uYW1lIixtaWRTZXJ2ZXJOYW1lKS53aGVyZSgic3RhdGUiLCIhPSIsInJlc29sdmVkIikud2hlcmUoInNvdXJjZSIsIlVwZGF0ZVB1YmxpY0tleSIpLnNlbGVjdCgic3lzX2lkIiwic3RhdGUiLCJtZXNzYWdlIikudG9BcnJheSgxMCk7aWYoZXJyb3JzLmxlbmd0aD4wKXtpbnZhbGlkYXRlUmVxdWlyZWQ9dHJ1ZTtpZihhZ2VudC52YWxpZGF0ZWQudG9TdHJpbmcoKT09PSJ0cnVlIil7aWYoYWdlbnQuc3RhdHVzPT0iVXAiKXtncy5pbmZvKCJBZ2VudCByZS12YWxpZGF0aW9uIHJlcXVpcmVkIGZvciBNSUQgU2VydmVyICIrbWlkU2VydmVyTmFtZSk7bW0uaW52YWxpZGF0ZShhZ2VudC5uYW1lKTtvdXRwdXRzLnN0YXR1cz0iaW52YWxpZGF0aW5nIn19cmV0dXJuIG91dHB1dHN9aWYoYWdlbnQudmFsaWRhdGVkLnRvU3RyaW5nKCk9PT0iZmFsc2UiJiZhZ2VudC5zdGF0dXM9PSJVcCIpe21tLnZhbGlkYXRlKGFnZW50Lm5hbWUpO291dHB1dHMuc3RhdHVzPSJ2YWxpZGF0aW5nIjtvdXRwdXRzLnN1Y2Nlc3M9dHJ1ZX1lbHNle291dHB1dHMuc3RhdHVzPXVzZXJNZXRhLmFnZW50LnZhbGlkYXRlZC50b1N0cmluZygpO291dHB1dHMuc3VjY2Vzcz10cnVlfXJldHVybiBvdXRwdXRzfWZ1bmN0aW9uIENsZWFyQXV0b1NjcmlwdChuYW1lLGZvcmNlRGVsZXRlKXt2YXIgc2NyaXB0PW5ldyBHbGlkZVJlY29yZCgic3lzYXV0b19zY3JpcHQiKTtzY3JpcHQuYWRkUXVlcnkoIm5hbWUiLG5hbWUpO3NjcmlwdC5xdWVyeSgpO2lmKHNjcmlwdC5uZXh0KCkpe2lmKGZvcmNlRGVsZXRlKXtzY3JpcHQuZGVsZXRlUmVjb3JkKCk7cmV0dXJuInN5c2F1dG9fc2NyaXB0ICIrbmFtZSsiIGRlbGV0ZWQifWVsc2V7dmFyIGxhc3RNb2RpZmllZD1uZXcgR2xpZGVEYXRlVGltZShzY3JpcHQuc3lzX2NyZWF0ZWRfb24pO3ZhciBub3c9bmV3IEdsaWRlRGF0ZVRpbWU7dmFyIG1pbnM9Z3MuZGF0ZURpZmYobGFzdE1vZGlmaWVkLG5vdyx0cnVlKS82MDtpZihtaW5zPlNZU19BVVRPX1NDUklQVF9FWFBJUllfTUlOVVRFUyl7c2NyaXB0LmRlbGV0ZVJlY29yZCgpO3JldHVybiJzeXNhdXRvX3NjcmlwdCAiK25hbWUrIiBkZWxldGVkIC0gVGltZSBFbGFwc2VkOiAiK21pbnN9ZWxzZXtyZXR1cm4ic3lzYXV0b19zY3JpcHQgIituYW1lKyIgbm90IGV4cGlyZWQuIE1pbnV0ZXMgRWxhcHNlZDogIittaW5zfX19ZWxzZXtyZXR1cm4ic3lzYXV0b19zY3JpcHQgIituYW1lKyIgbm90IGZvdW5kIn19dmFyIHJlc3VsdHM9VmFsaWRhdGVNaWRTZXJ2ZXIoTUlEX1NFUlZFUl9OQU1FKTtpZihyZXN1bHRzLnN1Y2Nlc3Mpe3Jlc3VsdHMuc3lzX3NjcmlwdF9hdXRvPUNsZWFyQXV0b1NjcmlwdChTWVNfQVVUT19TQ1JJUFRfTkFNRSxmYWxzZSl9ZWxzZXtyZXN1bHRzLnN5c19zY3JpcHRfYXV0bz1DbGVhckF1dG9TY3JpcHQoU1lTX0FVVE9fU0NSSVBUX05BTUUsZmFsc2UpfWdzLmluZm8oSlNPTi5zdHJpbmdpZnkocmVzdWx0cyxudWxsLDIpKTsnDQogICAgJHN5c1NjcmlwdEJvZHkuc2NyaXB0ID0gJHNjcmlwdEhlYWRlciArICRzY3JpcHRCYXNlDQogICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgSW1wb3J0YW50ICJDcmVhdGluZyBzeXNhdXRvX3NjcmlwdCByZWNvcmQgaW4gU04gbmFtZTogJFNjcmlwdE5hbWUuIEV4cGlyeTogJFRpbWVvdXRNaW51dGVzIG1pbnV0ZXMiDQogICAgJENyZWF0ZVJlcXVlc3QgPSBAew0KICAgICAgICBVcmkgICAgICAgICA9ICcvYXBpL25vdy90YWJsZS9zeXNhdXRvX3NjcmlwdD9zeXNwYXJtX3RyYW5zYWN0aW9uX3Njb3BlPWdsb2JhbCcNCiAgICAgICAgQm9keSAgICAgICAgPSAoJHN5c1NjcmlwdEJvZHkgfCBDb252ZXJ0VG8tSnNvbiAtRGVwdGggMykNCiAgICAgICAgQ29udGVudFR5cGUgPSAnYXBwbGljYXRpb24vanNvbicNCiAgICAgICAgTWV0aG9kICAgICAgPSAnUE9TVCcNCiAgICB9DQogICAgJENyZWF0ZVJlc3BvbnNlID0gSW52b2tlLVNOT1dXZWJSZXF1ZXN0IEBDcmVhdGVSZXF1ZXN0IC1Vc2VSZXN0TWV0aG9kDQogICAgcmV0dXJuIEB7DQogICAgICAgIG5hbWUgICA9ICRTY3JpcHROYW1lDQogICAgICAgIHN5c19pZCA9ICRDcmVhdGVSZXNwb25zZS5yZXN1bHQuc3lzX2lkDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBJbnZva2UtU05PV01JRFZhbGlkYXRlIHsNCiAgICBwYXJhbSgNCiAgICAgICAgW3N0cmluZ10kTWlkU2VydmVyTmFtZQ0KICAgICkNCiAgICAkTWlkU2VydmVyID0gR2V0LVNOT1dPYmplY3QgLVRhYmxlICdlY2NfYWdlbnQnIC1RdWVyeSAibmFtZT0kTWlkU2VydmVyTmFtZSIgfCBTZWxlY3QtT2JqZWN0IC1GaXJzdCAxDQogICAgaWYgKCAtbm90ICRNaWRTZXJ2ZXIpIHsNCiAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgV2FybmluZyAiTUlEIFNlcnZlciAkTWlkU2VydmVyTmFtZSBub3QgZm91bmQiDQogICAgICAgIHJldHVybiAkbnVsbA0KICAgIH0NCiAgICBpZiAoLW5vdCAkTWlkU2VydmVyLnB1YmxpY19rZXkpIHsNCiAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgV2FybmluZyAiTUlEIFNlcnZlciAkTWlkU2VydmVyTmFtZSBkb2VzIG5vdCBoYXZlIGEgcHVibGljIGtleSINCiAgICAgICAgcmV0dXJuICRudWxsDQogICAgfQ0KICAgICRVc2VyUmVjb3JkID0gR2V0LVNOT1dVc2VyIC1RdWVyeSAidXNlcl9uYW1lPWphdmFzY3JpcHQ6Z3MuZ2V0VXNlck5hbWUoKSIgLUZpZWxkcyAndXNlcl9uYW1lJw0KICAgIFNldC1TTk9XT2JqZWN0IC1UYWJsZSAnZWNjX2FnZW50JyAtU3lzX0lEICRNaWRTZXJ2ZXIuc3lzX2lkIC1Qcm9wZXJ0aWVzIEB7DQogICAgICAgIHZhbGlkYXRlZCAgICA9ICd0cnVlJw0KICAgICAgICB2YWxpZGF0ZWRfYnkgPSAkVXNlclJlY29yZC51c2VyX25hbWUNCiAgICAgICAgIyAyMDI1LTA1LTA4IDAyOjIwOjUxDQogICAgICAgIHZhbGlkYXRlZF9hdCA9IChHZXQtRGF0ZSAtRm9ybWF0ICd5eXl5LU1NLWRkIEhIOm1tOnNzJyAtQXNVVEMpDQogICAgfQ0KICAgICRFY2NRdWV1ZSA9IE5ldy1TTk9XT2JqZWN0IC1UYWJsZSAnZWNjX3F1ZXVlJyAtUHJvcGVydGllcyBAew0KICAgICAgICBhZ2VudCAgICA9ICJtaWQuc2VydmVyLiR7TWlkU2VydmVyTmFtZX0iDQogICAgICAgIHNvdXJjZSAgID0gJ3Jlc3RhcnRTZXJ2aWNlJw0KICAgICAgICBzZXF1ZW5jZSA9IFtndWlkXTo6TmV3R3VpZCgpLlRvU3RyaW5nKCdOJykNCiAgICAgICAgcXVldWUgICAgPSAnb3V0cHV0Jw0KICAgICAgICB0b3BpYyAgICA9ICdTeXN0ZW1Db21tYW5kJw0KICAgIH0gLVBhc3NUaHJ1DQogICAgaWYgKCRRdWV1ZVN5c0lkID0gJEVjY1F1ZXVlLnN5c19pZCkgew0KICAgICAgICBXcml0ZS1QU0ZNZXNzYWdlIC1MZXZlbCBJbXBvcnRhbnQgIkNvbW1hbmQgc2VudCB0byBNSUQgU2VydmVyICRNaWRTZXJ2ZXJOYW1lIFtzeXNfaWQ6ICRRdWV1ZVN5c0lkXSINCiAgICAgICAgJEVjY1Jlc3BvbnNlID0gV2FpdC1TTk9XRWNjUXVldWVSZXNwb25zZSAtUXVldWVTeXNJZCAkUXVldWVTeXNJZCAtVGltZW91dFNlY29uZHMgMTIwDQogICAgICAgIGlmICgkRWNjUmVzcG9uc2UgLWFuZCAkRWNjUmVzcG9uc2Uuc3RhdGUgLWVxICdyZWFkeScpIHsNCiAgICAgICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgLUxldmVsIEltcG9ydGFudCAiTUlEIFNlcnZlciAkTWlkU2VydmVyTmFtZSB2YWxpZGF0ZWQgc3VjY2Vzc2Z1bGx5Ig0KICAgICAgICAgICAgcmV0dXJuICRFY2NSZXNwb25zZQ0KICAgICAgICB9DQogICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgV2FybmluZyAiRmFpbGVkIHRvIHZhbGlkYXRlIE1JRCBTZXJ2ZXIgJE1pZFNlcnZlck5hbWUiDQogICAgICAgICAgICByZXR1cm4gJG51bGwNCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gSW52b2tlLVNOT1dNSURJbnZhbGlkYXRlIHsgDQogICAgcGFyYW0oDQogICAgICAgIFtzdHJpbmddJE1pZFNlcnZlck5hbWUNCiAgICApDQogICAgJE1pZFNlcnZlciA9IEdldC1TTk9XT2JqZWN0IC1UYWJsZSAnZWNjX2FnZW50JyAtUXVlcnkgIm5hbWU9JE1pZFNlcnZlck5hbWUiIHwgU2VsZWN0LU9iamVjdCAtRmlyc3QgMQ0KICAgIGlmICggLW5vdCAkTWlkU2VydmVyKSB7DQogICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgLUxldmVsIFdhcm5pbmcgIk1JRCBTZXJ2ZXIgJE1pZFNlcnZlck5hbWUgbm90IGZvdW5kIg0KICAgICAgICByZXR1cm4gJG51bGwNCiAgICB9DQogICAgU2V0LVNOT1dPYmplY3QgLVRhYmxlICdlY2NfYWdlbnQnIC1TeXNfSUQgJE1SLnN5c19pZCAtUHJvcGVydGllcyBAew0KICAgICAgICB2YWxpZGF0ZWQgICAgPSAnJw0KICAgICAgICB2YWxpZGF0ZWRfYnkgPSAnJw0KICAgICAgICAjIDIwMjUtMDUtMDggMDI6MjA6NTENCiAgICAgICAgdmFsaWRhdGVkX2F0ID0gJycNCiAgICAgICAgcHVibGljX2tleSAgID0gJycNCiAgICB9DQogICAgJEVjY1F1ZXVlID0gTmV3LVNOT1dPYmplY3QgLVRhYmxlICdlY2NfcXVldWUnIC1Qcm9wZXJ0aWVzIEB7DQogICAgICAgIGFnZW50ICAgID0gIm1pZC5zZXJ2ZXIuJHtNaWRTZXJ2ZXJOYW1lfSINCiAgICAgICAgbmFtZSAgICAgPSAnSW52YWxpZGF0ZScNCiAgICAgICAgc291cmNlICAgPSAnZGVsZXRlX21pZF9rZXlwYWlyJw0KICAgICAgICBzZXF1ZW5jZSA9IFtndWlkXTo6TmV3R3VpZCgpLlRvU3RyaW5nKCdOJykNCiAgICAgICAgcXVldWUgICAgPSAnb3V0cHV0Jw0KICAgICAgICB0b3BpYyAgICA9ICdTeXN0ZW1Db21tYW5kJw0KICAgIH0gLVBhc3NUaHJ1DQogICAgaWYgKCRRdWV1ZVN5c0lkID0gJEVjY1F1ZXVlLnN5c19pZCkgew0KICAgICAgICBXcml0ZS1QU0ZNZXNzYWdlIC1MZXZlbCBJbXBvcnRhbnQgIkNvbW1hbmQgc2VudCB0byBNSUQgU2VydmVyICRNaWRTZXJ2ZXJOYW1lIFtzeXNfaWQ6ICRRdWV1ZVN5c0lkXSINCiAgICAgICAgJEVjY1Jlc3BvbnNlID0gV2FpdC1TTk9XRWNjUXVldWVSZXNwb25zZSAtUXVldWVTeXNJZCAkUXVldWVTeXNJZA0KICAgICAgICBpZiAoJEVjY1Jlc3BvbnNlIC1hbmQgJEVjY1Jlc3BvbnNlLnN0YXRlIC1lcSAncmVhZHknKSB7DQogICAgICAgICAgICBXcml0ZS1QU0ZNZXNzYWdlIC1MZXZlbCBJbXBvcnRhbnQgIk1JRCBTZXJ2ZXIgJE1pZFNlcnZlck5hbWUgaW52YWxpZGF0ZWQgc3VjY2Vzc2Z1bGx5Ig0KICAgICAgICAgICAgcmV0dXJuICRFY2NSZXNwb25zZQ0KICAgICAgICB9DQogICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgV2FybmluZyAiRmFpbGVkIHRvIGludmFsaWRhdGUgTUlEIFNlcnZlciAkTWlkU2VydmVyTmFtZSINCiAgICAgICAgICAgIHJldHVybiAkbnVsbA0KICAgICAgICB9DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBXYWl0LVNOT1dFY2NRdWV1ZVJlc3BvbnNlIHsNCiAgICBwYXJhbSgNCiAgICAgICAgW3N0cmluZ10kUXVldWVTeXNJZCwNCiAgICAgICAgW2ludF0kVGltZW91dFNlY29uZHMgPSAzNjANCiAgICApDQogICAgJFN0YXJ0VGltZSA9IEdldC1EYXRlDQogICAgJEVuZFRpbWUgPSAkU3RhcnRUaW1lLkFkZFNlY29uZHMoJFRpbWVvdXRTZWNvbmRzKQ0KICAgICRFY2NSZXNwb25zZSA9ICRudWxsDQogICAgd2hpbGUgKChHZXQtRGF0ZSkgLWx0ICRFbmRUaW1lKSB7DQogICAgICAgICRFY2NSZXNwb25zZSA9IEdldC1TTk9XT2JqZWN0IC1UYWJsZSAnZWNjX3F1ZXVlJyAtUXVlcnkgInJlc3BvbnNlX3RvPSQoJFF1ZXVlU3lzSWQpXnF1ZXVlPWlucHV0Ig0KICAgICAgICBpZiAoJEVjY1Jlc3BvbnNlIC1hbmQgJEVjY1Jlc3BvbnNlLnN0YXRlIC1lcSAncmVhZHknKSB7DQogICAgICAgICAgICByZXR1cm4gJEVjY1Jlc3BvbnNlDQogICAgICAgIH0NCiAgICAgICAgU3RhcnQtU2xlZXAgLVNlY29uZHMgMQ0KICAgIH0NCiAgICBXcml0ZS1QU0ZNZXNzYWdlIC1MZXZlbCBXYXJuaW5nICJUaW1lb3V0IHJlYWNoZWQgd2FpdGluZyBmb3IgZWNjX3F1ZXVlIHJlc3BvbnNlICQoJFF1ZXVlU3lzSWQpIg0KfQ0KDQpmdW5jdGlvbiBXYWl0LVNOT1dUYWJsZVJlY29yZCB7DQogICAgcGFyYW0oDQogICAgICAgIFtzdHJpbmddJFRhYmxlLA0KICAgICAgICBbc3RyaW5nXSRRdWVyeSwNCiAgICAgICAgW2ludF0kVGltZW91dFNlY29uZHMgPSAzNjANCiAgICApDQogICAgJFN0YXJ0VGltZSA9IEdldC1EYXRlDQogICAgJEVuZFRpbWUgPSAkU3RhcnRUaW1lLkFkZFNlY29uZHMoJFRpbWVvdXRTZWNvbmRzKQ0KICAgICRSZWNvcmQgPSAkbnVsbA0KICAgIHdoaWxlICgoR2V0LURhdGUpIC1sdCAkRW5kVGltZSkgew0KICAgICAgICAkUmVjb3JkID0gR2V0LVNOT1dPYmplY3QgLVRhYmxlICRUYWJsZSAtUXVlcnkgJFF1ZXJ5DQogICAgICAgIGlmICgkUmVjb3JkKSB7DQogICAgICAgICAgICByZXR1cm4gJFJlY29yZA0KICAgICAgICB9DQogICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgLUxldmVsIEltcG9ydGFudCAiV2FpdGluZyBmb3IgdGFibGUgcmVjb3JkIFskVGFibGVdIHdpdGggcXVlcnkgWyRRdWVyeV0iDQogICAgICAgIFN0YXJ0LVNsZWVwIC1TZWNvbmRzIDENCiAgICB9DQogICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgV2FybmluZyAiVGltZW91dCByZWFjaGVkIHdhaXRpbmcgZm9yIHRhYmxlIHJlY29yZCBbJFRhYmxlXSB3aXRoIHN5c19pZCBbJFN5c0lkXSINCn0NCg0KZnVuY3Rpb24gSW52b2tlLVNOT1dNSURDb21tYW5kIHsNCiAgICBwYXJhbSgNCiAgICAgICAgW3N0cmluZ10kTWlkU2VydmVyTmFtZSwNCiAgICAgICAgW3N0cmluZ10kQ29tbWFuZCwNCiAgICAgICAgW2ludF0kVGltZW91dFNlY29uZHMgPSAzNjANCiAgICApDQogICAgJE1pZFNlcnZlciA9IEdldC1TTk9XT2JqZWN0IC1UYWJsZSAnZWNjX2FnZW50JyAtUXVlcnkgIm5hbWU9JE1pZFNlcnZlck5hbWUiIHwgU2VsZWN0LU9iamVjdCAtRmlyc3QgMQ0KICAgIGlmICggLW5vdCAkTWlkU2VydmVyKSB7DQogICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgLUxldmVsIFdhcm5pbmcgIk1JRCBTZXJ2ZXIgJE1pZFNlcnZlck5hbWUgbm90IGZvdW5kIg0KICAgICAgICByZXR1cm4gJG51bGwNCiAgICB9DQogICAgV3JpdGUtSG9zdCAiU2VuZGluZyBjb21tYW5kIHRvIE1JRCBTZXJ2ZXIgJENvbW1hbmQiDQogICAgJFBheWxvYWQgPSBbeG1sXSI8P3htbCB2ZXJzaW9uPScxLjAnIGVuY29kaW5nPSdVVEYtOCc/PjxwYXJhbWV0ZXJzPjxwYXJhbWV0ZXIgbmFtZT0nbmFtZScgdmFsdWU9J2lkJy8+PC9wYXJhbWV0ZXJzPiINCiAgICAkUGF5bG9hZC5wYXJhbWV0ZXJzLnBhcmFtZXRlci52YWx1ZSA9ICRDb21tYW5kDQogICAgJEVjY1F1ZXVlID0gTmV3LVNOT1dPYmplY3QgLVRhYmxlICdlY2NfcXVldWUnIC1Qcm9wZXJ0aWVzIEB7DQogICAgICAgIGFnZW50ICAgPSAibWlkLnNlcnZlci4ke01pZFNlcnZlck5hbWV9Ig0KICAgICAgICBuYW1lICAgID0gJ1J1bkNvbW1hbmQnDQogICAgICAgIHBheWxvYWQgPSAkUGF5bG9hZC5PdXRlclhtbA0KICAgICAgICBxdWV1ZSAgID0gJ291dHB1dCcNCiAgICAgICAgdG9waWMgICA9ICdDb21tYW5kJw0KICAgIH0gLVBhc3NUaHJ1DQogICAgJFN0YXJ0VGltZSA9IEdldC1EYXRlDQogICAgaWYgKCRRdWV1ZVN5c0lkID0gJEVjY1F1ZXVlLnN5c19pZCkgew0KICAgICAgICBXcml0ZS1QU0ZNZXNzYWdlIC1MZXZlbCBJbXBvcnRhbnQgIkNvbW1hbmQgc2VudCB0byBNSUQgU2VydmVyICRNaWRTZXJ2ZXJOYW1lIFtzeXNfaWQ6ICRRdWV1ZVN5c0lkXSINCiAgICAgICAgJEVjY1Jlc3BvbnNlID0gV2FpdC1TTk9XRWNjUXVldWVSZXNwb25zZSAtUXVldWVTeXNJZCAkUXVldWVTeXNJZCAtVGltZW91dFNlY29uZHMgJFRpbWVvdXRTZWNvbmRzDQogICAgICAgICRSZXNwb25zZVBheWxvYWQgPSBbeG1sXSRFY2NSZXNwb25zZS5wYXlsb2FkDQogICAgICAgIHJldHVybiBbb3JkZXJlZF1Aew0KICAgICAgICAgICAgU3RkT3V0ICAgICAgICAgID0gJFJlc3BvbnNlUGF5bG9hZC5yZXN1bHRzLnJlc3VsdC5zdGRvdXQgDQogICAgICAgICAgICBTdGRFcnIgICAgICAgICAgPSAkUmVzcG9uc2VQYXlsb2FkLnJlc3VsdHMucmVzdWx0LnN0ZGVycg0KICAgICAgICAgICAgUmVxdWVzdCAgICAgICAgID0gJEVjY1F1ZXVlDQogICAgICAgICAgICBSZXNwb25zZSAgICAgICAgPSAkRWNjUmVzcG9uc2UNCiAgICAgICAgICAgIFN0YXR1cyAgICAgICAgICA9ICRFY2NSZXNwb25zZS5zdGF0ZQ0KICAgICAgICAgICAgVGltZSAgICAgICAgICAgID0gJEVjY1Jlc3BvbnNlLnN5c191cGRhdGVkX29uDQogICAgICAgICAgICBEdXJhdGlvbiAgICAgICAgPSAoR2V0LURhdGUpIC0gJFN0YXJ0VGltZQ0KICAgICAgICAgICAgRHVyYXRpb25TZWNvbmRzID0gKEdldC1EYXRlKSAtICRTdGFydFRpbWUgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBUb3RhbFNlY29uZHMNCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gR2V0LVNOT1dNSUREb3dubG9hZEZhY3RzIHsNCiAgICBwYXJhbSgNCiAgICAgICAgIyB4YW5hZHUtMDctMDItMjAyNF9fcGF0Y2g0Yi0wMS0xNS0yMDI1XzAyLTExLTIwMjVfMTczMw0KICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSldDQogICAgICAgIFtWYWxpZGF0ZVBhdHRlcm4oJ15bYS16QS1aMC05XC1fXSskJyldDQogICAgICAgICRCdWlsZFRhZywNCiAgICAgICAgW1ZhbGlkYXRlU2V0KCdtaWQtbGludXgtY29udGFpbmVyLXJlY2lwZScsICdtaWQtd2luZG93cy1pbnN0YWxsZXInLCAnbWlkLWxpbnV4LWluc3RhbGxlci1ycG0nLCAnbWlkLWxpbnV4LWluc3RhbGxlci1kZWInKV0NCiAgICAgICAgJFBhY2thZ2UgPSAnbWlkLWxpbnV4LWNvbnRhaW5lci1yZWNpcGUnLA0KICAgICAgICAkQXJjaGl0ZWN0dXJlID0gJ2xpbnV4Lng4Ni02NCcNCiAgICApDQogICAgJFBhcnRzID0gJEJ1aWxkVGFnIC1zcGxpdCAnXycNCiAgICAkQnVpbGREYXRlID0gKCRQYXJ0cyB8IFNlbGVjdC1PYmplY3QgLUxhc3QgMikgLWpvaW4gJ18nDQogICAgJEJ1aWxkU3RhbXAgPSAkQnVpbGRUYWcNCiAgICAkT3V0ID0gW29yZGVyZWRdQHsNCiAgICAgICAgUGFja2FnZSAgICAgID0gJFBhY2thZ2UNCiAgICAgICAgQXJjaGl0ZWN0dXJlID0gJEFyY2hpdGVjdHVyZQ0KICAgICAgICBCdWlsZERhdGUgICAgPSAkQnVpbGREYXRlDQogICAgICAgIEJ1aWxkU3RhbXAgICA9ICRCdWlsZFN0YW1wDQogICAgfQ0KICAgICR1cmxfZGF0ZSA9ICgkQnVpbGREYXRlIC1zcGxpdCAnXycpWzBdIC1zcGxpdCAnLScgDQogICAgJHBhY2thZ2VGb2xkZXIgPSBAKA0KICAgICAgICAkdXJsX2RhdGVbMl0sDQogICAgICAgICR1cmxfZGF0ZVswXSwNCiAgICAgICAgJHVybF9kYXRlWzFdDQogICAgKSAtam9pbiAnLycNCiAgICAkUGFja2FnZUV4dGVuc2lvbiA9IHN3aXRjaCAoJFBhY2thZ2UpIHsNCiAgICAgICAgJ21pZC1saW51eC1jb250YWluZXItcmVjaXBlJyB7ICd6aXAnIH0NCiAgICAgICAgJ21pZC13aW5kb3dzLWluc3RhbGxlcicgeyAnZXhlJyB9DQogICAgICAgICdtaWQtbGludXgtaW5zdGFsbGVyLXJwbScgeyAncnBtJyB9DQogICAgICAgICdtaWQtbGludXgtaW5zdGFsbGVyLWRlYicgeyAnZGViJyB9DQogICAgfQ0KICAgICNSZW1vdmUgLWRlYiBhbmQgLXJwbSBmcm9tIHBhY2thZ2UgbmFtZQ0KICAgICRQYWNrYWdlTmFtZSA9ICRQYWNrYWdlIC1yZXBsYWNlICctKGRlYnxycG0pJCcNCiAgICAkT3V0LlBhY2thZ2VGaWxlTmFtZSA9ICIkUGFja2FnZU5hbWUuJEJ1aWxkU3RhbXAuJEFyY2hpdGVjdHVyZS4kUGFja2FnZUV4dGVuc2lvbiINCiAgICAkYmFzZVVyaSA9ICdodHRwczovL2luc3RhbGwuc2VydmljZS1ub3cuY29tL2dsaWRlL2Rpc3RyaWJ1dGlvbi9idWlsZHMvcGFja2FnZS9hcHAtc2lnbmVkL3swfScgLWYgJFBhY2thZ2VOYW1lDQogICAgJE91dC5QYWNrYWdlVXJpID0gIiRiYXNlVXJpLyRwYWNrYWdlRm9sZGVyLyQoJE91dC5QYWNrYWdlRmlsZU5hbWUpIg0KICAgICRPdXQNCn0NCg0KIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09DQojIFByaXZhdGUgRnVuY3Rpb25zIChEb2NrZXIvUG9kbWFuKQ0KIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09DQoNCmZ1bmN0aW9uIEdldC1Eb2NrZXJQb2RtYW5Db21tYW5kIHsNCiAgICBpZiAoJGVudjpET0NLRVJfQ09NTUFORCkgew0KICAgICAgICAkZW52OkRPQ0tFUl9DT01NQU5EDQogICAgfQ0KICAgIGVsc2VpZiAoKEdldC1Db21tYW5kIHBvZG1hbiAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSkpIHsNCiAgICAgICAgJ3BvZG1hbicNCiAgICB9DQogICAgZWxzZWlmICgoR2V0LUNvbW1hbmQgZG9ja2VyIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlKSkgew0KICAgICAgICAnZG9ja2VyJw0KICAgIH0NCiAgICBlbHNlIHsNCiAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgV2FybmluZyAnTm8gZG9ja2VyIG9yIHBvZG1hbiBjb21tYW5kIGZvdW5kLiBDYW5ub3QgcmVzb2x2ZSBsb2NhbCBpbWFnZXMnDQogICAgICAgICRudWxsDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBHZXQtRG9ja2VyUG9kbWFuSW1hZ2VTdGF0ZSB7DQogICAgJEltYWdlVGFncyA9IEAoKQ0KICAgICREb2NrZXJDb21tYW5kID0gR2V0LURvY2tlclBvZG1hbkNvbW1hbmQNCiAgICAkSW1hZ2VzID0gKCYgJERvY2tlckNvbW1hbmQgaW1hZ2UgbHMgLS1mb3JtYXQgJ3t7LlJlcG9zaXRvcnl9fXx8e3suVGFnfX18fHt7LkRpZ2VzdH19JykNCiAgICBmb3JlYWNoICgkSW1hZ2UgaW4gJEltYWdlcykgew0KICAgICAgICAkTmFtZVJlZ2V4ID0gJ14oPzxSZXBvc2l0b3J5Pi4rKVx8XHwoPzxUYWc+LispXHxcfCg/PERpZ2VzdD4uKykkJw0KDQogICAgICAgIGlmICgkSW1hZ2UgLW1hdGNoICROYW1lUmVnZXgpIHsNCiAgICAgICAgICAgICRQID0gJG1hdGNoZXNbJ1JlcG9zaXRvcnknXSAtc3BsaXQgJy8nLCAyDQogICAgICAgICAgICAkSW1hZ2VUYWdzICs9IFtQU0N1c3RvbU9iamVjdF1Aew0KICAgICAgICAgICAgICAgIFJlZ2lzdHJ5ICA9ICRwWzBdDQogICAgICAgICAgICAgICAgSW1hZ2VOYW1lID0gJHBbMV0NCiAgICAgICAgICAgICAgICBOYW1lICAgICAgPSAkTWF0Y2hlc1snVGFnJ10NCiAgICAgICAgICAgICAgICBEaWdlc3QgICAgPSAkbWF0Y2hlc1snRGlnZXN0J10NCiAgICAgICAgICAgIH0gIA0KICAgICAgICB9DQogICAgfSANCiAgICAkSW1hZ2VUYWdzIHwgR3JvdXAtT2JqZWN0IC1Qcm9wZXJ0eSBJbWFnZU5hbWUgfCBGb3JFYWNoLU9iamVjdCB7DQogICAgICAgIFtQU0N1c3RvbU9iamVjdF1Aew0KICAgICAgICAgICAgTmFtZSAgICAgPSAkXy5OYW1lDQogICAgICAgICAgICBSZWdpc3RyeSA9ICRfLkdyb3VwWzBdLlJlZ2lzdHJ5DQogICAgICAgICAgICBUYWdzICAgICA9IEAoJF8uR3JvdXAgfCBTZWxlY3QtT2JqZWN0IC1Qcm9wZXJ0eSBOYW1lLCBEaWdlc3QpDQogICAgICAgIH0NCiAgICB9IHwgU29ydC1PYmplY3QgLVByb3BlcnR5IE5hbWUNCn0NCg0KZnVuY3Rpb24gR2V0LURvY2tlclBvZG1hbkRvY2tlckZpbGVDb250ZW50IHsNCiAgICBpZiAoJGVudjpTTl9NSURfQ1VTVE9NX0RPQ0tFUkZJTEVfQkFTRTY0KSB7DQogICAgICAgICRkb2NrZXJGaWxlID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRTdHJpbmcoW1N5c3RlbS5Db252ZXJ0XTo6RnJvbUJhc2U2NFN0cmluZygkZW52OlNOX01JRF9DVVNUT01fRE9DS0VSRklMRV9CQVNFNjQpKQ0KICAgIH0NCiAgICBlbHNlaWYgKFRlc3QtUGF0aCAiJFBTU2NyaXB0Um9vdC9Eb2NrZXJmaWxlLm1pZGN1c3RvbSIpIHsNCiAgICAgICAgJGRvY2tlckZpbGUgPSBHZXQtQ29udGVudCAtUGF0aCAoIiRQU1NjcmlwdFJvb3QvRG9ja2VyZmlsZS5taWRjdXN0b20iKSAtUmF3DQogICAgfQ0KICAgIGVsc2VpZiAoJGVudjpTTl9NSURfQ1VTVE9NX0RPQ0tFUkZJTEVfUEFUSCkgew0KICAgICAgICAkZG9ja2VyRmlsZSA9IEdldC1Db250ZW50IC1QYXRoICRlbnY6U05fTUlEX0NVU1RPTV9ET0NLRVJGSUxFX1BBVEggLVJhdw0KICAgIH0NCiAgICBlbHNlIHsNCiAgICAgICAgcmV0dXJuICRudWxsDQogICAgfQ0KICAgICRkb2NrZXJGaWxlDQp9DQoNCmZ1bmN0aW9uIE1lcmdlLURvY2tlclBvZG1hbkhhc2hUYWJsZXMgew0KICAgIHBhcmFtKA0KICAgICAgICBbaGFzaHRhYmxlXSAkZGVmYXVsdCwgIyBZb3VyIG9yaWdpbmFsIHNldA0KICAgICAgICBbaGFzaHRhYmxlXSAkdXBwZW5kICMgVGhlIHNldCB5b3Ugd2FudCB0byB1cGRhdGUvYXBwZW5kIHRvIHRoZSBvcmlnaW5hbCBzZXQNCiAgICApDQogICAgJGRlZmF1bHQxID0gJGRlZmF1bHQuQ2xvbmUoKQ0KICAgIGZvcmVhY2ggKCRrZXkgaW4gJHVwcGVuZC5LZXlzKSB7DQogICAgICAgIGlmICgkZGVmYXVsdDEuQ29udGFpbnNLZXkoJGtleSkpIHsNCiAgICAgICAgICAgICRkZWZhdWx0MS5SZW1vdmUoJGtleSkNCiAgICAgICAgfQ0KICAgIH0NCiAgICByZXR1cm4gJGRlZmF1bHQxICsgJHVwcGVuZA0KfQ0KDQojPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQojIFNlcnZpY2VOb3cgTUlEIFRvb2xzIC0gVmF1bHQgTWFuYWdlbWVudCBGdW5jdGlvbnMNCiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCiMgVGhpcyBzY3JpcHQgcHJvdmlkZXMgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBzZWNyZXRzIGluIFBvd2VyU2hlbGwgU2VjcmV0U3RvcmUNCiMgb3IgQXp1cmUgS2V5IFZhdWx0IGZvciB1c2Ugd2l0aCBTZXJ2aWNlTm93IGFuZCBBenVyZSBlbnZpcm9ubWVudHMuDQojDQojIEZ1bmN0aW9uczoNCiMgLSBSZXNvbHZlLVNOT1dNaWRTZWNyZXRNYW5hZ2VtZW50VmF1bHQ6IENvbmZpZ3VyZSBhbmQgcmVnaXN0ZXIgYSBzZWNyZXQgdmF1bHQNCiMgLSBTZXQtSnNvblNlY3JldCAvIEdldC1Kc29uU2VjcmV0OiBTdG9yZSBhbmQgcmV0cmlldmUgSlNPTi1mb3JtYXR0ZWQgc2VjcmV0cw0KIyAtIFNldC1TTk9XTWlkRW52aXJvbm1lbnRTZWNyZXQgLyBSZXNvbHZlLVNOT1dNSURFbnZpcm9ubWVudEF1dGg6IE1hbmFnZSBTZXJ2aWNlTm93IGNyZWRlbnRpYWxzDQojIC0gU2V0LVNOT1dNaWRBenVyZUVudmlyb25tZW50U2VjcmV0IC8gUmVzb2x2ZS1TTk9XTWlkQXp1cmVFbnZpcm9ubWVudFNlY3JldHM6IE1hbmFnZSBBenVyZSBjcmVkZW50aWFscw0KIw0KIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KIyBFWEFNUExFUw0KIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KIyBFeGFtcGxlIDE6IFJlZ2lzdGVyIGEgdmF1bHQNCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiMgIyBVc2UgUG93ZXJTaGVsbCBTZWNyZXRTdG9yZSAoZGVmYXVsdCkNCiMgJERlZmF1bHRWYXVsdCA9IFJlc29sdmUtU05PV01pZFNlY3JldE1hbmFnZW1lbnRWYXVsdCAtVmF1bHROYW1lICdQU1Nub3dUZXN0VmF1bHQnIC1Vc2VBenVyZUtleVZhdWx0OiRmYWxzZQ0KIw0KIyAjIFVzZSBBenVyZSBLZXlWYXVsdCB3aXRoIG1ldGFkYXRhDQojIFJlc29sdmUtU05PV01pZFNlY3JldE1hbmFnZW1lbnRWYXVsdCAtVmF1bHROYW1lICdQU1Nub3dUZXN0VmF1bHQnIC1VcGRhdGVNZXRhZGF0YSAtVmF1bHRNZXRhZGF0YSBAew0KIyAgICAgRW52aXJvbm1lbnROYW1lID0gJ1Rlc3QnDQojICAgICBTdWJzY3JpcHRpb25JZCAgPSAnMTIzNDU2NzgtMTIzNC0xMjM0LTEyMzQtMTIzNDU2Nzg5MDEyJw0KIyB9DQojDQojIEV4YW1wbGUgMjogU2VydmljZU5vdyBDcmVkZW50aWFscyBNYW5hZ2VtZW50DQojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KIyAjIFN0b3JlIFNlcnZpY2VOb3cgY3JlZGVudGlhbHMNCiMgU2V0LVNOT1dNaWRFbnZpcm9ubWVudFNlY3JldCAtVXNlcm5hbWUgYWRtaW4gLUluc3RhbmNlIGRldjE5NTIyNiAtUGFzc3dvcmQgKCRlbnY6U05fUEFTU1dPUkQgfCBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nIC1Bc1BsYWluVGV4dCAtRm9yY2UpIGANCiMgICAgIC1TZWNyZXROYW1lICdzbm93LWNvbm5lY3Rpb24tdW50cy1qc29uJyAtVmF1bHROYW1lICdQU1Nub3dUZXN0VmF1bHQnDQojDQojICMgUmV0cmlldmUgU2VydmljZU5vdyBjcmVkZW50aWFscyBhbmQgc2V0IGVudmlyb25tZW50IHZhcmlhYmxlcw0KIyBSZXNvbHZlLVNOT1dNSURFbnZpcm9ubWVudEF1dGggLVNlY3JldE5hbWUgJ3Nub3ctY29ubmVjdGlvbi1zYngtanNvbicgLVZhdWx0TmFtZSAnUFNTbm93VGVzdFZhdWx0Jw0KIw0KIyBFeGFtcGxlIDM6IEF6dXJlIENyZWRlbnRpYWxzIE1hbmFnZW1lbnQNCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KIyAjIFN0b3JlIEF6dXJlIGNyZWRlbnRpYWxzDQojICRjbGllbnRTZWNyZXQgPSBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nIC1TdHJpbmcgInlvdXItY2xpZW50LXNlY3JldCIgLUFzUGxhaW5UZXh0IC1Gb3JjZQ0KIyBTZXQtU05PV01pZEF6dXJlRW52aXJvbm1lbnRTZWNyZXQgLVRlbmFudElkICJ5b3VyLXRlbmFudC1pZCIgLVN1YnNjcmlwdGlvbklkICJ5b3VyLXN1YnNjcmlwdGlvbi1pZCIgYA0KIyAgICAgLUNsaWVudElkICJ5b3VyLWNsaWVudC1pZCIgLVByaW5jaXBhbElkICJ5b3VyLXByaW5jaXBhbC1pZCIgLUNsaWVudFNlY3JldCAkY2xpZW50U2VjcmV0IGANCiMgICAgIC1TZWNyZXROYW1lICdhenVyZS1jb25uZWN0aW9uLXNieC1qc29uJyAtVmF1bHROYW1lICdQU1Nub3dUZXN0VmF1bHQnDQojDQojICMgUmV0cmlldmUgYW5kIHNldCBBenVyZSBlbnZpcm9ubWVudCB2YXJpYWJsZXMNCiMgUmVzb2x2ZS1TTk9XTWlkQXp1cmVFbnZpcm9ubWVudFNlY3JldHMgLVNlY3JldE5hbWUgJ2F6dXJlLWNvbm5lY3Rpb24tc2J4LWpzb24nIC1WYXVsdE5hbWUgJ1BTU25vd1Rlc3RWYXVsdCcNCiMNCiMgRXhhbXBsZSA0OiBDb3B5IHNlY3JldHMgYmV0d2VlbiB2YXVsdHMNCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQojIFJlc29sdmUtU05PV01JREVudmlyb25tZW50QXV0aCAtU2VjcmV0TmFtZSAnc25vdy1jb25uZWN0aW9uLXNieC1qc29uJyAtVmF1bHROYW1lICdQU1Nub3dUZXN0QXpWYXVsdCcgfCANCiMgICAgIFNldC1Kc29uU2VjcmV0IC1TZWNyZXROYW1lICdzbm93LWNvbm5lY3Rpb24tc2J4LWpzb24nIC1WYXVsdE5hbWUgJ1BTU25vd1Rlc3RWYXVsdCcNCiMNCiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCg0KZnVuY3Rpb24gUmVzb2x2ZS1TTk9XTWlkU2VjcmV0TWFuYWdlbWVudFZhdWx0IHsNCiAgICBbQ21kbGV0QmluZGluZygpXQ0KICAgIHBhcmFtKA0KICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICR0cnVlKV0NCiAgICAgICAgW3N0cmluZ10kVmF1bHROYW1lLA0KICAgICAgICANCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkZmFsc2UpXQ0KICAgICAgICBbc3dpdGNoXSRVc2VBenVyZUtleVZhdWx0LA0KICAgICAgICANCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkZmFsc2UpXQ0KICAgICAgICBbc3RyaW5nXSRBenVyZUtleVZhdWx0TmFtZSwNCiAgICAgICAgDQogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJGZhbHNlKV0NCiAgICAgICAgW3N0cmluZ10kQXp1cmVTdWJzY3JpcHRpb25JZCwNCg0KICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICRmYWxzZSldDQogICAgICAgIFtoYXNodGFibGVdJFZhdWx0TWV0YWRhdGEgPSBAe30sDQoNCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkZmFsc2UpXQ0KICAgICAgICBbc3dpdGNoXSRVcGRhdGVNZXRhZGF0YQ0KICAgICkNCiAgICAkVmF1bHRNZXRhZGF0YSArPSBbaGFzaHRhYmxlXUB7DQogICAgICAgIFZhdWx0TmFtZSAgICAgICAgICAgPSAkVmF1bHROYW1lDQogICAgICAgIFVzZUF6dXJlS2V5VmF1bHQgICAgPSAkVXNlQXp1cmVLZXlWYXVsdA0KICAgICAgICBBenVyZUtleVZhdWx0TmFtZSAgID0gJEF6dXJlS2V5VmF1bHROYW1lDQogICAgICAgIEF6dXJlU3Vic2NyaXB0aW9uSWQgPSAkQXp1cmVTdWJzY3JpcHRpb25JZA0KICAgICAgICBVcGRhdGVUaW1lc3RhbXAgICAgID0gKEdldC1EYXRlKS5Ub1N0cmluZygneXl5eS1NTS1kZFRISDptbTpzcycpDQogICAgfQ0KICAgICMgUHJlcGFyZSB2YXVsdCBjb25maWd1cmF0aW9uIGJhc2VkIG9uIHR5cGUNCiAgICBpZiAoJFVzZUF6dXJlS2V5VmF1bHQpIHsNCiAgICAgICAgIyBWZXJpZnkgQXp1cmUgY29udGV4dA0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgJGNvbnRleHQgPSBHZXQtQXpDb250ZXh0IC1FcnJvckFjdGlvbiBTdG9wDQogICAgICAgICAgICBpZiAoLW5vdCAkY29udGV4dCkgew0KICAgICAgICAgICAgICAgIHRocm93ICJObyBBenVyZSBjb250ZXh0IGZvdW5kLiBQbGVhc2UgY29ubmVjdCB0byBBenVyZSBmaXJzdCB3aXRoIENvbm5lY3QtQXpBY2NvdW50LiINCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgIyBVc2UgcHJvdmlkZWQgc3Vic2NyaXB0aW9uIElEIG9yIGN1cnJlbnQgb25lDQogICAgICAgICAgICAkc3Vic2NyaXB0aW9uSWQgPSAkQXp1cmVTdWJzY3JpcHRpb25JZCA/ICRBenVyZVN1YnNjcmlwdGlvbklkIDogJGNvbnRleHQuU3Vic2NyaXB0aW9uLklkDQogICAgICAgICAgICANCiAgICAgICAgICAgICMgVXNlIHRoZSBwcm92aWRlZCBLZXlWYXVsdCBuYW1lIG9yIGRlZmF1bHQgdG8gdGhlIFZhdWx0TmFtZSBwYXJhbWV0ZXINCiAgICAgICAgICAgICRrZXlWYXVsdFRvVXNlID0gaWYgKCRBenVyZUtleVZhdWx0TmFtZSkgeyAkQXp1cmVLZXlWYXVsdE5hbWUgfSBlbHNlIHsgJFZhdWx0TmFtZSB9DQogICAgICAgICAgICANCiAgICAgICAgICAgICMgUHJlcGFyZSBwYXJhbWV0ZXJzIGZvciBBenVyZSBLZXlWYXVsdA0KICAgICAgICAgICAgJHZhdWx0Q29uZmlnID0gQHsNCiAgICAgICAgICAgICAgICBNb2R1bGVOYW1lICAgICAgPSAnQXouS2V5VmF1bHQnDQogICAgICAgICAgICAgICAgVmF1bHRQYXJhbWV0ZXJzID0gQHsNCiAgICAgICAgICAgICAgICAgICAgQVpLVmF1bHROYW1lICAgPSAka2V5VmF1bHRUb1VzZQ0KICAgICAgICAgICAgICAgICAgICBTdWJzY3JpcHRpb25JZCA9ICRzdWJzY3JpcHRpb25JZA0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBjYXRjaCB7DQogICAgICAgICAgICBXcml0ZS1FcnJvciAiQXp1cmUgS2V5VmF1bHQgY29uZmlndXJhdGlvbiBmYWlsZWQ6ICRfIg0KICAgICAgICAgICAgcmV0dXJuDQogICAgICAgIH0NCiAgICB9DQogICAgZWxzZSB7DQogICAgICAgICMgU2V0dXAgZm9yIFBvd2VyU2hlbGwgU2VjcmV0U3RvcmUNCiAgICAgICAgJFJlcXVpcmVkTW9kdWxlcyA9IEAoDQogICAgICAgICAgICAnTWljcm9zb2Z0LlBvd2VyU2hlbGwuU2VjcmV0TWFuYWdlbWVudCcsDQogICAgICAgICAgICAnTWljcm9zb2Z0LlBvd2VyU2hlbGwuU2VjcmV0U3RvcmUnDQogICAgICAgICkNCiAgICAgICAgJFJlcXVpcmVkTW9kdWxlcyB8IEZvckVhY2gtT2JqZWN0IHsNCiAgICAgICAgICAgIGlmICgtbm90IChHZXQtTW9kdWxlIC1OYW1lICRfIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlIC1MaXN0QXZhaWxhYmxlKSkgew0KICAgICAgICAgICAgICAgIEluc3RhbGwtTW9kdWxlIC1OYW1lICRfIC1Gb3JjZSAtU2NvcGUgQ3VycmVudFVzZXINCiAgICAgICAgICAgICAgICBpZiAoJF8gLWVxICdNaWNyb3NvZnQuUG93ZXJTaGVsbC5TZWNyZXRTdG9yZScpIHsNCiAgICAgICAgICAgICAgICAgICAgSW1wb3J0LU1vZHVsZSAtTmFtZSAkXyAtRm9yY2UgLVNjb3BlIEN1cnJlbnRVc2VyDQogICAgICAgICAgICAgICAgICAgIFJlc2V0LVNlY3JldFN0b3JlIC1Db25maXJtOiRmYWxzZSAtQXV0aGVudGljYXRpb24gTm9uZQ0KICAgICAgICAgICAgICAgICAgICBTZXQtU2VjcmV0U3RvcmVDb25maWd1cmF0aW9uIC1BdXRoZW50aWNhdGlvbiBOb25lIC1TY29wZSBDdXJyZW50VXNlciAtQ29uZmlybTokZmFsc2UNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgICMgQ29uZmlndXJlIFNlY3JldFN0b3JlDQogICAgICAgIFNldC1TZWNyZXRTdG9yZUNvbmZpZ3VyYXRpb24gLUF1dGhlbnRpY2F0aW9uIE5vbmUgLVNjb3BlIEN1cnJlbnRVc2VyIC1Db25maXJtOiRmYWxzZQ0KICAgICAgICANCiAgICAgICAgIyBQcmVwYXJlIHBhcmFtZXRlcnMgZm9yIFBvd2VyU2hlbGwgU2VjcmV0U3RvcmUNCiAgICAgICAgJHZhdWx0Q29uZmlnID0gQHsNCiAgICAgICAgICAgIE1vZHVsZU5hbWUgICA9ICdNaWNyb3NvZnQuUG93ZXJTaGVsbC5TZWNyZXRTdG9yZScNCiAgICAgICAgICAgIERlZmF1bHRWYXVsdCA9ICR0cnVlDQogICAgICAgIH0NCiAgICB9DQoNCiAgICAjIENvbW1vbiBmdW5jdGlvbmFsaXR5IGZvciBib3RoIHZhdWx0IHR5cGVzDQogICAgJGV4aXN0aW5nVmF1bHQgPSBHZXQtU2VjcmV0VmF1bHQgLU5hbWUgJFZhdWx0TmFtZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQ0KICAgICRWYXVsdE1ldGFkYXRhLlZhdWx0Q29uZmlnID0gJHZhdWx0Q29uZmlnDQogICAgJE1ldGFkYXRhID0gKENvbnZlcnRUby1Kc29uIC1JbnB1dE9iamVjdCAkVmF1bHRNZXRhZGF0YSAtRGVwdGggNCAtQ29tcHJlc3MpDQoNCiAgICBpZiAoLW5vdCAkZXhpc3RpbmdWYXVsdCkgew0KICAgICAgICAjIFJlZ2lzdGVyIHRoZSB2YXVsdCB1c2luZyBwYXJhbWV0ZXJzDQogICAgICAgIFJlZ2lzdGVyLVNlY3JldFZhdWx0IC1OYW1lICRWYXVsdE5hbWUgQHZhdWx0Q29uZmlnDQogICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgLUxldmVsIEltcG9ydGFudCAiVmF1bHQgJFZhdWx0TmFtZSByZWdpc3RlcmVkIGFzICQoJHZhdWx0Q29uZmlnLk1vZHVsZU5hbWUpIHdpdGggcGFyYW1ldGVycyAkKCR2YXVsdENvbmZpZy5WYXVsdFBhcmFtZXRlcnMpIg0KICAgIH0NCiAgICBlbHNlIHsNCiAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgSW1wb3J0YW50ICJTZWNyZXQgdmF1bHQgJFZhdWx0TmFtZSBhbHJlYWR5IGV4aXN0cy4iDQogICAgfQ0KICAgICRleGlzdGluZ01ldGFkYXRhID0gR2V0LVNlY3JldCAtTmFtZSAnQXpWYXVsdE1ldGFkYXRhJyAtVmF1bHQgJFZhdWx0TmFtZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSAtQXNQbGFpblRleHQNCiAgICBpZiAoJGV4aXN0aW5nTWV0YWRhdGEpIHsNCiAgICAgICAgJEN1cnJlbnRNZXRhZGF0YSA9IChDb252ZXJ0RnJvbS1Kc29uIC1JbnB1dE9iamVjdCAkZXhpc3RpbmdNZXRhZGF0YSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSAtQXNIYXNodGFibGUpIA0KICAgIH0NCiAgICBpZiAoJFVwZGF0ZU1ldGFkYXRhKSB7DQogICAgICAgIFNldC1TZWNyZXQgLU5hbWUgJ0F6VmF1bHRNZXRhZGF0YScgLVZhdWx0ICRWYXVsdE5hbWUgLVNlY3JldCAkTWV0YWRhdGENCiAgICB9DQogICAgDQogICAgIyBSZXR1cm4gdmF1bHQgaW5mb3JtYXRpb24NCiAgICAkcmVzdWx0ID0gQHsNCiAgICAgICAgVmF1bHROYW1lICAgICAgID0gJFZhdWx0TmFtZQ0KICAgICAgICBWYXVsdCAgICAgICAgICAgPSAoR2V0LVNlY3JldFZhdWx0IC1OYW1lICRWYXVsdE5hbWUpDQogICAgICAgIFZhdWx0UGFyYW1zICAgICA9ICR2YXVsdENvbmZpZw0KICAgICAgICBNZXRhZGF0YSAgICAgICAgPSAkVmF1bHRNZXRhZGF0YQ0KICAgICAgICBDdXJyZW50TWV0YWRhdGEgPSAkQ3VycmVudE1ldGFkYXRhDQogICAgfQ0KICAgIA0KICAgIA0KICAgIHJldHVybiAkcmVzdWx0DQp9DQoNCmZ1bmN0aW9uIFNldC1Kc29uU2VjcmV0IHsNCiAgICBbQ21kbGV0QmluZGluZygpXQ0KICAgIHBhcmFtICgNCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkdHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkdHJ1ZSldDQogICAgICAgIFtvYmplY3RdJFNlY3JldFZhbHVlLA0KICAgICAgICANCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkdHJ1ZSldDQogICAgICAgIFtzdHJpbmddJFNlY3JldE5hbWUsDQogICAgICAgIA0KICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICR0cnVlKV0NCiAgICAgICAgW3N0cmluZ10kVmF1bHROYW1lDQogICAgKQ0KICAgIHByb2Nlc3Mgew0KICAgICAgICBpZiAoLW5vdCAkVmF1bHROYW1lKSB7DQogICAgICAgICAgICAkVmF1bHROYW1lID0gJ1BTU25vd1Rlc3RWYXVsdCcNCiAgICAgICAgfQ0KICAgICAgICAkSnNvblNlY3JldFZhbHVlID0gJFNlY3JldFZhbHVlIHwgQ29udmVydFRvLUpzb24gLURlcHRoIDEwIC1Db21wcmVzcw0KICAgICAgICBTZXQtU2VjcmV0IC1OYW1lICRTZWNyZXROYW1lIC1TZWNyZXQgJEpzb25TZWNyZXRWYWx1ZSAtVmF1bHQgJFZhdWx0TmFtZQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gR2V0LUpzb25TZWNyZXQgew0KICAgIFtDbWRsZXRCaW5kaW5nKCldDQogICAgcGFyYW0gKA0KICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICR0cnVlKV0NCiAgICAgICAgW3N0cmluZ10kU2VjcmV0TmFtZSwNCiAgICAgICAgDQogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUpXQ0KICAgICAgICBbc3RyaW5nXSRWYXVsdE5hbWUNCiAgICApDQogICAgcHJvY2VzcyB7DQogICAgICAgIGlmICgtbm90ICRWYXVsdE5hbWUpIHsNCiAgICAgICAgICAgICRWYXVsdE5hbWUgPSAnUFNTbm93VGVzdFZhdWx0Jw0KICAgICAgICB9DQogICAgICAgICRKc29uU2VjcmV0VmFsdWUgPSBHZXQtU2VjcmV0IC1OYW1lICRTZWNyZXROYW1lIC1WYXVsdCAkVmF1bHROYW1lIC1Bc1BsYWluVGV4dCAtRXJyb3JBY3Rpb24gQ29udGludWUNCiAgICAgICAgaWYgKCRKc29uU2VjcmV0VmFsdWUpIHsNCiAgICAgICAgICAgIHJldHVybiAkSnNvblNlY3JldFZhbHVlIHwgQ29udmVydEZyb20tSnNvbiAtRGVwdGggMTANCiAgICAgICAgfQ0KICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgIFdyaXRlLUVycm9yICJTZWNyZXQgJyRTZWNyZXROYW1lJyBub3QgZm91bmQgaW4gdmF1bHQgJyRWYXVsdE5hbWUnLiIgDQogICAgICAgIH0NCiAgICB9DQp9DQoNCmZ1bmN0aW9uIE5ldy1TTk9XTWlkRW52aXJvbm1lbnRQYXNzd29yZCB7DQogICAgJEN1cnJlbnRBdXRoID0gUmVzb2x2ZS1TTk9XTUlERW52aXJvbm1lbnRBdXRoIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQogICAgaWYgKCRDdXJyZW50QXV0aCAtYW5kICgkQ3VycmVudFVzZXIgPSBHZXQtU05PV0N1cnJlbnRVc2VyKSkgew0KICAgICAgICAkUGFzc3dvcmQgPSBHZW5lcmF0ZVJhbmRvbVBhc3N3b3JkIC1MZW5ndGggMTYgLUFzUGxhaW5UZXh0DQogICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgIkdlbmVyYXRlZCBuZXcgcGFzc3dvcmQgZm9yIFNlcnZpY2VOb3cgTUlEIGVudmlyb25tZW50OiAkKCRDdXJyZW50QXV0aC5JbnN0YW5jZSkiDQogICAgICAgICRVc2VyVXBkYXRlID0gU2V0LVNOT1dPYmplY3QgLVRhYmxlICdzeXNfdXNlcicgLVN5c19JRCAkQ3VycmVudFVzZXIuc3lzX2lkIC1Qcm9wZXJ0aWVzIEB7DQogICAgICAgICAgICBsb2NrZWRfb3V0ICAgICAgICAgICA9ICRmYWxzZQ0KICAgICAgICAgICAgcGFzc3dvcmRfbmVlZHNfcmVzZXQgPSAkZmFsc2UNCiAgICAgICAgICAgIHVzZXJfcGFzc3dvcmQgICAgICAgICA9ICRQYXNzd29yZA0KICAgICAgICB9IC1JbnB1dERpc3BsYXlWYWx1ZSAtUGFzc1RocnUNCiAgICAgICAgaWYoJFVzZXJVcGRhdGUpIHsNCiAgICAgICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgLUxldmVsIEltcG9ydGFudCAiUGFzc3dvcmQgdXBkYXRlZCBmb3IgdXNlciAkKCRDdXJyZW50VXNlci51c2VyX25hbWUpIGluIFNlcnZpY2VOb3cgTUlEIGVudmlyb25tZW50OiAkKCRDdXJyZW50QXV0aC5JbnN0YW5jZSkiDQogICAgICAgICAgICAjIFN0b3JlIHRoZSBuZXcgcGFzc3dvcmQgaW4gdGhlIHZhdWx0DQogICAgICAgICAgICAkU2VjcmV0UGFyYW1zID0gQHsNCiAgICAgICAgICAgICAgICBJbnN0YW5jZSAgID0gJEN1cnJlbnRBdXRoLkluc3RhbmNlDQogICAgICAgICAgICAgICAgVXNlcm5hbWUgICA9ICRDdXJyZW50VXNlci51c2VyX25hbWUNCiAgICAgICAgICAgICAgICBQYXNzd29yZCAgID0gJFBhc3N3b3JkIHwgQ29udmVydFRvLVNlY3VyZVN0cmluZyAtQXNQbGFpblRleHQgLUZvcmNlDQogICAgICAgICAgICAgICAgVmF1bHROYW1lICA9ICRTY3JpcHQ6U05fTUlEX1ZBVUxUX05BTUUNCiAgICAgICAgICAgICAgICBTZWNyZXROYW1lID0gJFNjcmlwdDpTTl9DT05ORUNUSU9OX1NFQ1JFVF9OQU1FDQogICAgICAgICAgICB9DQogICAgICAgICAgICBTZXQtU05PV01pZEVudmlyb25tZW50U2VjcmV0IEBTZWNyZXRQYXJhbXMNCiAgICAgICAgICAgIHJldHVybiAkU2VjcmV0UGFyYW1zDQogICAgICAgIH0NCiAgICAgICAgZWxzZSB7DQogICAgICAgICAgICBXcml0ZS1QU0ZNZXNzYWdlIC1MZXZlbCBXYXJuaW5nICJGYWlsZWQgdG8gdXBkYXRlIHBhc3N3b3JkIGZvciB1c2VyICQoJEN1cnJlbnRVc2VyLnVzZXJfbmFtZSkgaW4gU2VydmljZU5vdyBNSUQgZW52aXJvbm1lbnQ6ICQoJEN1cnJlbnRBdXRoLkluc3RhbmNlKSINCiAgICAgICAgfQ0KICAgIH0NCiAgICBlbHNlIHsNCiAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgV2FybmluZyAiTm8gY3VycmVudCBTZXJ2aWNlTm93IE1JRCBlbnZpcm9ubWVudCBmb3VuZCB0byBnZW5lcmF0ZSBhIHBhc3N3b3JkLiINCiAgICB9DQoNCn0NCg0KZnVuY3Rpb24gU2V0LVNOT1dNaWRFbnZpcm9ubWVudFNlY3JldCB7DQogICAgW0NtZGxldEJpbmRpbmcoKV0NCiAgICBwYXJhbSAoDQogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUpXQ0KICAgICAgICBbc3RyaW5nXSRJbnN0YW5jZSwNCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkdHJ1ZSldDQogICAgICAgIFtzdHJpbmddJFVzZXJuYW1lLA0KICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICR0cnVlKV0NCiAgICAgICAgW3NlY3VyZXN0cmluZ10kUGFzc3dvcmQsDQogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJGZhbHNlKV0NCiAgICAgICAgW1N5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuWDUwOUNlcnRpZmljYXRlcy5YNTA5Q2VydGlmaWNhdGUyXSRDZXJ0aWZpY2F0ZSwNCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkZmFsc2UpXQ0KICAgICAgICBbaGFzaHRhYmxlXSRNZXRhZGF0YSA9IEB7fSwNCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkZmFsc2UpXQ0KICAgICAgICBbc3RyaW5nXSRWYXVsdE5hbWUgPSAkU2NyaXB0OlNOX01JRF9WQVVMVF9OQU1FLA0KICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICRmYWxzZSldDQogICAgICAgIFtzdHJpbmddJFNlY3JldE5hbWUgPSAkU2NyaXB0OlNOX0NPTk5FQ1RJT05fU0VDUkVUX05BTUUNCiAgICApDQogICAgcHJvY2VzcyB7DQogICAgICAgICRTZWNyZXRWYWx1ZSA9IEB7DQogICAgICAgICAgICBJbnN0YW5jZSA9ICRJbnN0YW5jZQ0KICAgICAgICAgICAgVXNlcm5hbWUgPSAkVXNlcm5hbWUNCiAgICAgICAgICAgIFBhc3N3b3JkID0gKCRQYXNzd29yZCB8IENvbnZlcnRGcm9tLVNlY3VyZVN0cmluZyAtQXNQbGFpblRleHQpDQogICAgICAgICAgICBNZXRhZGF0YSA9ICRNZXRhZGF0YQ0KICAgICAgICB9DQogICAgICAgIGlmICgkQ2VydGlmaWNhdGUpIHsNCiAgICAgICAgICAgICRTZWNyZXRWYWx1ZS5DZXJ0aWZpY2F0ZSA9IEAoJENlcnRpZmljYXRlLkV4cG9ydENlcnRpZmljYXRlUGVtKCksICRDZXJ0aWZpY2F0ZS5Qcml2YXRlS2V5LkV4cG9ydFBrY3M4UHJpdmF0ZUtleVBlbSgpKSAtam9pbiAiYG4iDQogICAgICAgIH0NCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICRPbGRBdXRoID0gR2V0LVNOT1dBdXRoIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQogICAgICAgICAgICBTZXQtU05PV0F1dGggLUluc3RhbmNlICRJbnN0YW5jZSAtQ3JlZGVudGlhbCAoTmV3LU9iamVjdCBQU0NyZWRlbnRpYWwoJFVzZXJuYW1lLCAkUGFzc3dvcmQpKQ0KICAgICAgICAgICAgIyBUZXN0IHRoZSBjb25uZWN0aW9uIHdpdGggYSBzaW1wbGUgQVBJIGNhbGwNCiAgICAgICAgICAgICRTZWxmID0gSW52b2tlLVNOT1dXZWJSZXF1ZXN0IC1NZXRob2QgR2V0IC1VUkkgJy9hcGkvbm93L3RhYmxlL3N5c191c2VyP3N5c3Bhcm1fZmllbGRzPXN5c19pZCxuYW1lLHVzZXJfbmFtZSZzeXNwYXJtX3F1ZXJ5PXVzZXJfbmFtZT1qYXZhc2NyaXB0OmdzLmdldFVzZXJOYW1lKCknIC1Vc2VSZXN0TWV0aG9kIC1FcnJvckFjdGlvbiBTdG9wDQogICAgICAgICAgICBpZiAoJFNlbGYucmVzdWx0KSB7DQogICAgICAgICAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAiU3VjY2Vzc2Z1bGx5IGNvbm5lY3RlZCB0byBTZXJ2aWNlTm93IFskKCRJbnN0YW5jZSldOiAkKCRTZWxmLnJlc3VsdC51c2VyX25hbWUpICgkKCRTZWxmLnJlc3VsdC5zeXNfaWQpKSINCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgLUxldmVsIFdhcm5pbmcgIkZhaWxlZCB0byByZXRyaWV2ZSB1c2VyIGluZm9ybWF0aW9uIGZyb20gU2VydmljZU5vdyBpbnN0YW5jZS4gQ2hlY2sgeW91ciBjcmVkZW50aWFscy4iDQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgY2F0Y2ggew0KICAgICAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAtTGV2ZWwgV2FybmluZyAiQ291bGQgbm90IHZlcmlmeSBTZXJ2aWNlTm93IGNyZWRlbnRpYWxzOiAkXyINCiAgICAgICAgICAgIGlmICgkT2xkQXV0aCkgew0KICAgICAgICAgICAgICAgIFNldC1TTk9XQXV0aCAtQXV0aE9iamVjdCAkT2xkQXV0aCAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSB8IE91dC1OdWxsDQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgU2V0LUpzb25TZWNyZXQgLVNlY3JldFZhbHVlICRTZWNyZXRWYWx1ZSAtU2VjcmV0TmFtZSAiJFNlY3JldE5hbWUiIC1WYXVsdE5hbWUgJFZhdWx0TmFtZQ0KICAgICAgICAkVmF1bHRTZWNyZXRzID0gQHsNCiAgICAgICAgICAgICdzbm93LWFwaS11c2VybmFtZScgPSAkVXNlcm5hbWUgfCBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nIC1Bc1BsYWluVGV4dCAtRm9yY2UNCiAgICAgICAgICAgICdzbm93LWFwaS1wYXNzd29yZCcgPSAkUGFzc3dvcmQNCiAgICAgICAgfQ0KICAgICAgICBmb3JlYWNoICgka2V5IGluICRWYXVsdFNlY3JldHMuS2V5cykgew0KICAgICAgICAgICAgJEN1cnJlbnRTZWNyZXQgPSBHZXQtU2VjcmV0IC1OYW1lICRrZXkgLVZhdWx0ICRWYXVsdE5hbWUgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUNCiAgICAgICAgICAgIGlmICgkQ3VycmVudFNlY3JldCkgew0KICAgICAgICAgICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgLUxldmVsIEltcG9ydGFudCAiU2VjcmV0ICcka2V5JyBhbHJlYWR5IGV4aXN0cyBpbiB2YXVsdCAnJFZhdWx0TmFtZScuIE92ZXJ3cml0aW5nLiINCiAgICAgICAgICAgICAgICBTZXQtU2VjcmV0IC1OYW1lICRrZXkgLVNlY3VyZVN0cmluZ1NlY3JldCAkVmF1bHRTZWNyZXRzWyRrZXldIC1WYXVsdCAkVmF1bHROYW1lDQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQp9DQpmdW5jdGlvbiBSZXNvbHZlLVNOT1dNSURFbnZpcm9ubWVudEF1dGggew0KICAgIHByb2Nlc3Mgew0KICAgICAgICAkU2VjcmV0VmFsdWUgPSBHZXQtSnNvblNlY3JldCAtU2VjcmV0TmFtZSAkU2NyaXB0OlNOX0NPTk5FQ1RJT05fU0VDUkVUX05BTUUgLVZhdWx0TmFtZSAkU2NyaXB0OlNOX01JRF9WQVVMVF9OQU1FIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQogICAgICAgICMgQXR0ZW1wdCB0byBTZXQtU05PV0F1dGggd2l0aCB0aGUgcmV0cmlldmVkIHNlY3JldCBhbmQgcXVlcnkgdGhlIHVzZXINCiAgICAgICAgaWYgKCRTZWNyZXRWYWx1ZSkgew0KICAgICAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAiUmVzb2x2ZWQgU2VydmljZU5vdyBjcmVkZW50aWFscyBmb3IgJCgkU2VjcmV0VmFsdWUuSW5zdGFuY2UpIGluIEVudmlyb25tZW50ICQoJFNjcmlwdDpTTl9NSURfRU5WSVJPTk1FTlRfTkFNRSkiDQogICAgICAgICAgICAjIElmIHRoZSBpbnN0YW5jZSBpcyBub3QgYSBwcm9wZXIgVVJMLCBhcHBlbmQgLnNlcnZpY2Utbm93LmNvbQ0KICAgICAgICAgICAgaWYgKCRTZWNyZXRWYWx1ZS5JbnN0YW5jZSAtbm90bWF0Y2ggJ15odHRwcy4qJCcpIHsNCiAgICAgICAgICAgICAgICAkU2VjcmV0VmFsdWUuSW5zdGFuY2UgPSAiaHR0cHM6Ly8kKCRTZWNyZXRWYWx1ZS5JbnN0YW5jZSkuc2VydmljZS1ub3cuY29tIg0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgJFNjcmlwdDpTTl9IT1NUID0gJFNlY3JldFZhbHVlLkluc3RhbmNlDQogICAgICAgICAgICAkU2NyaXB0OlNub3dFbnZpcm9ubWVudEF1dGggPSBAew0KICAgICAgICAgICAgICAgIEluc3RhbmNlICAgPSAkU2VjcmV0VmFsdWUuSW5zdGFuY2UNCiAgICAgICAgICAgICAgICBDcmVkZW50aWFsID0gW3BzY3JlZGVudGlhbF06Om5ldygkU2VjcmV0VmFsdWUuVXNlcm5hbWUsICgkU2VjcmV0VmFsdWUuUGFzc3dvcmQgfCBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nIC1Bc1BsYWluVGV4dCAtRm9yY2UpKQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgV3JpdGUtUFNGTWVzc2FnZSAtTWVzc2FnZSAiU2V0dGluZyBTZXJ2aWNlTm93IGNyZWRlbnRpYWxzIGZvciAkKCRTZWNyZXRWYWx1ZS5JbnN0YW5jZSkgZnJvbSBWYXVsdCBTZWNyZXQiIC1MZXZlbCBJbXBvcnRhbnQNCiAgICAgICAgfQ0KICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgLUxldmVsIFdhcm5pbmcgLU1lc3NhZ2UgIkZhaWxlZCB0byByZXRyaWV2ZSBzZWNyZXQgJyQoJFNjcmlwdDpTTl9DT05ORUNUSU9OX1NFQ1JFVF9OQU1FKScgZnJvbSB2YXVsdCAnJCgkU2NyaXB0OlNOX01JRF9WQVVMVF9OQU1FKScuIg0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKCFbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkZW52Ok1JRF9JTlNUQU5DRV9VUkwpIC1hbmQgIVtzdHJpbmddOjpJc051bGxPckVtcHR5KCRlbnY6TUlEX0lOU1RBTkNFX1VTRVJOQU1FKSBgDQogICAgICAgICAgICAgICAgLWFuZCAhW3N0cmluZ106OklzTnVsbE9yRW1wdHkoJGVudjpNSURfSU5TVEFOQ0VfUEFTU1dPUkQpKSB7DQogICAgICAgICAgICAkU2NyaXB0OlNub3dFbnZpcm9ubWVudEF1dGggPSBAew0KICAgICAgICAgICAgICAgIEluc3RhbmNlICAgPSAkZW52Ok1JRF9JTlNUQU5DRV9VUkwNCiAgICAgICAgICAgICAgICBDcmVkZW50aWFsID0gW3BzY3JlZGVudGlhbF06Om5ldygkZW52Ok1JRF9JTlNUQU5DRV9VU0VSTkFNRSwgKCRlbnY6TUlEX0lOU1RBTkNFX1BBU1NXT1JEIHwgQ29udmVydFRvLVNlY3VyZVN0cmluZyAtQXNQbGFpblRleHQgLUZvcmNlKSkNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgLU1lc3NhZ2UgIlNldHRpbmcgU2VydmljZU5vdyBjcmVkZW50aWFscyBmb3IgJCgkU2NyaXB0OlNub3dFbnZpcm9ubWVudEF1dGguSW5zdGFuY2UpIGZyb20gTUlEX0lOU1RBTkNFXyBFbnZpcm9ubWVudCIgLUxldmVsIEltcG9ydGFudA0KICAgICAgICB9DQogICAgICAgIA0KDQogICAgICAgIGlmICgkU2NyaXB0OlNub3dFbnZpcm9ubWVudEF1dGgpIHsNCiAgICAgICAgICAgICRTY3JpcHQ6U05fSE9TVCA9ICRTY3JpcHQ6U25vd0Vudmlyb25tZW50QXV0aC5JbnN0YW5jZQ0KICAgICAgICAgICAgJE1pZFZlcnNpb24gPSBHZXQtU05PV01JRFJlY29yZFdpdGhDcmVkcyAtQ3JlZGVudGlhbCAkU2NyaXB0OlNub3dFbnZpcm9ubWVudEF1dGguQ3JlZGVudGlhbCAtVGFibGUgJ3N5c19wcm9wZXJ0aWVzJyAtUXVlcnkgJ25hbWU9bWlkLnZlcnNpb24nIC1JbnN0YW5jZSAkU2NyaXB0OlNub3dFbnZpcm9ubWVudEF1dGguSW5zdGFuY2UNCiAgICAgICAgICAgIGlmICgkTWlkVmVyc2lvbikgew0KICAgICAgICAgICAgICAgIFNldC1TTk9XQXV0aCBAU25vd0Vudmlyb25tZW50QXV0aCAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQ0KICAgICAgICAgICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgLUxldmVsIEltcG9ydGFudCAiU3VjY2Vzc2Z1bGx5IGNvbm5lY3RlZCB0byBTZXJ2aWNlTm93IFskKCRTZWNyZXRWYWx1ZS5JbnN0YW5jZSldOiAkKCRNaWRWZXJzaW9uLnZhbHVlKSINCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgLUxldmVsIFdhcm5pbmcgIkZhaWxlZCB0byByZXRyaWV2ZSBNSUQgdmVyc2lvbiBmcm9tIFNlcnZpY2VOb3cgaW5zdGFuY2UuIENoZWNrIHlvdXIgY3JlZGVudGlhbHMuIg0KICAgICAgICAgICAgICAgICRTY3JpcHQ6U25vd0Vudmlyb25tZW50QXV0aCA9ICRudWxsDQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuICRTY3JpcHQ6U25vd0Vudmlyb25tZW50QXV0aA0KICAgIH0NCn0NCg0KZnVuY3Rpb24gU2V0LVNOT1dNaWRBenVyZUVudmlyb25tZW50U2VjcmV0IHsNCiAgICBbQ21kbGV0QmluZGluZygpXQ0KICAgIHBhcmFtICgNCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkdHJ1ZSldDQogICAgICAgIFtzdHJpbmddJFRlbmFudElkLA0KICAgICAgICANCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkdHJ1ZSldDQogICAgICAgIFtzdHJpbmddJFN1YnNjcmlwdGlvbklkLA0KICAgICAgICANCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkdHJ1ZSldDQogICAgICAgIFtzdHJpbmddJENsaWVudElkLA0KDQogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUpXQ0KICAgICAgICBbc3RyaW5nXSRQcmluY2lwYWxJZCwNCiAgICAgICAgDQogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUpXQ0KICAgICAgICBbc2VjdXJlc3RyaW5nXSRDbGllbnRTZWNyZXQsDQogICAgICAgIA0KICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICRmYWxzZSldDQogICAgICAgIFtTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5Llg1MDlDZXJ0aWZpY2F0ZXMuWDUwOUNlcnRpZmljYXRlMl0kQ2VydGlmaWNhdGUsDQogICAgICAgIA0KICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICRmYWxzZSldDQogICAgICAgIFtoYXNodGFibGVdJE1ldGFkYXRhID0gQHt9LA0KICAgICAgICANCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkZmFsc2UpXQ0KICAgICAgICBbc3RyaW5nXSRBenVyZUVudmlyb25tZW50TmFtZSA9ICdBenVyZUNsb3VkJywNCiAgICAgICAgDQogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJGZhbHNlKV0NCiAgICAgICAgW3N0cmluZ10kU2VjcmV0TmFtZSA9ICRTY3JpcHQ6QVpfQ09OTkVDVElPTl9TRUNSRVRfTkFNRSwNCiAgICAgICAgDQogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJGZhbHNlKV0NCiAgICAgICAgW3N0cmluZ10kVmF1bHROYW1lID0gJFNjcmlwdDpTTl9NSURfVkFVTFRfTkFNRQ0KICAgICkNCiAgICBwcm9jZXNzIHsNCiAgICAgICAgJFNlY3JldFZhbHVlID0gQHsNCiAgICAgICAgICAgIFRlbmFudElkICAgICAgICA9ICRUZW5hbnRJZA0KICAgICAgICAgICAgU3Vic2NyaXB0aW9uSWQgID0gJFN1YnNjcmlwdGlvbklkDQogICAgICAgICAgICBDbGllbnRJZCAgICAgICAgPSAkQ2xpZW50SWQNCiAgICAgICAgICAgIFByaW5jaXBhbElkICAgICA9ICRQcmluY2lwYWxJZA0KICAgICAgICAgICAgQ2xpZW50U2VjcmV0ICAgID0gKCRDbGllbnRTZWNyZXQgfCBDb252ZXJ0RnJvbS1TZWN1cmVTdHJpbmcgLUFzUGxhaW5UZXh0KQ0KICAgICAgICAgICAgRW52aXJvbm1lbnROYW1lID0gJEF6dXJlRW52aXJvbm1lbnROYW1lDQogICAgICAgICAgICBNZXRhZGF0YSAgICAgICAgPSAkTWV0YWRhdGENCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgaWYgKCRDZXJ0aWZpY2F0ZSkgew0KICAgICAgICAgICAgJFNlY3JldFZhbHVlLkNlcnRpZmljYXRlID0gQCgkQ2VydGlmaWNhdGUuRXhwb3J0Q2VydGlmaWNhdGVQZW0oKSwgJENlcnRpZmljYXRlLlByaXZhdGVLZXkuRXhwb3J0UGtjczhQcml2YXRlS2V5UGVtKCkpIC1qb2luICJgbiINCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgIyBWZXJpZnkgdGhlIGNyZWRlbnRpYWxzIGFyZSB2YWxpZCBpZiBwb3NzaWJsZQ0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgJGNvbnRleHQgPSBDb25uZWN0LUF6QWNjb3VudCAtVGVuYW50ICRUZW5hbnRJZCAtU3Vic2NyaXB0aW9uICRTdWJzY3JpcHRpb25JZCBgDQogICAgICAgICAgICAgICAgLUNyZWRlbnRpYWwgKE5ldy1PYmplY3QgUFNDcmVkZW50aWFsKCRDbGllbnRJZCwgJENsaWVudFNlY3JldCkpIC1FbnZpcm9ubWVudCAkQXp1cmVFbnZpcm9ubWVudE5hbWUgYA0KICAgICAgICAgICAgICAgIC1TZXJ2aWNlUHJpbmNpcGFsIC1FcnJvckFjdGlvbiBTdG9wIC1TY29wZSBQcm9jZXNzDQogICAgICAgICAgICAjIERpc2Nvbm5lY3QgaWYgdGhlIGNvbm5lY3Rpb24gd2FzIHN1Y2Nlc3NmdWwNCiAgICAgICAgICAgIERpc2Nvbm5lY3QtQXpBY2NvdW50IC1TY29wZSBQcm9jZXNzIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlIA0KICAgICAgICB9DQogICAgICAgIGNhdGNoIHsNCiAgICAgICAgICAgIFdyaXRlLVBTRk1lc3NhZ2UgLUxldmVsIFdhcm5pbmcgIkNvdWxkIG5vdCB2ZXJpZnkgQXp1cmUgY3JlZGVudGlhbHM6ICRfIg0KICAgICAgICAgICAgIyBDb250aW51ZSBhbnl3YXkgLSB0aGUgc2VjcmV0IHdpbGwgc3RpbGwgYmUgc3RvcmVkDQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIFNldC1Kc29uU2VjcmV0IC1TZWNyZXRWYWx1ZSAkU2VjcmV0VmFsdWUgLVNlY3JldE5hbWUgJFNlY3JldE5hbWUgLVZhdWx0TmFtZSAkVmF1bHROYW1lDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBSZXNvbHZlLVNOT1dNaWRBenVyZUVudmlyb25tZW50U2VjcmV0cyB7DQogICAgW0NtZGxldEJpbmRpbmcoKV0NCiAgICBwYXJhbSAoDQogICAgICAgIFtzdHJpbmddJFNlY3JldE5hbWUgPSAkU2NyaXB0OkFaX0NPTk5FQ1RJT05fU0VDUkVUX05BTUUsDQogICAgICAgIFtzdHJpbmddJFZhdWx0TmFtZSA9ICRTY3JpcHQ6U05fTUlEX1ZBVUxUX05BTUUsDQogICAgICAgIFtzd2l0Y2hdJFNldEVudmlyb25tZW50VmFyaWFibGVzDQogICAgKQ0KICAgIHByb2Nlc3Mgew0KICAgICAgICAkU2VjcmV0VmFsdWUgPSBHZXQtSnNvblNlY3JldCAtU2VjcmV0TmFtZSAkU2VjcmV0TmFtZSAtVmF1bHROYW1lICRWYXVsdE5hbWUNCiAgICAgICAgJEVudlZhcnMgPSBbb3JkZXJlZF1Aew0KICAgICAgICAgICAgQVpVUkVfVEVOQU5UX0lEICAgICAgICA9ICRTZWNyZXRWYWx1ZS5UZW5hbnRJZA0KICAgICAgICAgICAgQVpVUkVfU1VCU0NSSVBUSU9OX0lEICA9ICRTZWNyZXRWYWx1ZS5TdWJzY3JpcHRpb25JZA0KICAgICAgICAgICAgQVpVUkVfQ0xJRU5UX0lEICAgICAgICA9ICRTZWNyZXRWYWx1ZS5DbGllbnRJZA0KICAgICAgICAgICAgQVpVUkVfQ0xJRU5UX1NFQ1JFVCAgICA9ICRTZWNyZXRWYWx1ZS5DbGllbnRTZWNyZXQNCiAgICAgICAgICAgIEFaVVJFX0VOVklST05NRU5UX05BTUUgPSAkU2VjcmV0VmFsdWUuRW52aXJvbm1lbnROYW1lDQogICAgICAgIH0NCiAgICAgICAgaWYgKCRTZWNyZXRWYWx1ZS5DZXJ0aWZpY2F0ZSkgew0KICAgICAgICAgICAgJGNlcnRQYXRoID0gW1N5c3RlbS5JTy5QYXRoXTo6R2V0VGVtcEZpbGVOYW1lKCkNCiAgICAgICAgICAgICRTZWNyZXRWYWx1ZS5DZXJ0aWZpY2F0ZSB8IE91dC1GaWxlIC1GaWxlUGF0aCAkY2VydFBhdGggLUVuY29kaW5nIHV0ZjgNCiAgICAgICAgICAgICRFbnZWYXJzLkFaVVJFX0NFUlRJRklDQVRFX1BBVEggPSAkY2VydFBhdGgNCiAgICAgICAgfQ0KICAgICAgICAjIFNldCBlbnZpcm9ubWVudCB2YXJpYWJsZXMgaWYgcmVxdWVzdGVkIG9yIGJ5IGRlZmF1bHQNCiAgICAgICAgaWYgKCRTZWNyZXRWYWx1ZSAtYW5kICgkU2V0RW52aXJvbm1lbnRWYXJpYWJsZXMgLW9yICEkUFNCb3VuZFBhcmFtZXRlcnMuQ29udGFpbnNLZXkoJ1NldEVudmlyb25tZW50VmFyaWFibGVzJykpKSB7DQogICAgICAgICAgICBmb3JlYWNoICgkRW52VmFyIGluICRFbnZWYXJzLktleXMpIHsNCiAgICAgICAgICAgICAgICBpZiAoJEVudlZhcnNbJEVudlZhcl0pIHsNCiAgICAgICAgICAgICAgICAgICAgW1N5c3RlbS5FbnZpcm9ubWVudF06OlNldEVudmlyb25tZW50VmFyaWFibGUoJEVudlZhciwgJEVudlZhcnNbJEVudlZhcl0sIFtTeXN0ZW0uRW52aXJvbm1lbnRWYXJpYWJsZVRhcmdldF06OlByb2Nlc3MpDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICBXcml0ZS1QU0ZNZXNzYWdlIC1MZXZlbCBWZXJib3NlICJFbnZpcm9ubWVudCB2YXJpYWJsZSAnJEVudlZhcicgbm90IHNldC4gVmFsdWUgaXMgbnVsbCBvciBlbXB0eS4iDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGVsc2VpZiAoISRTZWNyZXRWYWx1ZSkgew0KICAgICAgICAgICAgV3JpdGUtRXJyb3IgIkZhaWxlZCB0byByZXRyaWV2ZSBzZWNyZXQgJyRTZWNyZXROYW1lJyBmcm9tIHZhdWx0ICckVmF1bHROYW1lJy4iDQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIHJldHVybiAkRW52VmFycw0KICAgIH0NCn0NCiRTY3JpcHQ6Q29tbWFuZENvbnRleHQgPSAkTXlJbnZvY2F0aW9uLk15Q29tbWFuZC5OYW1lDQokU2NyaXB0OlNjcmlwdFBhdGggPSBKb2luLVBhdGggJFBTU2NyaXB0Um9vdCAkU2NyaXB0OkNvbW1hbmRDb250ZXh0DQpmdW5jdGlvbiBHZXQtU05PV01JRFRvb2xzTW9kdWxlQ29udGVudCB7DQogICAgJEdsb2JhbDpTY3JpcHRDb250ZW50cyA9IEdldC1Db250ZW50IC1QYXRoICRTY3JpcHQ6U2NyaXB0UGF0aCAtUmF3IA0KICAgICRoZWFkZXIgPSAiIyMjIEJFR0lOICQoJ1BTU25vdy5NaWRUb29scy5wc20xJykgIyMjIg0KICAgICMgUmVtb3ZlIGFueXRoaW5nIGJlZm9yZSB0aGUgaGVhZGVyDQogICAgJGhlYWRlckluZGV4ID0gJFNjcmlwdENvbnRlbnRzLkluZGV4T2YoJGhlYWRlcikNCiAgICBpZiAoJGhlYWRlckluZGV4IC1nZSAwKSB7DQogICAgICAgICMgUmVtb3ZlIGV2ZXJ5dGhpbmcgYmVmb3JlIHRoZSBoZWFkZXINCiAgICAgICAgJFNjcmlwdENvbnRlbnRzID0gJFNjcmlwdENvbnRlbnRzLlN1YnN0cmluZygkaGVhZGVySW5kZXggKyAkaGVhZGVyLkxlbmd0aCkNCiAgICB9DQoNCiAgICAjIFJlbW92ZSBhbnl0aGluZyBhZnRlciB0aGUgZm9vdGVyDQogICAgJGZvb3RlciA9ICIjIyMgRU5EICQoJ1BTU25vdy5NaWRUb29scy5wc20xJykgIyMjIg0KICAgICRmb290ZXJJbmRleCA9ICRTY3JpcHRDb250ZW50cy5JbmRleE9mKCRmb290ZXIpDQogICAgaWYgKCRmb290ZXJJbmRleCAtZ2UgMCkgew0KICAgICAgICAkU2NyaXB0Q29udGVudHMgPSAkU2NyaXB0Q29udGVudHMuU3Vic3RyaW5nKDAsICRmb290ZXJJbmRleCArICRmb290ZXIuTGVuZ3RoKQ0KICAgIH0NCiAgICAkU2NyaXB0Q29udGVudHMNCn0NCiMgRE8gTk9UIFJFTU9WRSBUSElTIExJTkUNCiMjIyBFTkQgUFNTbm93Lk1pZFRvb2xzLnBzbTEgIyMj",
            "dsEnv": "[union(createArray(createObject('name', 'SN_MID_ENVIRONMENT_NAME', 'value', parameters('devopsEnvironmentName')), createObject('name', 'SN_MID_CONTEXT', 'value', 'azure'), createObject('name', 'SN_MID_BUILD_STRATEGY', 'value', 'acr'), createObject('name', 'NO_COLOR', 'value', 'true')), parameters('scriptEnvironmentVariables'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2023-08-01",
              "name": "[parameters('deploymentScriptName')]",
              "location": "[resourceGroup().location]",
              "identity": {
                "type": "userAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')))]": {}
                }
              },
              "kind": "AzurePowerShell",
              "properties": {
                "environmentVariables": "[variables('dsEnv')]",
                "forceUpdateTag": "[parameters('utcValue')]",
                "azPowerShellVersion": "14.1",
                "storageAccountSettings": {
                  "storageAccountName": "[variables('storageAccountName')]"
                },
                "containerSettings": {
                  "subnetIds": [
                    {
                      "id": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2023-01-01', 'full').tags.SnowContainerSubnetId]"
                    }
                  ]
                },
                "scriptContent": "[join(createArray('# GENERATED IN snow-mid-deplyoymentscript.mod.bicep', '# This function is called at the bottom of this script.', 'function SnowMidDeploymentScript {', parameters('inlineScript'), '}', '# END GENERATED FUNCTION', '# BEGIN PSSnow.MidTools.psm1 Content', base64ToString(variables('commonScriptContent')), '# END PSSnow.MidTools.psm1 Content', 'SnowMidDeploymentScript'), '\n')]",
                "retentionInterval": "PT1H",
                "cleanupPreference": "OnSuccess"
              },
              "tags": "[parameters('tags')]"
            }
          ],
          "outputs": {
            "scriptOutput": {
              "type": "object",
              "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', parameters('deploymentScriptName')), '2023-08-01').outputs]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('midServerDeployment-{0}', parameters('midServerName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "userAssignedIdentityName": {
            "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2023-01-01', 'full').tags.SnowMidServerIdentity]"
          },
          "location": {
            "value": "[resourceGroup().location]"
          },
          "midServerName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('GetBuildContext-{0}', parameters('midServerName'))), '2022-09-01').outputs.scriptOutput.value.MidServerName]"
          },
          "midInstanceUrl": {
            "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2023-01-01', 'full').tags.SnowHost]"
          },
          "midInstanceUsername": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('GetBuildContext-{0}', parameters('midServerName'))), '2022-09-01').outputs.scriptOutput.value.Credentials.UserName]"
          },
          "midInstancePassword": {
            "reference": {
              "keyVault": {
                "id": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
              },
              "secretName": "[reference(resourceId('Microsoft.Resources/deployments', format('GetBuildContext-{0}', parameters('midServerName'))), '2022-09-01').outputs.scriptOutput.value.VaultSecret]"
            }
          },
          "containerRegistryId": {
            "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2023-01-01', 'full').tags.SnowContainerRegistryId]"
          },
          "containerSubnetId": {
            "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2023-01-01', 'full').tags.SnowContainerSubnetId]"
          },
          "imagePath": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('GetBuildContext-{0}', parameters('midServerName'))), '2022-09-01').outputs.scriptOutput.value.BuildResults.CustomImageEnvironmentUri]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          },
          "numCpu": {
            "value": "[parameters('numCpu')]"
          },
          "memoryInGB": {
            "value": "[parameters('memoryInGB')]"
          },
          "additionalEnvironmentVariables": {
            "value": [
              {
                "name": "SN_MID_ENVIRONMENT_NAME",
                "value": "[parameters('devopsEnvironmentName')]"
              },
              {
                "name": "SN_MID_CONTEXT",
                "value": "azure"
              },
              {
                "name": "SN_MID_BUILD_STRATEGY",
                "value": "acr"
              }
            ]
          },
          "tags": {
            "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2023-01-01', 'full').tags]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "9903498722782844110"
            }
          },
          "functions": [
            {
              "namespace": "__bicep",
              "members": {
                "parseResourceId": {
                  "parameters": [
                    {
                      "type": "string",
                      "name": "resourceId"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": {
                      "SubscriptionId": "[split(parameters('resourceId'), '/')[2]]",
                      "ResourceGroup": "[split(parameters('resourceId'), '/')[4]]",
                      "Name": "[last(split(parameters('resourceId'), '/'))]"
                    }
                  }
                }
              }
            }
          ],
          "parameters": {
            "midInstanceUrl": {
              "type": "string",
              "metadata": {
                "description": "The ServiceNow URL. Fully qualified. Example: https://<instance>.service-now.com"
              }
            },
            "midServerName": {
              "type": "string",
              "metadata": {
                "description": "The MID Server name"
              }
            },
            "midInstanceUsername": {
              "type": "string",
              "metadata": {
                "description": "The MID Server username. Must exist, and have the mid_server role"
              }
            },
            "midInstancePassword": {
              "type": "securestring"
            },
            "imagePath": {
              "type": "string",
              "metadata": {
                "description": "The fully qualified image path to use for the container. [registry].azurecr.io/snow_mid_server_custom:yokohama-12-18-2024__patch1-02-21-2025_03-05-2025_2133"
              }
            },
            "containerRegistryId": {
              "type": "string"
            },
            "userAssignedIdentityName": {
              "type": "string"
            },
            "containerSubnetId": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "numCpu": {
              "type": "int",
              "defaultValue": 1,
              "allowedValues": [
                1,
                2,
                4,
                8
              ],
              "metadata": {
                "description": "The number of CPU cores to allocate to the MID Server container"
              }
            },
            "memoryInGB": {
              "type": "int",
              "defaultValue": 4,
              "allowedValues": [
                1,
                2,
                4,
                8,
                16
              ],
              "metadata": {
                "description": "The amount of memory in GB to allocate to the MID Server container"
              }
            },
            "additionalEnvironmentVariables": {
              "type": "array",
              "defaultValue": [
                {
                  "name": "MID_WRAPPER_wrapper__java__classpath__1",
                  "value": "extlib/*.jar"
                },
                {
                  "name": "MID_WRAPPER_wrapper__java__classpath__2",
                  "value": "lib/*.jar"
                }
              ]
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the executed deployment script"
              }
            }
          },
          "variables": {
            "containerRegistryObject": "[__bicep.parseResourceId(parameters('containerRegistryId'))]",
            "fileShareName": "[toLower(replace(parameters('midServerName'), '-', ''))]",
            "subnetObject": "[__bicep.parseResourceId(parameters('containerSubnetId'))]",
            "virtualNetworkName": "[split(parameters('containerSubnetId'), '/')[8]]"
          },
          "resources": {
            "containerRegistryExisting": {
              "existing": true,
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2023-07-01",
              "subscriptionId": "[variables('containerRegistryObject').SubscriptionId]",
              "resourceGroup": "[variables('containerRegistryObject').ResourceGroup]",
              "name": "[variables('containerRegistryObject').Name]"
            },
            "userAssignedIdentity": {
              "existing": true,
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[parameters('userAssignedIdentityName')]"
            },
            "storageAccount": {
              "existing": true,
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2023-01-01",
              "name": "[parameters('storageAccountName')]"
            },
            "midServerShare": {
              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
              "apiVersion": "2023-05-01",
              "name": "[toLower(format('{0}/default/{1}', parameters('storageAccountName'), variables('fileShareName')))]",
              "properties": {
                "shareQuota": 5
              }
            },
            "midServerShareKeystore": {
              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
              "apiVersion": "2023-05-01",
              "name": "[toLower(format('{0}/default/{1}keystore', parameters('storageAccountName'), variables('fileShareName')))]",
              "properties": {
                "shareQuota": 1
              }
            },
            "virtualNetwork": {
              "existing": true,
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2023-05-01",
              "subscriptionId": "[variables('subnetObject').SubscriptionId]",
              "resourceGroup": "[variables('subnetObject').ResourceGroup]",
              "name": "[variables('virtualNetworkName')]"
            },
            "containerGroup": {
              "type": "Microsoft.ContainerInstance/containerGroups",
              "apiVersion": "2023-05-01",
              "name": "[parameters('midServerName')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')))]": {}
                }
              },
              "properties": {
                "containers": [
                  {
                    "name": "[parameters('midServerName')]",
                    "properties": {
                      "image": "[parameters('imagePath')]",
                      "resources": {
                        "requests": {
                          "cpu": "[parameters('numCpu')]",
                          "memoryInGB": "[parameters('memoryInGB')]"
                        }
                      },
                      "environmentVariables": "[union(createArray(createObject('name', 'HOSTNAME', 'value', parameters('midServerName')), createObject('name', 'MID_INSTANCE_URL', 'value', parameters('midInstanceUrl')), createObject('name', 'MID_SERVER_NAME', 'value', parameters('midServerName')), createObject('name', 'MID_INSTANCE_USERNAME', 'value', parameters('midInstanceUsername')), createObject('name', 'MID_INSTANCE_PASSWORD', 'secureValue', parameters('midInstancePassword')), createObject('name', 'MID_CONFIG__AZURE__CLIENT__ID', 'value', reference('userAssignedIdentity').principalId)), parameters('additionalEnvironmentVariables'))]",
                      "volumeMounts": [
                        {
                          "name": "midserver",
                          "mountPath": "/opt/snc_mid_server/mid_container"
                        },
                        {
                          "name": "keystore",
                          "mountPath": "/opt/snc_mid_server/agent/security"
                        }
                      ]
                    }
                  }
                ],
                "imageRegistryCredentials": [
                  {
                    "server": "[reference('containerRegistryExisting').loginServer]",
                    "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]"
                  }
                ],
                "dnsConfig": "[if(not(empty(tryGet(tryGet(reference('virtualNetwork'), 'dhcpOptions'), 'dnsServers'))), createObject('nameServers', reference('virtualNetwork').dhcpOptions.dnsServers), null())]",
                "osType": "Linux",
                "restartPolicy": "Always",
                "subnetIds": [
                  {
                    "name": "default",
                    "id": "[parameters('containerSubnetId')]"
                  }
                ],
                "volumes": [
                  {
                    "name": "midserver",
                    "azureFile": {
                      "shareName": "[variables('fileShareName')]",
                      "storageAccountName": "[parameters('storageAccountName')]",
                      "storageAccountKey": "[listKeys('storageAccount', '2023-01-01').keys[0].value]"
                    }
                  },
                  {
                    "name": "keystore",
                    "azureFile": {
                      "shareName": "[format('{0}keystore', variables('fileShareName'))]",
                      "storageAccountName": "[parameters('storageAccountName')]",
                      "storageAccountKey": "[listKeys('storageAccount', '2023-01-01').keys[0].value]"
                    }
                  }
                ]
              },
              "tags": "[union(parameters('tags'), createObject('SnowMidServerName', parameters('midServerName'), 'SnowMidServerUser', parameters('midInstanceUsername'), 'SnowMidImage', parameters('imagePath')))]",
              "dependsOn": [
                "containerRegistryExisting",
                "userAssignedIdentity",
                "virtualNetwork"
              ]
            }
          },
          "outputs": {
            "container": {
              "type": "object",
              "value": "[reference('containerGroup', '2023-05-01', 'full')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('GetBuildContext-{0}', parameters('midServerName')))]"
      ]
    }
  ],
  "outputs": {
    "storageAccountId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
    },
    "scriptOutputs": {
      "type": "object",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('GetBuildContext-{0}', parameters('midServerName'))), '2022-09-01').outputs]"
    }
  }
}